{
  "version": 3,
  "sources": ["../../../../node_modules/libphonenumber-js/metadata.min.json.js", "../../../../node_modules/libphonenumber-js/min/exports/withMetadataArgument.js", "../../../../node_modules/libphonenumber-js/source/ParseError.js", "../../../../node_modules/libphonenumber-js/source/constants.js", "../../../../node_modules/libphonenumber-js/source/tools/semver-compare.js", "../../../../node_modules/libphonenumber-js/source/metadata.js", "../../../../node_modules/libphonenumber-js/source/helpers/extension/createExtensionPattern.js", "../../../../node_modules/libphonenumber-js/source/helpers/isViablePhoneNumber.js", "../../../../node_modules/libphonenumber-js/source/helpers/extension/extractExtension.js", "../../../../node_modules/libphonenumber-js/source/helpers/parseDigits.js", "../../../../node_modules/libphonenumber-js/source/parseIncompletePhoneNumber.js", "../../../../node_modules/libphonenumber-js/source/helpers/mergeArrays.js", "../../../../node_modules/libphonenumber-js/source/helpers/checkNumberLength.js", "../../../../node_modules/libphonenumber-js/source/isPossible.js", "../../../../node_modules/libphonenumber-js/source/helpers/matchesEntirely.js", "../../../../node_modules/libphonenumber-js/source/helpers/getNumberType.js", "../../../../node_modules/libphonenumber-js/source/isValid.js", "../../../../node_modules/libphonenumber-js/source/helpers/getPossibleCountriesForNumber.js", "../../../../node_modules/libphonenumber-js/source/helpers/applyInternationalSeparatorStyle.js", "../../../../node_modules/libphonenumber-js/source/helpers/formatNationalNumberUsingFormat.js", "../../../../node_modules/libphonenumber-js/source/helpers/getIddPrefix.js", "../../../../node_modules/libphonenumber-js/source/helpers/RFC3966.js", "../../../../node_modules/libphonenumber-js/source/format.js", "../../../../node_modules/libphonenumber-js/source/PhoneNumber.js", "../../../../node_modules/libphonenumber-js/source/helpers/stripIddPrefix.js", "../../../../node_modules/libphonenumber-js/source/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js", "../../../../node_modules/libphonenumber-js/source/helpers/extractNationalNumber.js", "../../../../node_modules/libphonenumber-js/source/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js", "../../../../node_modules/libphonenumber-js/source/helpers/extractCountryCallingCode.js", "../../../../node_modules/libphonenumber-js/source/helpers/getCountryByNationalNumber.js", "../../../../node_modules/libphonenumber-js/source/helpers/getCountryByCallingCode.js", "../../../../node_modules/libphonenumber-js/source/helpers/extractPhoneContext.js", "../../../../node_modules/libphonenumber-js/source/helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js", "../../../../node_modules/libphonenumber-js/source/parse.js", "../../../../node_modules/libphonenumber-js/source/parsePhoneNumberWithError_.js", "../../../../node_modules/libphonenumber-js/source/normalizeArguments.js", "../../../../node_modules/libphonenumber-js/source/parsePhoneNumberWithError.js", "../../../../node_modules/libphonenumber-js/source/parsePhoneNumber_.js", "../../../../node_modules/libphonenumber-js/source/parsePhoneNumber.js", "../../../../node_modules/libphonenumber-js/source/isValidPhoneNumber.js", "../../../../node_modules/libphonenumber-js/source/isPossiblePhoneNumber.js", "../../../../node_modules/libphonenumber-js/source/validatePhoneNumberLength.js", "../../../../node_modules/libphonenumber-js/source/findNumbers/LRUCache.js", "../../../../node_modules/libphonenumber-js/source/findNumbers/RegExpCache.js", "../../../../node_modules/libphonenumber-js/source/findNumbers/util.js", "../../../../node_modules/libphonenumber-js/source/findNumbers/utf-8.js", "../../../../node_modules/libphonenumber-js/source/findNumbers/matchPhoneNumberStringAgainstPhoneNumber.js", "../../../../node_modules/libphonenumber-js/source/findNumbers/Leniency.js", "../../../../node_modules/libphonenumber-js/source/findNumbers/parsePreCandidate.js", "../../../../node_modules/libphonenumber-js/source/findNumbers/isValidPreCandidate.js", "../../../../node_modules/libphonenumber-js/source/findNumbers/isValidCandidate.js", "../../../../node_modules/libphonenumber-js/source/PhoneNumberMatcher.js", "../../../../node_modules/libphonenumber-js/source/legacy/findNumbers.js", "../../../../node_modules/libphonenumber-js/source/legacy/searchNumbers.js", "../../../../node_modules/libphonenumber-js/source/findPhoneNumbersInText.js", "../../../../node_modules/libphonenumber-js/source/searchPhoneNumbersInText.js", "../../../../node_modules/libphonenumber-js/source/AsYouTypeState.js", "../../../../node_modules/libphonenumber-js/source/AsYouTypeFormatter.util.js", "../../../../node_modules/libphonenumber-js/source/AsYouTypeFormatter.complete.js", "../../../../node_modules/libphonenumber-js/source/AsYouTypeFormatter.PatternParser.js", "../../../../node_modules/libphonenumber-js/source/AsYouTypeFormatter.PatternMatcher.js", "../../../../node_modules/libphonenumber-js/source/AsYouTypeFormatter.js", "../../../../node_modules/libphonenumber-js/source/AsYouTypeParser.js", "../../../../node_modules/libphonenumber-js/source/AsYouType.js", "../../../../node_modules/libphonenumber-js/source/getCountries.js", "../../../../node_modules/libphonenumber-js/source/getExampleNumber.js", "../../../../node_modules/libphonenumber-js/source/formatIncompletePhoneNumber.js", "../../../../node_modules/libphonenumber-js/min/exports/parsePhoneNumberWithError.js", "../../../../node_modules/libphonenumber-js/min/exports/parsePhoneNumber.js", "../../../../node_modules/libphonenumber-js/min/exports/isValidPhoneNumber.js", "../../../../node_modules/libphonenumber-js/min/exports/isPossiblePhoneNumber.js", "../../../../node_modules/libphonenumber-js/min/exports/validatePhoneNumberLength.js", "../../../../node_modules/libphonenumber-js/min/exports/findNumbers.js", "../../../../node_modules/libphonenumber-js/min/exports/searchNumbers.js", "../../../../node_modules/libphonenumber-js/min/exports/findPhoneNumbersInText.js", "../../../../node_modules/libphonenumber-js/min/exports/searchPhoneNumbersInText.js", "../../../../node_modules/libphonenumber-js/min/exports/PhoneNumberMatcher.js", "../../../../node_modules/libphonenumber-js/min/exports/AsYouType.js", "../../../../node_modules/libphonenumber-js/min/exports/isSupportedCountry.js", "../../../../node_modules/libphonenumber-js/min/exports/getCountries.js", "../../../../node_modules/libphonenumber-js/min/exports/getCountryCallingCode.js", "../../../../node_modules/libphonenumber-js/min/exports/getExtPrefix.js", "../../../../node_modules/libphonenumber-js/min/exports/Metadata.js", "../../../../node_modules/libphonenumber-js/min/exports/getExampleNumber.js", "../../../../node_modules/libphonenumber-js/min/exports/formatIncompletePhoneNumber.js", "../../../../node_modules/libphonenumber-js/source/legacy/parse.js", "../../../../node_modules/libphonenumber-js/index.es6.exports/parse.js", "../../../../node_modules/libphonenumber-js/source/legacy/format.js", "../../../../node_modules/libphonenumber-js/index.es6.exports/format.js", "../../../../node_modules/libphonenumber-js/source/legacy/getNumberType.js", "../../../../node_modules/libphonenumber-js/index.es6.exports/getNumberType.js", "../../../../node_modules/libphonenumber-js/source/legacy/isPossibleNumber.js", "../../../../node_modules/libphonenumber-js/index.es6.exports/isPossibleNumber.js", "../../../../node_modules/libphonenumber-js/source/legacy/isValidNumber.js", "../../../../node_modules/libphonenumber-js/index.es6.exports/isValidNumber.js", "../../../../node_modules/libphonenumber-js/source/legacy/isValidNumberForRegion_.js", "../../../../node_modules/libphonenumber-js/source/legacy/isValidNumberForRegion.js", "../../../../node_modules/libphonenumber-js/index.es6.exports/isValidNumberForRegion.js", "../../../../node_modules/libphonenumber-js/source/legacy/findPhoneNumbersInitialImplementation.js", "../../../../node_modules/libphonenumber-js/source/legacy/findPhoneNumbers.js", "../../../../node_modules/libphonenumber-js/index.es6.exports/findPhoneNumbers.js", "../../../../node_modules/libphonenumber-js/index.es6.exports/searchPhoneNumbers.js", "../../../../node_modules/libphonenumber-js/index.es6.exports/PhoneNumberSearch.js"],
  "sourcesContent": ["// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([457]\\\\d{6})$|1\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2457]\\\\d{6})$|1\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"([267]\\\\d{6})$|1\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"(183[12])|0\",0,0,0,[[\"(?:(?:2(?:[0-26-9]\\\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\\\d|2[0-8]))\\\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|22\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]]],\"BG\":[\"359\",\"00\",\"00800\\\\d{7}|[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9,12],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"[24-689]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-689]\"]]]],\"BL\":[\"590\",\"00\",\"590\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:395|76[018])\\\\d|475[01])\\\\d{4}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-46-9]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([3-8]\\\\d{6})$|1\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-79]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}|3\\\\d{6}\",[7,10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|3[178]|50|68|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\",[10]],[\"\",[10]],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\",[10]],[\"900[2-9]\\\\d{6}\",[10]],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:00|2[125-9]|33|44|66|77|88)|622)[2-9]\\\\d{6}\",[10]],0,[\"310\\\\d{4}\",[7]],0,[\"600[2-9]\\\\d{6}\",[10]]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-36]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"[26]\\\\d{8}|88\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"1[127]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-689]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"10(?:10|9[56])|2[0-57-9](?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"(1(?:[12]\\\\d|79)\\\\d\\\\d)|0\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:60\\\\d\\\\d|9101)\\\\d{6}|(?:1\\\\d|3)\\\\d{9}\",[10,11],[[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"6\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3[0-357]|91\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0(4(?:[14]4|56)|[579])?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[015]\\\\d|2[13]|31|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-579]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-579]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[12]00|[368]|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[1245]|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"]],0,0,\"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\",\"$1\"],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0235])|4(?:[0-5]\\\\d\\\\d|69[7-9]|70[0-579])|(?:(?:5[0-26-9]|[78][0-49])\\\\d|6(?:[0-4]\\\\d|50))\\\\d)|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|8(?:[02]\\\\d|1[0-246-9])))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"[56]94\\\\d{6}|(?:80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[56]|9[47]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[89]\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"([25-9]\\\\d{5})$|0\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d|60)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d|70)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"590\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|[68][0-689]|7[08]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:395|76[018])\\\\d|475[01])\\\\d{4}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11,12],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"([3-9]\\\\d{6})$|1\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"9008\\\\d{3}|(?:[2-467]\\\\d\\\\d|862)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"(?:[2-489]\\\\d|55)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[89]\",\"(?:(?:00[1-9]|8\\\\d)\\\\d{4}|[1-36])\\\\d{6}|00\\\\d{10}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([25-8]\\\\d{5})$|0\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|(?:55|70)\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[378]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([0-24-8]\\\\d{5})$|0\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[257-9]\"],\"0$1\"]],\"0\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[245]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"30[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[27-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-8]\\\\d{6})$|1\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"(1001)|0\"],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:[25]\\\\d|33|77|88)\\\\d{7}|(?:2\\\\d|[4-6])\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[4-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29[1289]|389)\",\"529(?:1[1-46-9]|2[013-8]|90)|5(?:298|389)[0-46-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\",\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5293[01]\\\\d{4}|5(?:2(?:[0-25-7]\\\\d|3[1-578]|4[02-46-8]|8[0235-7]|9[0-289])|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|8[0189]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[017]\\\\d|2[0-2]|6[0-8]|8[0-3]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"(?:[3489]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"590\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:395|76[018])\\\\d|475[01])\\\\d{4}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"([24-9]\\\\d{6})$|0\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[5-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"596\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"([34]\\\\d{6})$|1\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[57]|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57]\"]],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[34679]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"(?:[1289]\\\\d|31|77)\\\\d{7}|1\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"1(?:(?:[27]2|44|99)[1-9]|65[0-689])\\\\d{7}|(?:1(?:[01]\\\\d|2[13-9]|[35][1-9]|4[0-35-9]|6[0-46-9]|7[013-9]|8[1-79]|9[1-8])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9]|53)|8\",\"1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1(?:[367]|80)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[02-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[04]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\",[5,6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-578]|91\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]|59\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-59]|[67][2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:444|(?:55|8\\\\d)\\\\d|666)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-68]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[29]\\\\d{7,9}|50\\\\d{5}(?:\\\\d{2,3})?|6[0-35-9]\\\\d{6}|7\\\\d{7,8}|8\\\\d{4,9}|(?:11\\\\d|[34])\\\\d{7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-579]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|[89]0\",\"50(?:[0367]|88)|[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]]],\"PA\":[\"507\",\"00\",\"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]]],\"PE\":[\"51\",\"00|19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,\"00\",\" Anexo \"],\"PF\":[\"689\",\"00\",\"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\",[6,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"(?:6|8\\\\d\\\\d)\\\\d{7}|[1-9]\\\\d{6}(?:\\\\d{2})?|[26]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|20|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}|(?:708|80\\\\d)\\\\d{6}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\"],\"QA\":[\"974\",\"00\",\"800\\\\d{4}|(?:2|800)\\\\d{6}|(?:0080|[3-7])\\\\d{7}\",[7,8,9,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[16]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[3-7]\"]]]],\"RE\":[\"262\",\"00\",\"(?:26|[689]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"26(?:2\\\\d\\\\d|3(?:0\\\\d|1[0-3]))\\\\d{4}\"],[\"(?:69(?:2\\\\d\\\\d|3(?:0[0-46]|1[013]|2[0-2]|3[0-39]|4\\\\d|5[0-5]|6[0-6]|7[0-27]|8[0-8]|9[0-479]))|9(?:399[0-2]|4790|76(?:2[27]|3[0-37]|9\\\\d)))\\\\d{4}\"],[\"80\\\\d{7}\"],[\"89[1-37-9]\\\\d{6}\"],0,0,0,0,0,[\"8(?:1[019]|2[0156]|84|90)\\\\d{6}\"]]],\"RO\":[\"40\",\"00\",\"(?:[2378]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"8\\\\d{13}|[347-9]\\\\d{9}\",[10,14],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,\"3[04-689]|[489]\",0,\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]]],\"0\"],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"800\\\\d{4}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44|9)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-6]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[489]\\\\d|[57]9)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[237-9]\\\\d|66)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d|93)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"(?:2|90)4|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3478]|64|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6(?:0[5-7]|[1-35-9])|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"(5\\\\d{6})$|1\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-479]\\\\d{6})$|1\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"(?:00|[1-57-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3[1-5]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]]],\"TR\":[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-46-8]\\\\d{6})$|1\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[25-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])\",\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|89|9[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"310\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:47220[01]|5(?:05(?:[2-57-9]\\\\d\\\\d|6(?:[0-35-9]\\\\d|4[46]))|57200))\\\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[0-2]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"(?:0004|4)\\\\d{9}|[1249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\",[7,8,10,13],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"405|8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"(?:33|[5-79]\\\\d|88)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[35-9]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-578]\\\\d{6})$|1\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]]],\"WF\":[\"681\",\"00\",\"(?:40|72)\\\\d{4}|8\\\\d{5}(?:\\\\d{3})?\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[478]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7(?:[24-6]|8[0-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"(?:(?:(?:26|63)9|80\\\\d)\\\\d\\\\d|93980)\\\\d{4}\",[9],0,\"0\",0,0,0,0,\"269|63|9398\"],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|63|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"]},\"nonGeographic\":{\"800\":[\"800\",0,\"(?:00|[1-9]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:00|[1-9]\\\\d)\\\\d{6}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\d{11}|[35-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[35-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"[0-36-9]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-36-9]\"]]],0,0,0,0,0,0,[0,[\"[0-36-9]\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|[19]\\\\d{7}|(?:[25]\\\\d\\\\d|4)\\\\d{7}(?:\\\\d{2})?\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"49\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"1[36]|9\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"16\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|23|3(?:[15]|4[57])|4|51\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-35]\"]]],0,0,0,0,0,0,[0,[\"342\\\\d{4}|(?:337|49)\\\\d{6}|(?:3(?:2|47|7\\\\d{3})|50\\\\d{3})\\\\d{7}\",[7,8,9,10,12]],0,0,0,0,0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:345\\\\d|9[89])\\\\d{6}|(?:10|2(?:3|85\\\\d)|3(?:[15]|[69]\\\\d\\\\d)|4[15-8]|51)\\\\d{8}\"]]],\"883\":[\"883\",0,\"(?:[1-4]\\\\d|51)\\\\d{6,10}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,8})\",\"$1 $2 $3\",[\"[14]|2[24-689]|3[02-689]|51[24-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"21\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[235]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:2(?:00\\\\d\\\\d|10)|(?:370[1-9]|51\\\\d0)\\\\d)\\\\d{7}|51(?:00\\\\d{5}|[24-9]0\\\\d{4,7})|(?:1[013-79]|2[24-689]|3[02-689]|4[0-4])0\\\\d{5,9}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}", "// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.min.json.js'\r\n\r\nexport default function withMetadataArgument(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}", "// https://stackoverflow.com/a/46971044/970769\r\n// \"Breaking changes in Typescript 2.1\"\r\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\r\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\r\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\nexport default class ParseError extends Error {\r\n  constructor(code) {\r\n    super(code)\r\n    // Set the prototype explicitly.\r\n    // Any subclass of FooError will have to manually set the prototype as well.\r\n    Object.setPrototypeOf(this, ParseError.prototype)\r\n    this.name = this.constructor.name\r\n  }\r\n}", "// The minimum length of the national significant number.\r\nexport const MIN_LENGTH_FOR_NSN = 2\r\n\r\n// The ITU says the maximum length should be 15,\r\n// but one can find longer numbers in Germany.\r\nexport const MAX_LENGTH_FOR_NSN = 17\r\n\r\n// The maximum length of the country calling code.\r\nexport const MAX_LENGTH_COUNTRY_CODE = 3\r\n\r\n// Digits accepted in phone numbers\r\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\r\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\r\n\r\n// `DASHES` will be right after the opening square bracket of the \"character class\"\r\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\r\nconst SLASHES = '\\uFF0F/'\r\nconst DOTS = '\\uFF0E.'\r\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\r\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\r\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\r\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\r\n\r\n// Regular expression of acceptable punctuation found in phone numbers. This\r\n// excludes punctuation found as a leading character only. This consists of dash\r\n// characters, white space characters, full stops, slashes, square brackets,\r\n// parentheses and tildes. Full-width variants are also present.\r\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\r\n\r\nexport const PLUS_CHARS = '+\\uFF0B'\r\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')", "// Copy-pasted from:\r\n// https://github.com/substack/semver-compare/blob/master/index.js\r\n//\r\n// Inlining this function because some users reported issues with\r\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\r\n//\r\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\r\nexport default function(a, b) {\r\n    a = a.split('-')\r\n    b = b.split('-')\r\n    var pa = a[0].split('.')\r\n    var pb = b[0].split('.')\r\n    for (var i = 0; i < 3; i++) {\r\n        var na = Number(pa[i])\r\n        var nb = Number(pb[i])\r\n        if (na > nb) return 1\r\n        if (nb > na) return -1\r\n        if (!isNaN(na) && isNaN(nb)) return 1\r\n        if (isNaN(na) && !isNaN(nb)) return -1\r\n    }\r\n    if (a[1] && b[1]) {\r\n        return a[1] > b[1] ? 1 : (a[1] < b[1] ? -1 : 0)\r\n    }\r\n    return !a[1] && b[1] ? 1 : (a[1] && !b[1] ? -1 : 0)\r\n}", "import compare from './tools/semver-compare.js'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\n// Moved `001` country code to \"nonGeographic\" section of metadata.\r\nconst V4 = '1.7.35'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nconst CALLING_CODE_REG_EXP = /^\\d+$/\r\n\r\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\r\nexport default class Metadata {\r\n\tconstructor(metadata) {\r\n\t\tvalidateMetadata(metadata)\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, metadata)\r\n\t}\r\n\r\n\tgetCountries() {\r\n\t\treturn Object.keys(this.metadata.countries).filter(_ => _ !== '001')\r\n\t}\r\n\r\n\tgetCountryMetadata(countryCode) {\r\n\t\treturn this.metadata.countries[countryCode]\r\n\t}\r\n\r\n\tnonGeographic() {\r\n\t\tif (this.v1 || this.v2 || this.v3) return\r\n\t\t// `nonGeographical` was a typo.\r\n\t\t// It's present in metadata generated from `1.7.35` to `1.7.37`.\r\n\t\t// The test case could be found by searching for \"nonGeographical\".\r\n\t\treturn this.metadata.nonGeographic || this.metadata.nonGeographical\r\n\t}\r\n\r\n\thasCountry(country) {\r\n\t\treturn this.getCountryMetadata(country) !== undefined\r\n\t}\r\n\r\n\thasCallingCode(callingCode) {\r\n\t\tif (this.getCountryCodesForCallingCode(callingCode)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tif (this.nonGeographic()[callingCode]) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisNonGeographicCallingCode(callingCode) {\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\treturn this.nonGeographic()[callingCode] ? true : false\r\n\t\t} else {\r\n\t\t\treturn this.getCountryCodesForCallingCode(callingCode) ? false : true\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountry(countryCode) {\r\n\t\treturn this.selectNumberingPlan(countryCode)\r\n\t}\r\n\r\n\tselectNumberingPlan(countryCode, callingCode) {\r\n\t\t// Supports just passing `callingCode` as the first argument.\r\n\t\tif (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\r\n\t\t\tcallingCode = countryCode\r\n\t\t\tcountryCode = null\r\n\t\t}\r\n\t\tif (countryCode && countryCode !== '001') {\r\n\t\t\tif (!this.hasCountry(countryCode)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${countryCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this)\r\n\t\t} else if (callingCode) {\r\n\t\t\tif (!this.hasCallingCode(callingCode)) {\r\n\t\t\t\tthrow new Error(`Unknown calling code: ${callingCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this)\r\n\t\t} else {\r\n\t\t\tthis.numberingPlan = undefined\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetCountryCodesForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\tif (countryCodes) {\r\n\t\t\t// Metadata before V4 included \"non-geographic entity\" calling codes\r\n\t\t\t// inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\r\n\t\t\t// Now the semantics of `country_calling_codes` has changed:\r\n\t\t\t// it's specifically for \"countries\" now.\r\n\t\t\t// Older versions of custom metadata will simply skip parsing\r\n\t\t\t// \"non-geographic entity\" phone numbers with new versions\r\n\t\t\t// of this library: it's not considered a bug,\r\n\t\t\t// because such numbers are extremely rare,\r\n\t\t\t// and developers extremely rarely use custom metadata.\r\n\t\t\tif (countryCodes.length === 1 && countryCodes[0].length === 3) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\treturn countryCodes\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountryCodeForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.getCountryCodesForCallingCode(callingCode)\r\n\t\tif (countryCodes) {\r\n\t\t\treturn countryCodes[0]\r\n\t\t}\r\n\t}\r\n\r\n\tgetNumberingPlanMetadata(callingCode) {\r\n\t\tconst countryCode = this.getCountryCodeForCallingCode(callingCode)\r\n\t\tif (countryCode) {\r\n\t\t\treturn this.getCountryMetadata(countryCode)\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tconst metadata = this.nonGeographic()[callingCode]\r\n\t\t\tif (metadata) {\r\n\t\t\t\treturn metadata\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\t// In that metadata, there was no concept of \"non-geographic\" metadata\r\n\t\t\t// so metadata for `001` country code was stored along with other countries.\r\n\t\t\t// The test case can be found by searching for:\r\n\t\t\t// \"should work around `nonGeographic` metadata not existing\".\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn this.metadata.countries['001']\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountryCallingCode() {\r\n\t\treturn this.numberingPlan.callingCode()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tIDDPrefix() {\r\n\t\treturn this.numberingPlan.IDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tdefaultIDDPrefix() {\r\n\t\treturn this.numberingPlan.defaultIDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalNumberPattern() {\r\n\t\treturn this.numberingPlan.nationalNumberPattern()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tpossibleLengths() {\r\n\t\treturn this.numberingPlan.possibleLengths()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tformats() {\r\n\t\treturn this.numberingPlan.formats()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixForParsing() {\r\n\t\treturn this.numberingPlan.nationalPrefixForParsing()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.numberingPlan.nationalPrefixTransformRule()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tleadingDigits() {\r\n\t\treturn this.numberingPlan.leadingDigits()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\thasTypes() {\r\n\t\treturn this.numberingPlan.hasTypes()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\ttype(type) {\r\n\t\treturn this.numberingPlan.type(type)\r\n\t}\r\n\r\n\t// Deprecated.\r\n\text() {\r\n\t\treturn this.numberingPlan.ext()\r\n\t}\r\n\r\n\tcountryCallingCodes() {\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tchooseCountryByCountryCallingCode(callingCode) {\r\n\t\treturn this.selectNumberingPlan(callingCode)\r\n\t}\r\n\r\n\thasSelectedNumberingPlan() {\r\n\t\treturn this.numberingPlan !== undefined\r\n\t}\r\n}\r\n\r\nclass NumberingPlan {\r\n\tconstructor(metadata, globalMetadataObject) {\r\n\t\tthis.globalMetadataObject = globalMetadataObject\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, globalMetadataObject.metadata)\r\n\t}\r\n\r\n\tcallingCode() {\r\n\t\treturn this.metadata[0]\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\tgetDefaultCountryMetadataForRegion() {\r\n\t\treturn this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())\r\n\t}\r\n\r\n\t// Is always present.\r\n\tIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[1]\r\n\t}\r\n\r\n\t// Is only present when a country supports multiple IDD prefixes.\r\n\tdefaultIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern() {\r\n\t\tif (this.v1 || this.v2) return this.metadata[1]\r\n\t\treturn this.metadata[2]\r\n\t}\r\n\r\n\t// \"possible length\" data is always present in Google's metadata.\r\n\tpossibleLengths() {\r\n\t\tif (this.v1) return\r\n\t\treturn this.metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(metadata) {\r\n\t\treturn metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats() {\r\n\t\tconst formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix() {\r\n\t\treturn this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(metadata) {\r\n\t\treturn metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\t_nationalPrefixForParsing() {\r\n\t\treturn this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7]\r\n\t}\r\n\r\n\tnationalPrefixForParsing() {\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting() {\r\n\t\treturn !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when formatting\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits() {\r\n\t\treturn this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes() {\r\n\t\treturn this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes() {\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type) {\r\n\t\tif (this.hasTypes() && getType(this.types(), type)) {\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text() {\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n}\r\n\r\nclass Format {\r\n\tconstructor(format, metadata) {\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat() {\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns() {\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix() {\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\r\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule())\r\n\t\t\t// In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\r\n\t\t\t// when `national_prefix_formatting_rule` is not present.\r\n\t\t\t// So, `true` or `false` are returned explicitly here, so that\r\n\t\t\t// `0` number isn't returned.\r\n\t\t\t? true\r\n\t\t\t: false\r\n\t}\r\n\r\n\tinternationalFormat() {\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\r\nconst FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/\r\n\r\nclass Type {\r\n\tconstructor(type, metadata) {\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type) {\r\n\tswitch (type) {\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata) {\r\n\tif (!metadata) {\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to\r\n\t// `country_calling_codes` in `1.0.18`.\r\n\tif (!is_object(metadata) || !is_object(metadata.countries)) {\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` child object property. Got ${is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst type_of = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata) {\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries[country] !== undefined\r\n}\r\n\r\nfunction setVersion(metadata) {\r\n\tconst { version } = metadata\r\n\tif (typeof version === 'number') {\r\n\t\tthis.v1 = version === 1\r\n\t\tthis.v2 = version === 2\r\n\t\tthis.v3 = version === 3\r\n\t\tthis.v4 = version === 4\r\n\t} else {\r\n\t\tif (!version) {\r\n\t\t\tthis.v1 = true\r\n\t\t} else if (compare(version, V3) === -1) {\r\n\t\t\tthis.v2 = true\r\n\t\t} else if (compare(version, V4) === -1) {\r\n\t\t\tthis.v3 = true\r\n\t\t} else {\r\n\t\t\tthis.v4 = true\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\r\n// function isCountryCode(countryCode) {\r\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\r\n// }", "import { VALID_DIGITS } from '../../constants.js'\r\n\r\n// The RFC 3966 format for extensions.\r\nconst RFC3966_EXTN_PREFIX = ';ext='\r\n\r\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\r\nconst getExtensionDigitsPattern = (maxLength) => `([${VALID_DIGITS}]{1,${maxLength}})`\r\n\r\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\r\nexport default function createExtensionPattern(purpose) {\r\n\t// We cap the maximum length of an extension based on the ambiguity of the way\r\n\t// the extension is prefixed. As per ITU, the officially allowed length for\r\n\t// extensions is actually 40, but we don't support this since we haven't seen real\r\n\t// examples and this introduces many false interpretations as the extension labels\r\n\t// are not standardized.\r\n\t/** @type {string} */\r\n\tvar extLimitAfterExplicitLabel = '20';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterLikelyLabel = '15';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterAmbiguousChar = '9';\r\n\t/** @type {string} */\r\n\tvar extLimitWhenNotSure = '6';\r\n\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\u00A0\\\\t,]*\";\r\n\t// Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\r\n\t/** @type {string} */\r\n\tvar possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\u00A0\\\\t,-]*\";\r\n\t/** @type {string} */\r\n\tvar optionalExtnSuffix = \"#?\";\r\n\r\n\t// Here the extension is called out in more explicit way, i.e mentioning it obvious\r\n\t// patterns like \"ext.\".\r\n\t/** @type {string} */\r\n\tvar explicitExtLabels =\r\n\t  \"(?:e?xt(?:ensi(?:o\\u0301?|\\u00F3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\";\r\n\t// One-character symbols that can be used to indicate an extension, and less\r\n\t// commonly used or more ambiguous extension labels.\r\n\t/** @type {string} */\r\n\tvar ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\";\r\n\t// When extension is not separated clearly.\r\n\t/** @type {string} */\r\n\tvar ambiguousSeparator = \"[- ]+\";\r\n\t// This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\r\n\t// comma as extension label may have it.\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsNumberExtLabelNoComma = \"[ \\u00A0\\\\t]*\";\r\n\t// \",,\" is commonly used for auto dialling the extension when connected. First\r\n\t// comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\r\n\t// not repeat it here. Semi-colon works in Iphone and Android also to pop up a\r\n\t// button with the extension number following.\r\n\t/** @type {string} */\r\n\tvar autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\r\n\r\n\t/** @type {string} */\r\n\tvar rfcExtn = RFC3966_EXTN_PREFIX\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\r\n\t/** @type {string} */\r\n\tvar explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel)\r\n\t     + optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t+ getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar americanStyleExtnWithSuffix = ambiguousSeparator\r\n\t+ getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\r\n\r\n\t/** @type {string} */\r\n\tvar autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t     + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterLikelyLabel)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t    + \"(?:,)+\" + possibleCharsAfterExtLabel\r\n\t    + getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t    + optionalExtnSuffix;\r\n\r\n\t// The first regular expression covers RFC 3966 format, where the extension is added\r\n\t// using \";ext=\". The second more generic where extension is mentioned with explicit\r\n\t// labels like \"ext:\". In both the above cases we allow more numbers in extension than\r\n\t// any other extension labels. The third one captures when single character extension\r\n\t// labels or less commonly used labels are used. In such cases we capture fewer\r\n\t// extension digits in order to reduce the chance of falsely interpreting two\r\n\t// numbers beside each other as a number + extension. The fourth one covers the\r\n\t// special case of American numbers where the extension is written with a hash\r\n\t// at the end, such as \"- 503#\". The fifth one is exclusively for extension\r\n\t// autodialling formats which are used when dialling and in this case we accept longer\r\n\t// extensions. The last one is more liberal on the number of commas that acts as\r\n\t// extension labels, so we have a strict cap on the number of digits in such extensions.\r\n\treturn rfcExtn + \"|\"\r\n\t       + explicitExtn + \"|\"\r\n\t       + ambiguousExtn + \"|\"\r\n\t       + americanStyleExtnWithSuffix + \"|\"\r\n\t       + autoDiallingExtn + \"|\"\r\n\t       + onlyCommasExtn;\r\n}", "import {\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from '../constants.js'\r\n\r\nimport createExtensionPattern from './extension/createExtensionPattern.js'\r\n\r\n//  Regular expression of viable phone numbers. This is location independent.\r\n//  Checks we have at least three leading digits, and only valid punctuation,\r\n//  alpha characters and digits in the phone number. Does not include extension\r\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\r\n//  used as a placeholder for carrier codes, for example in Brazilian phone\r\n//  numbers. We also allow multiple '+' characters at the start.\r\n//\r\n//  Corresponds to the following:\r\n//  [digits]{minLengthNsn}|\r\n//  plus_sign*\r\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\r\n//\r\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\r\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\r\n//  The second expression restricts the number of digits to three or more, but\r\n//  then allows them to be in international form, and to have alpha-characters\r\n//  and punctuation. We split up the two reg-exes here and combine them when\r\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\r\n//  with ^ and append $ to each branch.\r\n//\r\n//  \"Note VALID_PUNCTUATION starts with a -,\r\n//   so must be the first in the range\" (c) Google devs.\r\n//  (wtf did they mean by saying that; probably nothing)\r\n//\r\nconst MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'\r\n//\r\n// And this is the second reg-exp:\r\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\r\n//\r\nexport const VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\n// This regular expression isn't present in Google's `libphonenumber`\r\n// and is only used to determine whether the phone number being input\r\n// is too short for it to even consider it a \"valid\" number.\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nconst VALID_PHONE_NUMBER_START_REG_EXP = new RegExp(\r\n\t'^' +\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){1,2}' +\r\n\t'$'\r\n, 'i')\r\n\r\nexport const VALID_PHONE_NUMBER_WITH_EXTENSION =\r\n\tVALID_PHONE_NUMBER +\r\n\t// Phone number extensions\r\n\t'(?:' + createExtensionPattern() + ')?'\r\n\r\n// The combined regular expression for valid phone numbers:\r\n//\r\nconst VALID_PHONE_NUMBER_PATTERN = new RegExp(\r\n\t// Either a short two-digit-only phone number\r\n\t'^' +\r\n\t\tMIN_LENGTH_PHONE_NUMBER_PATTERN +\r\n\t'$' +\r\n\t'|' +\r\n\t// Or a longer fully parsed phone number (min 3 characters)\r\n\t'^' +\r\n\t\tVALID_PHONE_NUMBER_WITH_EXTENSION +\r\n\t'$'\r\n, 'i')\r\n\r\n// Checks to see if the string of characters could possibly be a phone number at\r\n// all. At the moment, checks to see that the string begins with at least 2\r\n// digits, ignoring any punctuation commonly found in phone numbers. This method\r\n// does not require the number to be normalized in advance - but does assume\r\n// that leading non-number symbols have been removed, such as by the method\r\n// `extract_possible_number`.\r\n//\r\nexport default function isViablePhoneNumber(number) {\r\n\treturn number.length >= MIN_LENGTH_FOR_NSN &&\r\n\t\tVALID_PHONE_NUMBER_PATTERN.test(number)\r\n}\r\n\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nexport function isViablePhoneNumberStart(number) {\r\n\treturn VALID_PHONE_NUMBER_START_REG_EXP.test(number)\r\n}", "import createExtensionPattern from './createExtensionPattern.js'\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i')\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nexport default function extractExtension(number) {\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0) {\r\n\t\treturn {}\r\n\t}\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst numberWithoutExtension = number.slice(0, start)\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length) {\r\n\t\tif (matches[i]) {\r\n\t\t\treturn {\r\n\t\t\t\tnumber: numberWithoutExtension,\r\n\t\t\t\text: matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}", "// These mappings map a character (key) to a specific digit that should\r\n// replace it for normalization purposes. Non-European digits that\r\n// may be used in phone numbers are mapped to a European equivalent.\r\n//\r\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n//\r\nexport const DIGITS = {\r\n\t'0': '0',\r\n\t'1': '1',\r\n\t'2': '2',\r\n\t'3': '3',\r\n\t'4': '4',\r\n\t'5': '5',\r\n\t'6': '6',\r\n\t'7': '7',\r\n\t'8': '8',\r\n\t'9': '9',\r\n\t'\\uFF10': '0', // Fullwidth digit 0\r\n\t'\\uFF11': '1', // Fullwidth digit 1\r\n\t'\\uFF12': '2', // Fullwidth digit 2\r\n\t'\\uFF13': '3', // Fullwidth digit 3\r\n\t'\\uFF14': '4', // Fullwidth digit 4\r\n\t'\\uFF15': '5', // Fullwidth digit 5\r\n\t'\\uFF16': '6', // Fullwidth digit 6\r\n\t'\\uFF17': '7', // Fullwidth digit 7\r\n\t'\\uFF18': '8', // Fullwidth digit 8\r\n\t'\\uFF19': '9', // Fullwidth digit 9\r\n\t'\\u0660': '0', // Arabic-indic digit 0\r\n\t'\\u0661': '1', // Arabic-indic digit 1\r\n\t'\\u0662': '2', // Arabic-indic digit 2\r\n\t'\\u0663': '3', // Arabic-indic digit 3\r\n\t'\\u0664': '4', // Arabic-indic digit 4\r\n\t'\\u0665': '5', // Arabic-indic digit 5\r\n\t'\\u0666': '6', // Arabic-indic digit 6\r\n\t'\\u0667': '7', // Arabic-indic digit 7\r\n\t'\\u0668': '8', // Arabic-indic digit 8\r\n\t'\\u0669': '9', // Arabic-indic digit 9\r\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\r\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\r\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\r\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\r\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\r\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\r\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\r\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\r\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\r\n\t'\\u06F9': '9'  // Eastern-Arabic digit 9\r\n}\r\n\r\nexport function parseDigit(character) {\r\n\treturn DIGITS[character]\r\n}\r\n\r\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\r\nexport default function parseDigits(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tconst digit = parseDigit(character)\r\n\t\tif (digit) {\r\n\t\t\tresult += digit\r\n\t\t}\r\n\t}\r\n\treturn result\r\n}", "import { parseDigit } from './helpers/parseDigits.js'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+') {\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (prevParsedCharacters) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}", "/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport default function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b) {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}", "import mergeArrays from './mergeArrays.js'\r\n\r\nexport default function checkNumberLength(nationalNumber, metadata) {\r\n\treturn checkNumberLengthForType(nationalNumber, undefined, metadata)\r\n}\r\n\r\n// Checks whether a number is possible for the country based on its length.\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\t// Metadata before version `1.0.18` didn't contain `possible_lengths`.\r\n\tif (!possible_lengths) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE')) {\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographic entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\t\tif (mobile_type) {\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths) {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// } else {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info) {\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length) {\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}", "import Metadata from './metadata.js'\r\nimport checkNumberLength from './helpers/checkNumberLength.js'\r\n\r\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function isPossiblePhoneNumber(input, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2) {\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t} else {\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\t// Old metadata (< 1.0.18) had no \"possible length\" data.\r\n\tif (metadata.possibleLengths()) {\r\n\t\treturn isPossibleNumber(input.phone || input.nationalNumber, metadata)\r\n\t} else {\r\n\t\t// There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\r\n\t\t// were missing for \"non-geographical\" numbering plans.\r\n\t\t// Just assume the number is possible in such cases:\r\n\t\t// it's unlikely that anyone generated their custom metadata\r\n\t\t// in that short period of time (one day).\r\n\t\t// This code can be removed in some future major version update.\r\n\t\tif (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\r\n\t\t\t// \"Non-geographic entities\" did't have `possibleLengths`\r\n\t\t\t// due to a bug in metadata generation process.\r\n\t\t\treturn true\r\n\t\t} else {\r\n\t\t\tthrow new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isPossibleNumber(nationalNumber, metadata) { //, isInternational) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !isInternational\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}", "/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\r\nexport default function matchesEntirely(text, regular_expression) {\r\n\t// If assigning the `''` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\ttext = text || ''\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}", "import Metadata from '../metadata.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES = [\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\t// When `parse()` returned `{}`\r\n\t// meaning that the phone number is not a valid one.\r\n\tif (!input.country) {\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\r\n\t\t// For example, for \"US\" country.\r\n\t\t// Old metadata (< `1.0.18`) had a specific \"types\" data structure\r\n\t\t// that happened to be `undefined` for `MOBILE` in that case.\r\n\t\t// Newer metadata (>= `1.0.18`) has another data structure that is\r\n\t\t// not `undefined` for `MOBILE` in that case (it's just an empty array).\r\n\t\t// So this `if` is just for backwards compatibility with old metadata.\r\n\t\tif (!metadata.type('MOBILE')) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const type of NON_FIXED_LINE_PHONE_TYPES) {\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\r\n\t\t\treturn type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\r\n\ttype = metadata.type(type)\r\n\tif (!type || !type.pattern()) {\r\n\t\treturn false\r\n\t}\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0) {\r\n\t\treturn false\r\n\t}\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}", "import Metadata from './metadata.js'\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * isValid(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes()) {\r\n\t\treturn getNumberType(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matchesEntirely(nationalNumber, metadata.nationalNumberPattern())\r\n}", "import Metadata from '../metadata.js'\r\n\r\n/**\r\n * Returns a list of countries that the phone number could potentially belong to.\r\n * @param  {string} callingCode — Calling code.\r\n * @param  {string} nationalNumber — National (significant) number.\r\n * @param  {object} metadata — Metadata.\r\n * @return {string[]} A list of possible countries.\r\n */\r\nexport default function getPossibleCountriesForNumber(callingCode, nationalNumber, metadata) {\r\n\tconst _metadata = new Metadata(metadata)\r\n\tlet possibleCountries = _metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn []\r\n\t}\r\n\treturn possibleCountries.filter((country) => {\r\n\t\treturn couldNationalNumberBelongToCountry(nationalNumber, country, metadata)\r\n\t})\r\n}\r\n\r\nfunction couldNationalNumberBelongToCountry(nationalNumber, country, metadata) {\r\n\tconst _metadata = new Metadata(metadata)\r\n\t_metadata.selectNumberingPlan(country)\r\n\tif (_metadata.numberingPlan.possibleLengths().indexOf(nationalNumber.length) >= 0) {\r\n\t\treturn true\r\n\t}\r\n\treturn false\r\n}", "import { VALID_PUNCTUATION } from '../constants.js'\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\r\n\treturn formattedNumber.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}", "import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly. Therefore, we use `\\d`, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport default function formatNationalNumberUsingFormat(\r\n\tnumber,\r\n\tformat,\r\n\t{\r\n\t\tuseInternationalFormat,\r\n\t\twithNationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tmetadata\r\n\t}\r\n) {\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalFormat\r\n\t\t\t? format.internationalFormat()\r\n\t\t\t: (\r\n\t\t\t\t// This library doesn't use `domestic_carrier_code_formatting_rule`,\r\n\t\t\t\t// because that one is only used when formatting phone numbers\r\n\t\t\t\t// for dialing from a mobile phone, and this is not a dialing library.\r\n\t\t\t\t// carrierCode && format.domesticCarrierCodeFormattingRule()\r\n\t\t\t\t// \t// First, replace the $CC in the formatting rule with the desired carrier code.\r\n\t\t\t\t// \t// Then, replace the $FG in the formatting rule with the first group\r\n\t\t\t\t// \t// and the carrier code combined in the appropriate way.\r\n\t\t\t\t// \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\r\n\t\t\t\t// \t: (\r\n\t\t\t\t// \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t// \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t// \t\t\t: format.format()\r\n\t\t\t\t// \t)\r\n\t\t\t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t\t: format.format()\r\n\t\t\t)\r\n\t)\r\n\tif (useInternationalFormat) {\r\n\t\treturn applyInternationalSeparatorStyle(formattedNumber)\r\n\t}\r\n\treturn formattedNumber\r\n}", "import Metadata from '../metadata.js'\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport default function getIddPrefix(country, callingCode, metadata) {\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tif (countryMetadata.defaultIDDPrefix()) {\r\n\t\treturn countryMetadata.defaultIDDPrefix()\r\n\t}\r\n\tif (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n}\r\n", "import isViablePhoneNumber from './isViablePhoneNumber.js'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text) {\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';')) {\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name) {\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext }) {\r\n\tif (!number) {\r\n\t\treturn ''\r\n\t}\r\n\tif (number[0] !== '+') {\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}", "// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js'\r\nimport Metadata, { getCountryCallingCode } from './metadata.js'\r\nimport getIddPrefix from './helpers/getIddPrefix.js'\r\nimport { formatRFC3966 } from './helpers/RFC3966.js'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n/**\r\n * Formats a phone number.\r\n *\r\n * format(phoneNumberInstance, 'INTERNATIONAL', { ..., v2: true }, metadata)\r\n * format(phoneNumberInstance, 'NATIONAL', { ..., v2: true }, metadata)\r\n *\r\n * format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', { ... }, metadata)\r\n * format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {string} format\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function formatNumber(input, format, options, metadata) {\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...DEFAULT_OPTIONS, ...options }\r\n\t} else {\r\n\t\toptions = DEFAULT_OPTIONS\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country && input.country !== '001') {\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format) {\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966({\r\n\t\t\t\tnumber: `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text: input.ext\r\n\t\t\t})\r\n\r\n\t\t// For reference, here's Google's IDD formatter:\r\n\t\t// https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\r\n\t\t// Not saying that this IDD formatter replicates it 1:1, but it seems to work.\r\n\t\t// Who would even need to format phone numbers in IDD format anyway?\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst formattedNumber = formatIDD(\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tinput.carrierCode,\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\toptions.fromCountry,\r\n\t\t\t\tmetadata\r\n\t\t\t)\r\n\t\t\treturn addExtension(formattedNumber, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\r\n\tconst format = chooseFormatForNumber(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn formatNationalNumberUsingFormat(\r\n\t\tnumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tuseInternationalFormat: formatAs === 'INTERNATIONAL',\r\n\t\t\twithNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && (options && options.nationalPrefix === false) ? false : true,\r\n\t\t\tcarrierCode,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n}\r\n\r\nexport function chooseFormatForNumber(availableFormats, nationalNnumber) {\r\n\tfor (const format of availableFormats) {\r\n\t\t// Validate leading digits.\r\n\t\t// The test case for \"else path\" could be found by searching for\r\n\t\t// \"format.leadingDigitsPatterns().length === 0\".\r\n\t\tif (format.leadingDigitsPatterns().length > 0) {\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nfunction formatIDD(\r\n\tnationalNumber,\r\n\tcarrierCode,\r\n\tcountryCallingCode,\r\n\tfromCountry,\r\n\tmetadata\r\n) {\r\n\tconst fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata)\r\n\t// When calling within the same country calling code.\r\n\tif (fromCountryCallingCode === countryCallingCode) {\r\n\t\tconst formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata)\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (countryCallingCode === '1') {\r\n\t\t\treturn countryCallingCode + ' ' + formattedNumber\r\n\t\t}\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn formattedNumber\r\n\t}\r\n\tconst iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata)\r\n\tif (iddPrefix) {\r\n\t\treturn `${iddPrefix} ${countryCallingCode} ${formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata)}`\r\n\t}\r\n}", "import Metadata from './metadata.js'\r\nimport isPossibleNumber from './isPossible.js'\r\nimport isValidNumber from './isValid.js'\r\n// import checkNumberLength from './helpers/checkNumberLength.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js'\r\nimport formatNumber from './format.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\t/**\r\n\t * @param  {string} countryOrCountryCallingCode\r\n\t * @param  {string} nationalNumber\r\n\t * @param  {object} metadata — Metadata JSON\r\n\t * @return {PhoneNumber}\r\n\t */\r\n\tconstructor(countryOrCountryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryOrCountryCallingCode) {\r\n\t\t\tthrow new TypeError('`country` or `countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\tif (!metadata) {\r\n\t\t\tthrow new TypeError('`metadata` not passed')\r\n\t\t}\r\n\t\tconst { country, countryCallingCode } = getCountryAndCountryCallingCode(\r\n\t\t\tcountryOrCountryCallingCode,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tthis.country = country\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tsetExt(ext) {\r\n\t\tthis.ext = ext\r\n\t}\r\n\r\n\tgetPossibleCountries() {\r\n\t\tif (this.country) {\r\n\t\t\treturn [this.country]\r\n\t\t}\r\n\t\treturn getPossibleCountriesForNumber(\r\n\t\t\tthis.countryCallingCode,\r\n\t\t\tthis.nationalNumber,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.metadata)\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\r\n\t// but later it was found out that it doesn't include the possible `TOO_SHORT` result\r\n\t// returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\r\n\t// so eventually I simply commented out this method from the `PhoneNumber` class\r\n\t// and just left the `validatePhoneNumberLength()` function, even though that one would require\r\n\t// and additional step to also validate the actual country / calling code of the phone number.\r\n\t// validateLength() {\r\n\t// \tconst metadata = new Metadata(this.metadata)\r\n\t// \tmetadata.selectNumberingPlan(this.countryCallingCode)\r\n\t// \tconst result = checkNumberLength(this.nationalNumber, metadata)\r\n\t// \tif (result !== 'IS_POSSIBLE') {\r\n\t// \t\treturn result\r\n\t// \t}\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)\r\n\r\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\r\n\tlet country\r\n\tlet countryCallingCode\r\n\r\n\tconst metadata = new Metadata(metadataJson)\r\n\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t// Also store the country code as `.country`.\r\n\tif (isCountryCode(countryOrCountryCallingCode)) {\r\n\t\tcountry = countryOrCountryCallingCode\r\n\t\tmetadata.selectNumberingPlan(country)\r\n\t\tcountryCallingCode = metadata.countryCallingCode()\r\n\t} else {\r\n\t\tcountryCallingCode = countryOrCountryCallingCode\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\tif (metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\tcountry = '001'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode\r\n\t}\r\n}", "import Metadata from '../metadata.js'\r\nimport { VALID_DIGITS } from '../constants.js'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\t// Check if the number is IDD-prefixed.\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\t// If there're any digits after an IDD prefix,\r\n\t// then those digits are a country calling code.\r\n\t// Since no country code starts with a `0`,\r\n\t// the code below validates that the next digit (if present) is not `0`.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\r\n\t\tif (matchedGroups[1] === '0') {\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}", "/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\r\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\r\n\tif (number && metadata.numberingPlan.nationalPrefixForParsing()) {\r\n\t\t// See METADATA.md for the description of\r\n\t\t// `national_prefix_for_parsing` and `national_prefix_transform_rule`.\r\n\t\t// Attempt to parse the first digits as a national prefix.\r\n\t\tconst prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')')\r\n\t\tconst prefixMatch = prefixPattern.exec(number)\r\n\t\tif (prefixMatch) {\r\n\t\t\tlet nationalNumber\r\n\t\t\tlet carrierCode\r\n\t\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\t\t// If a `national_prefix_for_parsing` has any \"capturing groups\"\r\n\t\t\t// then it means that the national (significant) number is equal to\r\n\t\t\t// those \"capturing groups\" transformed via `national_prefix_transform_rule`,\r\n\t\t\t// and nothing could be said about the actual national prefix:\r\n\t\t\t// what is it and was it even there.\r\n\t\t\t// If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\r\n\t\t\t// then everything it matches is a national prefix.\r\n\t\t\t// To determine whether `national_prefix_for_parsing` matched any\r\n\t\t\t// \"capturing groups\", the value of the result of calling `.exec()`\r\n\t\t\t// is looked at, and if it has non-undefined values where there're\r\n\t\t\t// \"capturing groups\" in the regular expression, then it means\r\n\t\t\t// that \"capturing groups\" have been matched.\r\n\t\t\t// It's not possible to tell whether there'll be any \"capturing gropus\"\r\n\t\t\t// before the matching process, because a `national_prefix_for_parsing`\r\n\t\t\t// could exhibit both behaviors.\r\n\t\t\tconst capturedGroupsCount = prefixMatch.length - 1\r\n\t\t\tconst hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]\r\n\t\t\tif (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\r\n\t\t\t\tnationalNumber = number.replace(\r\n\t\t\t\t\tprefixPattern,\r\n\t\t\t\t\tmetadata.nationalPrefixTransformRule()\r\n\t\t\t\t)\r\n\t\t\t\t// If there's more than one captured group,\r\n\t\t\t\t// then carrier code is the second one.\r\n\t\t\t\tif (capturedGroupsCount > 1) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// If there're no \"capturing groups\",\r\n\t\t\t// or if there're \"capturing groups\" but no\r\n\t\t\t// `national_prefix_transform_rule`,\r\n\t\t\t// then just strip the national prefix from the number,\r\n\t\t\t// and possibly a carrier code.\r\n\t\t\t// Seems like there could be more.\r\n\t\t\telse {\r\n\t\t\t\t// `prefixBeforeNationalNumber` is the whole substring matched by\r\n\t\t\t\t// the `national_prefix_for_parsing` regular expression.\r\n\t\t\t\t// There seem to be no guarantees that it's just a national prefix.\r\n\t\t\t\t// For example, if there's a carrier code, it's gonna be a\r\n\t\t\t\t// part of `prefixBeforeNationalNumber` too.\r\n\t\t\t\tconst prefixBeforeNationalNumber = prefixMatch[0]\r\n\t\t\t\tnationalNumber = number.slice(prefixBeforeNationalNumber.length)\r\n\t\t\t\t// If there's at least one captured group,\r\n\t\t\t\t// then carrier code is the first one.\r\n\t\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Tries to guess whether a national prefix was present in the input.\r\n\t\t\t// This is not something copy-pasted from Google's library:\r\n\t\t\t// they don't seem to have an equivalent for that.\r\n\t\t\t// So this isn't an \"officially approved\" way of doing something like that.\r\n\t\t\t// But since there seems no other existing method, this library uses it.\r\n\t\t\tlet nationalPrefix\r\n\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\tconst possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1])\r\n\t\t\t\tconst possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup)\r\n\t\t\t\t// Example: an Argentinian (AR) phone number `0111523456789`.\r\n\t\t\t\t// `prefixMatch[0]` is `01115`, and `$1` is `11`,\r\n\t\t\t\t// and the rest of the phone number is `23456789`.\r\n\t\t\t\t// The national number is transformed via `9$1` to `91123456789`.\r\n\t\t\t\t// National prefix `0` is detected being present at the start.\r\n\t\t\t\t// if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\r\n\t\t\t\tif (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\r\n\t\t\t\t\tnationalPrefix = metadata.numberingPlan.nationalPrefix()\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnationalPrefix = prefixMatch[0]\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tnationalPrefix,\r\n\t\t\t\tcarrierCode\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n   return {\r\n   \tnationalNumber: number\r\n   }\r\n}", "import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\nimport checkNumberLength from './checkNumberLength.js'\r\n\r\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\r\nexport default function extractNationalNumber(number, metadata) {\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst {\r\n\t\tcarrierCode,\r\n\t\tnationalNumber\r\n\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\tnumber,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (nationalNumber !== number) {\r\n\t\tif (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\r\n\t\t\t// Don't strip the national prefix.\r\n\t\t\treturn { nationalNumber: number }\r\n\t\t}\r\n\t\t// Check the national (significant) number length after extracting national prefix and carrier code.\r\n\t\t// Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\r\n\t\tif (metadata.possibleLengths()) {\r\n\t\t\t// The number remaining after stripping the national prefix and carrier code\r\n\t\t\t// should be long enough to have a possible length for the country.\r\n\t\t\t// Otherwise, don't strip the national prefix and carrier code,\r\n\t\t\t// since the original number could be a valid number.\r\n\t\t\t// This check has been copy-pasted \"as is\" from Google's original library:\r\n\t\t\t// https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\r\n\t\t\t// It doesn't check for the \"possibility\" of the original `number`.\r\n\t\t\t// I guess it's fine not checking that one. It works as is anyway.\r\n\t\t\tif (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\r\n\t\t\t\t// Don't strip the national prefix.\r\n\t\t\t\treturn { nationalNumber: number }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { nationalNumber, carrierCode }\r\n}\r\n\r\n// In some countries, the same digit could be a national prefix\r\n// or a leading digit of a valid phone number.\r\n// For example, in Russia, national prefix is `8`,\r\n// and also `800 555 35 35` is a valid number\r\n// in which `8` is not a national prefix, but the first digit\r\n// of a national (significant) number.\r\n// Same's with Belarus:\r\n// `82004910060` is a valid national (significant) number,\r\n// but `2004910060` is not.\r\n// To support such cases (to prevent the code from always stripping\r\n// national prefix), a condition is imposed: a national prefix\r\n// is not extracted when the original number is \"viable\" and the\r\n// resultant number is not, a \"viable\" national number being the one\r\n// that matches `national_number_pattern`.\r\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\r\n\t// The equivalent in Google's code is:\r\n\t// https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\r\n\tif (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) &&\r\n\t\t!matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\r\n\t\treturn false\r\n\t}\r\n\t// This \"is possible\" national number (length) check has been commented out\r\n\t// because it's superceded by the (effectively) same check done in the\r\n\t// `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\r\n\t// In other words, why run the same check twice if it could only be run once.\r\n\t// // Check the national (significant) number length after extracting national prefix and carrier code.\r\n\t// // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\r\n\t// // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\r\n\t// if (metadata.possibleLengths()) {\r\n\t// \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\r\n\t// \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\r\n\t// \t\treturn false\r\n\t// \t}\r\n\t// }\r\n\treturn true\r\n}\r\n\r\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'TOO_SHORT':\r\n\t\tcase 'INVALID_LENGTH':\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\treturn false\r\n\t\tdefault:\r\n\t\t\treturn true\r\n\t}\r\n}", "import Metadata from '../metadata.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\nimport extractNationalNumber from './extractNationalNumber.js'\r\nimport checkNumberLength from './checkNumberLength.js'\r\nimport getCountryCallingCode from '../getCountryCallingCode.js'\r\n\r\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\r\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tconst countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode\r\n\tif (number.indexOf(countryCallingCode) === 0) {\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(country, callingCode)\r\n\t\tconst possibleShorterNumber = number.slice(countryCallingCode.length)\r\n\t\tconst {\r\n\t\t\tnationalNumber: possibleShorterNationalNumber,\r\n\t\t} = extractNationalNumber(\r\n\t\t\tpossibleShorterNumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tconst {\r\n\t\t\tnationalNumber\r\n\t\t} = extractNationalNumber(\r\n\t\t\tnumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\t// If the number was not valid before but is valid now,\r\n\t\t// or if it was too long before, we consider the number\r\n\t\t// with the country calling code stripped to be a better result\r\n\t\t// and keep that instead.\r\n\t\t// For example, in Germany (+49), `49` is a valid area code,\r\n\t\t// so if a number starts with `49`, it could be both a valid\r\n\t\t// national German number or an international number without\r\n\t\t// a leading `+`.\r\n\t\tif (\r\n\t\t\t(\r\n\t\t\t\t!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t\t&&\r\n\t\t\t\tmatchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t)\r\n\t\t\t||\r\n\t\t\tcheckNumberLength(nationalNumber, metadata) === 'TOO_LONG'\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: possibleShorterNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn { number }\r\n}", "import stripIddPrefix from './stripIddPrefix.js'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js'\r\nimport Metadata from '../metadata.js'\r\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js'\r\n\r\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCodeSource: string?, countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\r\nexport default function extractCountryCallingCode(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tlet isNumberWithIddPrefix\r\n\r\n\t// If this is not an international phone number,\r\n\t// then either extract an \"IDD\" prefix, or extract a\r\n\t// country calling code from a number by autocorrecting it\r\n\t// by prepending a leading `+` in cases when it starts\r\n\t// with the country calling code.\r\n\t// https://wikitravel.org/en/International_dialling_prefix\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\tif (number[0] !== '+') {\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata)\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tisNumberWithIddPrefix = true\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\t// Check to see if the number starts with the country calling code\r\n\t\t\t// for the default country. If so, we remove the country calling code,\r\n\t\t\t// and do some checks on the validity of the number before and after.\r\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst {\r\n\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\t\tnumber,\r\n\t\t\t\t\tcountry,\r\n\t\t\t\t\tcallingCode,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t)\r\n\t\t\t\tif (countryCallingCode) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tcountryCallingCodeSource: 'FROM_NUMBER_WITHOUT_PLUS_SIGN',\r\n\t\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t// No need to set it to `UNSPECIFIED`. It can be just `undefined`.\r\n\t\t\t\t// countryCallingCodeSource: 'UNSPECIFIED',\r\n\t\t\t\tnumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0') {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\t\tif (metadata.hasCallingCode(countryCallingCode)) {\r\n\t\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCodeSource: isNumberWithIddPrefix ? 'FROM_NUMBER_WITH_IDD' : 'FROM_NUMBER_WITH_PLUS_SIGN',\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}\r\n\r\n// The possible values for the returned `countryCallingCodeSource` are:\r\n//\r\n// Copy-pasted from:\r\n// https://github.com/google/libphonenumber/blob/master/resources/phonenumber.proto\r\n//\r\n// // The source from which the country_code is derived. This is not set in the\r\n// // general parsing method, but in the method that parses and keeps raw_input.\r\n// // New fields could be added upon request.\r\n// enum CountryCodeSource {\r\n//  // Default value returned if this is not set, because the phone number was\r\n//  // created using parse, not parseAndKeepRawInput. hasCountryCodeSource will\r\n//  // return false if this is the case.\r\n//  UNSPECIFIED = 0;\r\n//\r\n//  // The country_code is derived based on a phone number with a leading \"+\",\r\n//  // e.g. the French number \"+33 1 42 68 53 00\".\r\n//  FROM_NUMBER_WITH_PLUS_SIGN = 1;\r\n//\r\n//  // The country_code is derived based on a phone number with a leading IDD,\r\n//  // e.g. the French number \"011 33 1 42 68 53 00\", as it is dialled from US.\r\n//  FROM_NUMBER_WITH_IDD = 5;\r\n//\r\n//  // The country_code is derived based on a phone number without a leading\r\n//  // \"+\", e.g. the French number \"33 1 42 68 53 00\" when defaultCountry is\r\n//  // supplied as France.\r\n//  FROM_NUMBER_WITHOUT_PLUS_SIGN = 10;\r\n//\r\n//  // The country_code is derived NOT based on the phone number itself, but\r\n//  // from the defaultCountry parameter provided in the parsing function by the\r\n//  // clients. This happens mostly for numbers written in the national format\r\n//  // (without country code). For example, this would be set when parsing the\r\n//  // French number \"01 42 68 53 00\", when defaultCountry is supplied as\r\n//  // France.\r\n//  FROM_DEFAULT_COUNTRY = 20;\r\n// }", "import Metadata from '../metadata.js'\r\nimport getNumberType from './getNumberType.js'\r\n\r\nexport default function getCountryByNationalNumber(possibleCountries, nationalPhoneNumber, metadata) {\r\n\t// Re-create `metadata` because it will be selecting a `country`.\r\n\tmetadata = new Metadata(metadata)\r\n\tfor (const country of possibleCountries) {\r\n\t\tmetadata.country(country)\r\n\t\t// \"Leading digits\" patterns are only defined for about 20% of all countries.\r\n\t\t// By definition, matching \"leading digits\" is a sufficient but not a necessary\r\n\t\t// condition for a phone number to belong to a country.\r\n\t\t// The point of \"leading digits\" check is that it's the fastest one to get a match.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}", "import getCountryByNationalNumber from './getCountryByNationalNumber.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn getCountryByNationalNumber(possibleCountries, nationalPhoneNumber, metadata.metadata)\r\n}", "// When phone numbers are written in `RFC3966` format — `\"tel:+12133734253\"` —\r\n// they can have their \"calling code\" part written separately in a `phone-context` parameter.\r\n// Example: `\"tel:12133734253;phone-context=+1\"`.\r\n// This function parses the full phone number from the local number and the `phone-context`\r\n// when the `phone-context` contains a `+` sign.\r\n\r\nimport {\r\n  VALID_DIGITS,\r\n  // PLUS_CHARS\r\n} from '../constants.js'\r\n\r\nexport const PLUS_SIGN = '+'\r\n\r\nconst RFC3966_VISUAL_SEPARATOR_ = '[\\\\-\\\\.\\\\(\\\\)]?'\r\n\r\nconst RFC3966_PHONE_DIGIT_ = '(' + '[' + VALID_DIGITS + ']' + '|' + RFC3966_VISUAL_SEPARATOR_ + ')'\r\n\r\nconst RFC3966_GLOBAL_NUMBER_DIGITS_ =\r\n\t'^' +\r\n\t'\\\\' +\r\n\tPLUS_SIGN +\r\n\tRFC3966_PHONE_DIGIT_ +\r\n\t'*' +\r\n\t'[' + VALID_DIGITS +  ']' +\r\n\tRFC3966_PHONE_DIGIT_ +\r\n\t'*' +\r\n\t'$'\r\n\r\n/**\r\n * Regular expression of valid global-number-digits for the phone-context\r\n * parameter, following the syntax defined in RFC3966.\r\n */\r\nconst RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_ = new RegExp(RFC3966_GLOBAL_NUMBER_DIGITS_, 'g')\r\n\r\n// In this port of Google's library, we don't accept alpha characters in phone numbers.\r\n// const ALPHANUM_ = VALID_ALPHA_ + VALID_DIGITS\r\nconst ALPHANUM_ = VALID_DIGITS\r\n\r\nconst RFC3966_DOMAINLABEL_ = '[' + ALPHANUM_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*'\r\n\r\nconst VALID_ALPHA_ = 'a-zA-Z'\r\nconst RFC3966_TOPLABEL_ = '[' + VALID_ALPHA_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*'\r\n\r\nconst RFC3966_DOMAINNAME_ = '^(' + RFC3966_DOMAINLABEL_ + '\\\\.)*' + RFC3966_TOPLABEL_ + '\\\\.?$'\r\n\r\n/**\r\n * Regular expression of valid domainname for the phone-context parameter,\r\n * following the syntax defined in RFC3966.\r\n */\r\nconst RFC3966_DOMAINNAME_PATTERN_ = new RegExp(RFC3966_DOMAINNAME_, 'g')\r\n\r\nexport const RFC3966_PREFIX_ = 'tel:'\r\nexport const RFC3966_PHONE_CONTEXT_ = ';phone-context='\r\nexport const RFC3966_ISDN_SUBADDRESS_ = ';isub='\r\n\r\n/**\r\n * Extracts the value of the phone-context parameter of `numberToExtractFrom`,\r\n * following the syntax defined in RFC3966.\r\n *\r\n * @param {string} numberToExtractFrom\r\n * @return {string|null} the extracted string (possibly empty), or `null` if no phone-context parameter is found.\r\n */\r\nexport default function extractPhoneContext(numberToExtractFrom) {\r\n\tconst indexOfPhoneContext = numberToExtractFrom.indexOf(RFC3966_PHONE_CONTEXT_)\r\n\t// If no phone-context parameter is present\r\n\tif (indexOfPhoneContext < 0) {\r\n\t\treturn null\r\n\t}\r\n\r\n\tconst phoneContextStart = indexOfPhoneContext + RFC3966_PHONE_CONTEXT_.length\r\n\t// If phone-context parameter is empty\r\n\tif (phoneContextStart >= numberToExtractFrom.length) {\r\n\t\treturn ''\r\n\t}\r\n\r\n\tconst phoneContextEnd = numberToExtractFrom.indexOf(';', phoneContextStart)\r\n\t// If phone-context is not the last parameter\r\n\tif (phoneContextEnd >= 0) {\r\n\t\treturn numberToExtractFrom.substring(phoneContextStart, phoneContextEnd)\r\n\t} else {\r\n\t\treturn numberToExtractFrom.substring(phoneContextStart)\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns whether the value of phoneContext follows the syntax defined in RFC3966.\r\n *\r\n * @param {string|null} phoneContext\r\n * @return {boolean}\r\n */\r\nexport function isPhoneContextValid(phoneContext) {\r\n\tif (phoneContext === null) {\r\n\t\treturn true\r\n\t}\r\n\r\n\tif (phoneContext.length === 0) {\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Does phone-context value match pattern of global-number-digits or domainname.\r\n\treturn RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_.test(phoneContext) ||\r\n\t\tRFC3966_DOMAINNAME_PATTERN_.test(phoneContext)\r\n}", "import extractPhoneContext, {\r\n\tisPhoneContextValid,\r\n\tPLUS_SIGN,\r\n\tRFC3966_PREFIX_,\r\n\tRFC3966_PHONE_CONTEXT_,\r\n\tRFC3966_ISDN_SUBADDRESS_\r\n} from './extractPhoneContext.js'\r\n\r\nimport ParseError from '../ParseError.js'\r\n\r\n/**\r\n * @param  {string} numberToParse\r\n * @param  {string} nationalNumber\r\n * @return {}\r\n */\r\nexport default function extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(numberToParse, {\r\n\textractFormattedPhoneNumber\r\n}) {\r\n\tconst phoneContext = extractPhoneContext(numberToParse)\r\n\tif (!isPhoneContextValid(phoneContext)) {\r\n\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t}\r\n\r\n\tlet phoneNumberString\r\n\r\n\tif (phoneContext === null) {\r\n\t\t// Extract a possible number from the string passed in.\r\n\t\t// (this strips leading characters that could not be the start of a phone number)\r\n\t\tphoneNumberString = extractFormattedPhoneNumber(numberToParse) || ''\r\n\t} else {\r\n\t\tphoneNumberString = ''\r\n\r\n\t\t// If the phone context contains a phone number prefix, we need to capture\r\n\t\t// it, whereas domains will be ignored.\r\n\t\tif (phoneContext.charAt(0) === PLUS_SIGN) {\r\n\t\t\tphoneNumberString += phoneContext\r\n\t\t}\r\n\r\n\t\t// Now append everything between the \"tel:\" prefix and the phone-context.\r\n\t\t// This should include the national number, an optional extension or\r\n\t\t// isdn-subaddress component. Note we also handle the case when \"tel:\" is\r\n\t\t// missing, as we have seen in some of the phone number inputs.\r\n\t\t// In that case, we append everything from the beginning.\r\n\t\tconst indexOfRfc3966Prefix = numberToParse.indexOf(RFC3966_PREFIX_)\r\n\t\tlet indexOfNationalNumber\r\n\t\t// RFC 3966 \"tel:\" prefix is preset at this stage because\r\n\t\t// `isPhoneContextValid()` requires it to be present.\r\n\t\t/* istanbul ignore else */\r\n\t\tif (indexOfRfc3966Prefix >= 0) {\r\n\t\t\tindexOfNationalNumber = indexOfRfc3966Prefix + RFC3966_PREFIX_.length\r\n\t\t} else {\r\n\t\t\tindexOfNationalNumber = 0\r\n\t\t}\r\n\t\tconst indexOfPhoneContext = numberToParse.indexOf(RFC3966_PHONE_CONTEXT_)\r\n\t\tphoneNumberString += numberToParse.substring(indexOfNationalNumber, indexOfPhoneContext)\r\n\t}\r\n\r\n\t// Delete the isdn-subaddress and everything after it if it is present.\r\n\t// Note extension won't appear at the same time with isdn-subaddress\r\n\t// according to paragraph 5.3 of the RFC3966 spec.\r\n\tconst indexOfIsdn = phoneNumberString.indexOf(RFC3966_ISDN_SUBADDRESS_)\r\n\tif (indexOfIsdn > 0) {\r\n\t\tphoneNumberString = phoneNumberString.substring(0, indexOfIsdn)\r\n\t}\r\n\t// If both phone context and isdn-subaddress are absent but other\r\n\t// parameters are present, the parameters are left in nationalNumber.\r\n\t// This is because we are concerned about deleting content from a potential\r\n\t// number string when there is no strong evidence that the number is\r\n\t// actually written in RFC3966.\r\n\r\n\tif (phoneNumberString !== '') {\r\n\t\treturn phoneNumberString\r\n\t}\r\n}", "// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN\r\n} from './constants.js'\r\n\r\nimport ParseError from './ParseError.js'\r\nimport Metadata from './metadata.js'\r\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js'\r\nimport extractExtension from './helpers/extension/extractExtension.js'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js'\r\nimport getCountryCallingCode from './getCountryCallingCode.js'\r\nimport { isPossibleNumber } from './isPossible.js'\r\n// import { parseRFC3966 } from './helpers/RFC3966.js'\r\nimport PhoneNumber from './PhoneNumber.js'\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport extractNationalNumber from './helpers/extractNationalNumber.js'\r\nimport stripIddPrefix from './helpers/stripIddPrefix.js'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'\r\nimport extractFormattedPhoneNumberFromPossibleRfc3966NumberUri from './helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\r\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$')\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\n// Examples:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\n\r\n/**\r\n * Parses a phone number.\r\n *\r\n * parse('123456789', { defaultCountry: 'RU', v2: true }, metadata)\r\n * parse('123456789', { defaultCountry: 'RU' }, metadata)\r\n * parse('123456789', undefined, metadata)\r\n *\r\n * @param  {string} input\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {object|PhoneNumber?} If `options.v2: true` flag is passed, it returns a `PhoneNumber?` instance. Otherwise, returns an object of shape `{ phone: '...', country: '...' }` (or just `{}` if no phone number was parsed).\r\n */\r\nexport default function parse(text, options, metadata) {\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formattedPhoneNumber, ext, error } = parseInput(text, options.v2, options.extract)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formattedPhoneNumber) {\r\n\t\tif (options.v2) {\r\n\t\t\tif (error === 'TOO_SHORT') {\r\n\t\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t\t}\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tnationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcountryCallingCodeSource,\r\n\t\tcarrierCode\r\n\t} = parsePhoneNumber(\r\n\t\tformattedPhoneNumber,\r\n\t\toptions.defaultCountry,\r\n\t\toptions.defaultCallingCode,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.hasSelectedNumberingPlan()) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2) {\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\t\tphoneNumber.__countryCallingCodeSource = countryCallingCodeSource\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ?\r\n\t\tmatchesEntirely(nationalNumber, metadata.nationalNumberPattern()) :\r\n\t\tfalse\r\n\r\n\tif (!options.extended) {\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\t// isInternational: countryCallingCode !== undefined\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible: valid ? true : (\r\n\t\t\toptions.extended === true &&\r\n\t\t\tmetadata.possibleLengths() &&\r\n\t\t\tisPossibleNumber(nationalNumber, metadata) ? true : false\r\n\t\t),\r\n\t\tphone: nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\r\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\r\n\tif (!text) {\r\n\t\treturn\r\n\t}\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\r\n\t\tif (throwOnError) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\tif (extract === false) {\r\n\t\treturn text\r\n\t}\r\n\t// Attempt to extract a possible number from the string passed in\r\n\tconst startsAt = text.search(PHONE_NUMBER_START_PATTERN)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(startsAt)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parseInput(text, v2, extract) {\r\n\t// // Parse RFC 3966 phone number URI.\r\n\t// if (text && text.indexOf('tel:') === 0) {\r\n\t// \treturn parseRFC3966(text)\r\n\t// }\r\n\t// let number = extractFormattedPhoneNumber(text, extract, v2)\r\n\tlet number = extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(text, {\r\n\t\textractFormattedPhoneNumber: (text) => extractFormattedPhoneNumber(text, extract, v2)\r\n\t})\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\tif (isViablePhoneNumberStart(number)) {\r\n\t\t\treturn { error: 'TOO_SHORT' }\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst withExtensionStripped = extractExtension(number)\r\n\tif (withExtensionStripped.ext) {\r\n\t\treturn withExtensionStripped\r\n\t}\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, nationalNumber, ext) {\r\n\tconst result = {\r\n\t\tcountry,\r\n\t\tphone: nationalNumber\r\n\t}\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\r\nfunction parsePhoneNumber(\r\n\tformattedPhoneNumber,\r\n\tdefaultCountry,\r\n\tdefaultCallingCode,\r\n\tmetadata\r\n) {\r\n\t// Extract calling code from phone number.\r\n\tlet { countryCallingCodeSource, countryCallingCode, number } = extractCountryCallingCode(\r\n\t\tparseIncompletePhoneNumber(formattedPhoneNumber),\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata.metadata\r\n\t)\r\n\r\n\t// Choose a country by `countryCallingCode`.\r\n\tlet country\r\n\tif (countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t}\r\n\t// If `formattedPhoneNumber` is passed in \"national\" format\r\n\t// then `number` is defined and `countryCallingCode` is `undefined`.\r\n\telse if (number && (defaultCountry || defaultCallingCode)) {\r\n\t\tmetadata.selectNumberingPlan(defaultCountry, defaultCallingCode)\r\n\t\tif (defaultCountry) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tcountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcountryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tif (!number) {\r\n\t\treturn {\r\n\t\t\tcountryCallingCodeSource,\r\n\t\t\tcountryCallingCode\r\n\t\t}\r\n\t}\r\n\r\n\tconst {\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t} = extractNationalNumber(\r\n\t\tparseIncompletePhoneNumber(number),\r\n\t\tmetadata\r\n\t)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata)\r\n\tif (exactCountry) {\r\n\t\tcountry = exactCountry\r\n\t\t/* istanbul ignore if */\r\n\t\tif (exactCountry === '001') {\r\n\t\t\t// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\r\n\t\t\t// If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\r\n\t\t\t// then remove the \"istanbul ignore if\".\r\n\t\t} else {\r\n\t\t\tmetadata.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcountryCallingCodeSource,\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t}\r\n}", "import parse from './parse.js'\r\n\r\nexport default function parsePhoneNumberWithError(text, options, metadata) {\r\n\treturn parse(text, { ...options, v2: true }, metadata)\r\n}", "// Extracts the following properties from function arguments:\r\n// * input `text`\r\n// * `options` object\r\n// * `metadata` JSON\r\nexport default function normalizeArguments(args) {\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Otherwise istanbul would show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'", "import parsePhoneNumberWithError_ from './parsePhoneNumberWithError_.js'\r\nimport normalizeArguments from './normalizeArguments.js'\r\n\r\nexport default function parsePhoneNumberWithError() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumberWithError_(text, options, metadata)\r\n}", "import parsePhoneNumberWithError from './parsePhoneNumberWithError_.js'\r\nimport ParseError from './ParseError.js'\r\nimport { isSupportedCountry } from './metadata.js'\r\n\r\nexport default function parsePhoneNumber(text, options, metadata) {\r\n\t// Validate `defaultCountry`.\r\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\r\n\t\toptions = {\r\n\t\t\t...options,\r\n\t\t\tdefaultCountry: undefined\r\n\t\t}\r\n\t}\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\treturn parsePhoneNumberWithError(text, options, metadata)\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\t//\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}\r\n", "import normalizeArguments from './normalizeArguments.js'\r\nimport parsePhoneNumber_ from './parsePhoneNumber_.js'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n", "import normalizeArguments from './normalizeArguments.js'\r\nimport parsePhoneNumber from './parsePhoneNumber_.js'\r\n\r\nexport default function isValidPhoneNumber() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumber(text, options, metadata)\r\n\treturn phoneNumber && phoneNumber.isValid() || false\r\n}", "import normalizeArguments from './normalizeArguments.js'\r\nimport parsePhoneNumber from './parsePhoneNumber_.js'\r\n\r\nexport default function isPossiblePhoneNumber() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumber(text, options, metadata)\r\n\treturn phoneNumber && phoneNumber.isPossible() || false\r\n}", "import normalizeArguments from './normalizeArguments.js'\r\nimport parsePhoneNumberWithError from './parsePhoneNumberWithError_.js'\r\nimport ParseError from './ParseError.js'\r\nimport Metadata from './metadata.js'\r\nimport checkNumberLength from './helpers/checkNumberLength.js'\r\n\r\nexport default function validatePhoneNumberLength() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\tconst phoneNumber = parsePhoneNumberWithError(text, options, metadata)\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(phoneNumber.countryCallingCode)\r\n\t\tconst result = checkNumberLength(phoneNumber.nationalNumber, metadata)\r\n\t\tif (result !== 'IS_POSSIBLE') {\r\n\t\t\treturn result\r\n\t\t}\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\treturn error.message\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}", "// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\r\n\r\nclass Node {\r\n  constructor(key, value, next = null, prev = null) {\r\n    this.key = key;\r\n    this.value = value;\r\n    this.next = next;\r\n    this.prev = prev;\r\n  }\r\n}\r\n\r\nexport default class LRUCache {\r\n  //set default limit of 10 if limit is not passed.\r\n  constructor(limit = 10) {\r\n    this.size = 0;\r\n    this.limit = limit;\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.cache = {};\r\n  }\r\n\r\n  // Write Node to head of LinkedList\r\n  // update cache with Node key and Node reference\r\n  put(key, value){\r\n    this.ensureLimit();\r\n\r\n    if(!this.head){\r\n      this.head = this.tail = new Node(key, value);\r\n    }else{\r\n      const node = new Node(key, value, this.head);\r\n      this.head.prev = node;\r\n      this.head = node;\r\n    }\r\n\r\n    //Update the cache map\r\n    this.cache[key] = this.head;\r\n    this.size++;\r\n  }\r\n\r\n  // Read from cache map and make that node as new Head of LinkedList\r\n  get(key){\r\n    if(this.cache[key]){\r\n      const value = this.cache[key].value;\r\n\r\n      // node removed from it's position and cache\r\n      this.remove(key)\r\n      // write node again to the head of LinkedList to make it most recently used\r\n      this.put(key, value);\r\n\r\n      return value;\r\n    }\r\n\r\n    console.log(`Item not available in cache for key ${key}`);\r\n  }\r\n\r\n  ensureLimit(){\r\n    if(this.size === this.limit){\r\n      this.remove(this.tail.key)\r\n    }\r\n  }\r\n\r\n  remove(key){\r\n    const node = this.cache[key];\r\n\r\n    if(node.prev !== null){\r\n      node.prev.next = node.next;\r\n    }else{\r\n      this.head = node.next;\r\n    }\r\n\r\n    if(node.next !== null){\r\n      node.next.prev = node.prev;\r\n    }else{\r\n      this.tail = node.prev\r\n    }\r\n\r\n    delete this.cache[key];\r\n    this.size--;\r\n  }\r\n\r\n  clear() {\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.size = 0;\r\n    this.cache = {};\r\n  }\r\n\r\n  // // Invokes the callback function with every node of the chain and the index of the node.\r\n  // forEach(fn) {\r\n  //   let node = this.head;\r\n  //   let counter = 0;\r\n  //   while (node) {\r\n  //     fn(node, counter);\r\n  //     node = node.next;\r\n  //     counter++;\r\n  //   }\r\n  // }\r\n\r\n  // // To iterate over LRU with a 'for...of' loop\r\n  // *[Symbol.iterator]() {\r\n  //   let node = this.head;\r\n  //   while (node) {\r\n  //     yield node;\r\n  //     node = node.next;\r\n  //   }\r\n  // }\r\n}", "import LRUCache from './LRUCache.js'\r\n\r\n// A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\r\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\r\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\r\n// that use-case won't have a lot of benefit.\r\nexport default class RegExpCache {\r\n\tconstructor(size) {\r\n\t\tthis.cache = new LRUCache(size)\r\n\t}\r\n\r\n\tgetPatternForRegExp(pattern) {\r\n\t\tlet regExp = this.cache.get(pattern)\r\n\t\tif (!regExp) {\r\n\t\t\tregExp = new RegExp('^' + pattern)\r\n\t\t\tthis.cache.put(pattern, regExp)\r\n\t\t}\r\n\t\treturn regExp\r\n\t}\r\n}", "/** Returns a regular expression quantifier with an upper and lower limit. */\r\nexport function limit(lower, upper)\r\n{\r\n\tif ((lower < 0) || (upper <= 0) || (upper < lower)) {\r\n\t\tthrow new TypeError()\r\n\t}\r\n\treturn `{${lower},${upper}}`\r\n}\r\n\r\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\r\nexport function trimAfterFirstMatch(regexp, string)\r\n{\r\n\tconst index = string.search(regexp)\r\n\r\n\tif (index >= 0) {\r\n\t\treturn string.slice(0, index)\r\n\t}\r\n\r\n\treturn string\r\n}\r\n\r\nexport function startsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring) === 0\r\n}\r\n\r\nexport function endsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring, string.length - substring.length) === string.length - substring.length\r\n}\r\n", "// Javascript doesn't support UTF-8 regular expressions.\r\n// So mimicking them here.\r\n\r\n// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\r\n\r\nconst _pZ = '\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\r\nexport const pZ = `[${_pZ}]`\r\nexport const PZ = `[^${_pZ}]`\r\n\r\nexport const _pN = '\\u0030-\\u0039\\u00B2\\u00B3\\u00B9\\u00BC-\\u00BE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\n// const pN = `[${_pN}]`\r\n\r\nconst _pNd = '\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\nexport const pNd = `[${_pNd}]`\r\n\r\nexport const _pL = '\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'\r\nconst pL = `[${_pL}]`\r\nconst pL_regexp = new RegExp(pL)\r\n\r\nconst _pSc = '\\u0024\\u00A2-\\u00A5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6'\r\nconst pSc = `[${_pSc}]`\r\nconst pSc_regexp = new RegExp(pSc)\r\n\r\nconst _pMn = '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26'\r\nconst pMn = `[${_pMn}]`\r\nconst pMn_regexp = new RegExp(pMn)\r\n\r\nconst _InBasic_Latin = '\\u0000-\\u007F'\r\nconst _InLatin_1_Supplement = '\\u0080-\\u00FF'\r\nconst _InLatin_Extended_A = '\\u0100-\\u017F'\r\nconst _InLatin_Extended_Additional = '\\u1E00-\\u1EFF'\r\nconst _InLatin_Extended_B = '\\u0180-\\u024F'\r\nconst _InCombining_Diacritical_Marks = '\\u0300-\\u036F'\r\n\r\nconst latinLetterRegexp = new RegExp\r\n(\r\n\t'[' +\r\n\t_InBasic_Latin +\r\n\t_InLatin_1_Supplement +\r\n\t_InLatin_Extended_A +\r\n\t_InLatin_Extended_Additional +\r\n\t_InLatin_Extended_B +\r\n\t_InCombining_Diacritical_Marks +\r\n\t']'\r\n)\r\n\r\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\r\nexport function isLatinLetter(letter)\r\n{\r\n\t// Combining marks are a subset of non-spacing-mark.\r\n\tif (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn latinLetterRegexp.test(letter)\r\n}\r\n\r\nexport function isInvalidPunctuationSymbol(character)\r\n{\r\n\treturn character === '%' || pSc_regexp.test(character)\r\n}", "import parsePhoneNumber from '../parsePhoneNumber.js'\r\n\r\n/**\r\n * Matches a phone number object against a phone number string.\r\n * @param  {string} phoneNumberString\r\n * @param  {PhoneNumber} phoneNumber\r\n * @param  {object} metadata — Metadata JSON\r\n * @return {'INVALID_NUMBER'|'NO_MATCH'|'SHORT_NSN_MATCH'|'NSN_MATCH'|'EXACT_MATCH'}\r\n */\r\nexport default function matchPhoneNumberStringAgainstPhoneNumber(phoneNumberString, phoneNumber, metadata) {\r\n\t// Parse `phoneNumberString`.\r\n\tlet phoneNumberStringContainsCallingCode = true\r\n\tlet parsedPhoneNumber = parsePhoneNumber(phoneNumberString, metadata)\r\n\tif (!parsedPhoneNumber) {\r\n\t\t// If `phoneNumberString` didn't contain a country calling code\r\n\t\t// then substitute it with the `phoneNumber`'s country calling code.\r\n\t\tphoneNumberStringContainsCallingCode = false\r\n\t\tparsedPhoneNumber = parsePhoneNumber(phoneNumberString, { defaultCallingCode: phoneNumber.countryCallingCode }, metadata)\r\n\t}\r\n\tif (!parsedPhoneNumber) {\r\n\t\treturn 'INVALID_NUMBER'\r\n\t}\r\n\r\n\t// Check that the extensions match.\r\n\tif (phoneNumber.ext) {\r\n\t\tif (parsedPhoneNumber.ext !== phoneNumber.ext) {\r\n\t\t\treturn 'NO_MATCH'\r\n\t\t}\r\n\t} else {\r\n\t\tif (parsedPhoneNumber.ext) {\r\n\t\t\treturn 'NO_MATCH'\r\n\t\t}\r\n\t}\r\n\r\n\t// Check that country calling codes match.\r\n\tif (phoneNumberStringContainsCallingCode) {\r\n\t\tif (phoneNumber.countryCallingCode !== parsedPhoneNumber.countryCallingCode) {\r\n\t\t\treturn 'NO_MATCH'\r\n\t\t}\r\n\t}\r\n\r\n\t// Check if the whole numbers match.\r\n\tif (phoneNumber.number === parsedPhoneNumber.number) {\r\n\t\tif (phoneNumberStringContainsCallingCode) {\r\n\t\t\treturn 'EXACT_MATCH'\r\n\t\t} else {\r\n\t\t\treturn 'NSN_MATCH'\r\n\t\t}\r\n\t}\r\n\r\n\t// Check if one national number is a \"suffix\" of the other.\r\n\tif (\r\n\t\tphoneNumber.nationalNumber.indexOf(parsedPhoneNumber.nationalNumber) === 0 ||\r\n\t\tparsedPhoneNumber.nationalNumber.indexOf(phoneNumber.nationalNumber) === 0\r\n\t) {\r\n\t\t// \"A SHORT_NSN_MATCH occurs if there is a difference because of the\r\n\t\t//  presence or absence of an 'Italian leading zero', the presence or\r\n\t\t//  absence of an extension, or one NSN being a shorter variant of the\r\n\t\t//  other.\"\r\n\t\treturn 'SHORT_NSN_MATCH'\r\n\t}\r\n\r\n\treturn 'NO_MATCH'\r\n}", "import isValidNumber from '../isValid.js'\r\nimport parseDigits from '../helpers/parseDigits.js'\r\nimport matchPhoneNumberStringAgainstPhoneNumber from './matchPhoneNumberStringAgainstPhoneNumber.js'\r\nimport Metadata from '../metadata.js'\r\nimport getCountryByCallingCode from '../helpers/getCountryByCallingCode.js'\r\nimport { chooseFormatForNumber } from '../format.js'\r\n\r\nimport {\r\n\tstartsWith,\r\n\tendsWith\r\n} from './util.js'\r\n\r\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\r\nexport default\r\n{\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n\t */\r\n\tPOSSIBLE(phoneNumber, candidate, metadata)\r\n\t{\r\n\t\treturn true\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\" and \"valid\".\r\n\t * Numbers written in national format must have their national-prefix\r\n\t * present if it is usually written for a number of this type.\r\n\t */\r\n\tVALID(phoneNumber, candidate, metadata)\r\n\t{\r\n\t\tif (\r\n\t\t\t!phoneNumber.isValid() ||\r\n\t\t\t!containsOnlyValidXChars(phoneNumber, candidate, metadata)\r\n\t\t)\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\t// Skipped for simplicity.\r\n\t\t// return isNationalPrefixPresentIfRequired(phoneNumber, metadata)\r\n\t\treturn true\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"valid\" and\r\n\t * are grouped in a possible way for this locale. For example, a US number written as\r\n\t * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol in the national significant number\r\n\t * are also dropped at this level.\r\n\t *\r\n\t * Warning: This level might result in lower coverage especially for regions outside of\r\n\t * country code \"+1\". If you are not sure about which level to use,\r\n\t * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tSTRICT_GROUPING(phoneNumber, candidate, metadata, regExpCache)\r\n\t{\r\n\t\tif (\r\n\t\t\t!phoneNumber.isValid() ||\r\n\t\t\t!containsOnlyValidXChars(phoneNumber, candidate, metadata) ||\r\n\t\t\tcontainsMoreThanOneSlashInNationalNumber(phoneNumber, candidate) ||\r\n\t\t\t!isNationalPrefixPresentIfRequired(phoneNumber, metadata)\r\n\t\t)\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tphoneNumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsRemainGrouped,\r\n\t\t\tregExpCache\r\n\t\t)\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"valid\" and are grouped in the same way\r\n\t * that we would have formatted it, or as a single block.\r\n\t * For example, a US number written as \"650 2530000\" is not accepted\r\n\t * at this leniency level, whereas \"650 253 0000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol are also dropped at this level.\r\n\t *\r\n\t * Warning: This level might result in lower coverage especially for regions outside of\r\n\t * country code \"+1\". If you are not sure about which level to use, email the discussion group\r\n\t * libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tEXACT_GROUPING(phoneNumber, candidate, metadata, regExpCache)\r\n\t{\r\n\t\tif (\r\n\t\t\t!phoneNumber.isValid() ||\r\n\t\t\t!containsOnlyValidXChars(phoneNumber, candidate, metadata) ||\r\n\t\t\tcontainsMoreThanOneSlashInNationalNumber(phoneNumber, candidate) ||\r\n\t\t\t!isNationalPrefixPresentIfRequired(phoneNumber, metadata)\r\n\t\t)\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tphoneNumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsAreExactlyPresent,\r\n\t\t\tregExpCache\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction containsOnlyValidXChars(phoneNumber, candidate, metadata)\r\n{\r\n\t// The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\r\n\t// national significant number or (2) an extension sign, in which case they always precede the\r\n\t// extension number. We assume a carrier code is more than 1 digit, so the first case has to\r\n\t// have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\r\n\t// or 'X'. We ignore the character if it appears as the last character of the string.\r\n\tfor (let index = 0; index < candidate.length - 1; index++)\r\n\t{\r\n\t\tconst charAtIndex = candidate.charAt(index)\r\n\r\n\t\tif (charAtIndex === 'x' || charAtIndex === 'X')\r\n\t\t{\r\n\t\t\tconst charAtNextIndex = candidate.charAt(index + 1)\r\n\r\n\t\t\tif (charAtNextIndex === 'x' || charAtNextIndex === 'X')\r\n\t\t\t{\r\n\t\t\t\t// This is the carrier code case, in which the 'X's always precede the national\r\n\t\t\t\t// significant number.\r\n\t\t\t\tindex++\r\n\t\t\t\tif (matchPhoneNumberStringAgainstPhoneNumber(candidate.substring(index), phoneNumber, metadata) !== 'NSN_MATCH')\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\t\t\t\t// This is the extension sign case, in which the 'x' or 'X' should always precede the\r\n\t\t\t\t// extension number.\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst ext = parseDigits(candidate.substring(index))\r\n\t\t\t\tif (ext) {\r\n\t\t\t\t\tif (phoneNumber.ext !== ext)  {\r\n\t\t\t\t\t\treturn false\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (phoneNumber.ext) {\r\n\t\t\t\t\t\treturn false\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}\r\n\r\nfunction isNationalPrefixPresentIfRequired(phoneNumber, _metadata)\r\n{\r\n\t// First, check how we deduced the country code. If it was written in international format, then\r\n\t// the national prefix is not required.\r\n\tif (phoneNumber.__countryCallingCodeSource !== 'FROM_DEFAULT_COUNTRY')\r\n\t{\r\n\t\treturn true\r\n\t}\r\n\r\n\tconst metadata = new Metadata(_metadata)\r\n\tmetadata.selectNumberingPlan(phoneNumber.countryCallingCode)\r\n\r\n\tconst phoneNumberRegion = phoneNumber.country || getCountryByCallingCode(phoneNumber.countryCallingCode, phoneNumber.nationalNumber, metadata)\r\n\r\n\t// Check if a national prefix should be present when formatting this number.\r\n\tconst nationalNumber = phoneNumber.nationalNumber\r\n\tconst format = chooseFormatForNumber(metadata.numberingPlan.formats(), nationalNumber)\r\n\r\n\t// To do this, we check that a national prefix formatting rule was present\r\n\t// and that it wasn't just the first-group symbol ($1) with punctuation.\r\n\tif (format.nationalPrefixFormattingRule())\r\n\t{\r\n\t\tif (metadata.numberingPlan.nationalPrefixIsOptionalWhenFormattingInNationalFormat())\r\n\t\t{\r\n\t\t\t// The national-prefix is optional in these cases, so we don't need to check if it was present.\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\tif (!format.usesNationalPrefix())\r\n\t\t{\r\n\t\t\t// National Prefix not needed for this number.\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\treturn Boolean(phoneNumber.nationalPrefix)\r\n\t}\r\n\r\n\treturn true\r\n}\r\n\r\nexport function containsMoreThanOneSlashInNationalNumber(phoneNumber, candidate)\r\n{\r\n\tconst firstSlashInBodyIndex = candidate.indexOf('/')\r\n\tif (firstSlashInBodyIndex < 0)\r\n\t{\r\n\t\t// No slashes, this is okay.\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Now look for a second one.\r\n\tconst secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1)\r\n\tif (secondSlashInBodyIndex < 0)\r\n\t{\r\n\t\t// Only one slash, this is okay.\r\n\t\treturn false\r\n\t}\r\n\r\n\t// If the first slash is after the country calling code, this is permitted.\r\n\tconst candidateHasCountryCode =\r\n\t\t\tphoneNumber.__countryCallingCodeSource === 'FROM_NUMBER_WITH_PLUS_SIGN' ||\r\n\t\t\tphoneNumber.__countryCallingCodeSource === 'FROM_NUMBER_WITHOUT_PLUS_SIGN'\r\n\r\n\tif (candidateHasCountryCode && parseDigits(candidate.substring(0, firstSlashInBodyIndex)) === phoneNumber.countryCallingCode)\r\n\t{\r\n\t\t// Any more slashes and this is illegal.\r\n\t\treturn candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0\r\n\t}\r\n\r\n\treturn true\r\n}\r\n\r\nfunction checkNumberGroupingIsValid(\r\n\tnumber,\r\n\tcandidate,\r\n\tmetadata,\r\n\tcheckGroups,\r\n\tregExpCache\r\n) {\r\n\tthrow new Error('This part of code hasn\\'t been ported')\r\n\r\n\tconst normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */)\r\n\tlet formattedNumberGroups = getNationalNumberGroups(metadata, number, null)\r\n\tif (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n\t\treturn true\r\n\t}\r\n\r\n\t// If this didn't pass, see if there are any alternate formats that match, and try them instead.\r\n\tconst alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode())\r\n\tconst nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\r\n\tif (alternateFormats) {\r\n\t\tfor (const alternateFormat of alternateFormats.numberFormats()) {\r\n\t\t\tif (alternateFormat.leadingDigitsPatterns().length > 0) {\r\n\t\t\t\t// There is only one leading digits pattern for alternate formats.\r\n\t\t\t\tconst leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0])\r\n\t\t\t\tif (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\r\n\t\t\t\t\t// Leading digits don't match; try another one.\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tformattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat)\r\n\t\t\tif (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn false\r\n}\r\n\r\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\r\nfunction getNationalNumberGroups(\r\n\tmetadata,\r\n\tnumber,\r\n\tformattingPattern\r\n) {\r\n\tthrow new Error('This part of code hasn\\'t been ported')\r\n\r\n\tif (formattingPattern) {\r\n\t\t// We format the NSN only, and split that according to the separator.\r\n\t\tconst nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\t\treturn util.formatNsnUsingPattern(nationalSignificantNumber,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tformattingPattern, 'RFC3966', metadata).split('-')\r\n\t}\r\n\r\n\t// This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\r\n\tconst rfc3966Format = formatNumber(number, 'RFC3966', metadata)\r\n\r\n\t// We remove the extension part from the formatted string before splitting it into different\r\n\t// groups.\r\n\tlet endIndex = rfc3966Format.indexOf(';')\r\n\tif (endIndex < 0) {\r\n\t\tendIndex = rfc3966Format.length\r\n\t}\r\n\r\n\t// The country-code will have a '-' following it.\r\n\tconst startIndex = rfc3966Format.indexOf('-') + 1\r\n\treturn rfc3966Format.slice(startIndex, endIndex).split('-')\r\n}\r\n\r\nfunction allNumberGroupsAreExactlyPresent\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n\tthrow new Error('This part of code hasn\\'t been ported')\r\n\r\n\tconst candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN)\r\n\r\n\t// Set this to the last group, skipping it if the number has an extension.\r\n\tlet candidateNumberGroupIndex =\r\n\t\t\tnumber.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1\r\n\r\n\t// First we check if the national significant number is formatted as a block.\r\n\t// We use contains and not equals, since the national significant number may be present with\r\n\t// a prefix such as a national number prefix, or the country code itself.\r\n\tif (candidateGroups.length == 1\r\n\t\t\t|| candidateGroups[candidateNumberGroupIndex].contains(\r\n\t\t\t\t\tutil.getNationalSignificantNumber(number)))\r\n\t{\r\n\t\treturn true\r\n\t}\r\n\r\n\t// Starting from the end, go through in reverse, excluding the first group, and check the\r\n\t// candidate and number groups are the same.\r\n\tlet formattedNumberGroupIndex = (formattedNumberGroups.length - 1)\r\n\twhile (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0)\r\n\t{\r\n\t\tif (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex])\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tformattedNumberGroupIndex--\r\n\t\tcandidateNumberGroupIndex--\r\n\t}\r\n\r\n\t// Now check the first group. There may be a national prefix at the start, so we only check\r\n\t// that the candidate group ends with the formatted number group.\r\n\treturn (candidateNumberGroupIndex >= 0\r\n\t\t\t&& endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]))\r\n}\r\n\r\n\r\nfunction allNumberGroupsRemainGrouped\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n\tthrow new Error('This part of code hasn\\'t been ported')\r\n\r\n\tlet fromIndex = 0\r\n\tif (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY)\r\n\t{\r\n\t\t// First skip the country code if the normalized candidate contained it.\r\n\t\tconst countryCode = String(number.getCountryCode())\r\n\t\tfromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length()\r\n\t}\r\n\r\n\t// Check each group of consecutive digits are not broken into separate groupings in the\r\n\t// {@code normalizedCandidate} string.\r\n\tfor (let i = 0; i < formattedNumberGroups.length; i++)\r\n\t{\r\n\t\t// Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\r\n\t\t// doesn't contain the consecutive digits in formattedNumberGroups[i].\r\n\t\tfromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex)\r\n\t\tif (fromIndex < 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Moves {@code fromIndex} forward.\r\n\t\tfromIndex += formattedNumberGroups[i].length()\r\n\t\tif (i == 0 && fromIndex < normalizedCandidate.length())\r\n\t\t{\r\n\t\t\t// We are at the position right after the NDC. We get the region used for formatting\r\n\t\t\t// information based on the country code in the phone number, rather than the number itself,\r\n\t\t\t// as we do not need to distinguish between different countries with the same country\r\n\t\t\t// calling code and this is faster.\r\n\t\t\tconst region = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n\t\t\tif (util.getNddPrefixForRegion(region, true) != null\r\n\t\t\t\t\t&& Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\r\n\t\t\t\t// This means there is no formatting symbol after the NDC. In this case, we only\r\n\t\t\t\t// accept the number if there is no formatting symbol at all in the number, except\r\n\t\t\t\t// for extensions. This is only important for countries with national prefixes.\r\n\t\t\t\tconst nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\t\t\t\treturn startsWith\r\n\t\t\t\t(\r\n\t\t\t\t\tnormalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length),\r\n\t\t\t\t\t nationalSignificantNumber\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// The check here makes sure that we haven't mistakenly already used the extension to\r\n\t// match the last group of the subscriber number. Note the extension cannot have\r\n\t// formatting in-between digits.\r\n\treturn normalizedCandidate.slice(fromIndex).contains(number.getExtension())\r\n}", "import { trimAfterFirstMatch } from './util.js'\r\n\r\n// Regular expression of characters typically used to start a second phone number for the purposes\r\n// of parsing. This allows us to strip off parts of the number that are actually the start of\r\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\r\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\r\n// extension so that the first number is parsed correctly.\r\n//\r\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\r\n//\r\nconst SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/\r\n\r\nexport default function parsePreCandidate(candidate)\r\n{\r\n\t// Check for extra numbers at the end.\r\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\r\n\t// from split notations (+41 79 123 45 67 / 68).\r\n\treturn trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate)\r\n}", "// Matches strings that look like dates using \"/\" as a separator.\r\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\r\nconst SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/\r\n\r\n// Matches timestamps.\r\n// Examples: \"2012-01-02 08:00\".\r\n// Note that the reg-ex does not include the\r\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\r\nconst TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/\r\nconst TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/\r\n\r\nexport default function isValidPreCandidate(candidate, offset, text)\r\n{\r\n\t// Skip a match that is more likely to be a date.\r\n\tif (SLASH_SEPARATED_DATES.test(candidate)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Skip potential time-stamps.\r\n\tif (TIME_STAMPS.test(candidate))\r\n\t{\r\n\t\tconst followingText = text.slice(offset + candidate.length)\r\n\t\tif (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}", "// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\nimport { PLUS_CHARS } from '../constants.js'\r\nimport { limit } from './util.js'\r\n\r\nimport {\r\n\tisLatinLetter,\r\n\tisInvalidPunctuationSymbol\r\n} from './utf-8.js'\r\n\r\nconst OPENING_PARENS = '(\\\\[\\uFF08\\uFF3B'\r\nconst CLOSING_PARENS = ')\\\\]\\uFF09\\uFF3D'\r\nconst NON_PARENS = `[^${OPENING_PARENS}${CLOSING_PARENS}]`\r\n\r\nexport const LEAD_CLASS = `[${OPENING_PARENS}${PLUS_CHARS}]`\r\n\r\n// Punctuation that may be at the start of a phone number - brackets and plus signs.\r\nconst LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS)\r\n\r\n// Limit on the number of pairs of brackets in a phone number.\r\nconst BRACKET_PAIR_LIMIT = limit(0, 3)\r\n\r\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\r\nconst MATCHING_BRACKETS_ENTIRE = new RegExp\r\n(\r\n\t'^'\r\n\t+ \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\"\r\n\t+ NON_PARENS + \"+\"\r\n\t+ \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT\r\n\t+ NON_PARENS + \"*\"\r\n\t+ '$'\r\n)\r\n\r\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\r\nconst PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/\r\n\r\nexport default function isValidCandidate(candidate, offset, text, leniency)\r\n{\r\n\t// Check the candidate doesn't contain any formatting\r\n\t// which would indicate that it really isn't a phone number.\r\n\tif (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\r\n\t// by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\r\n\tif (leniency !== 'POSSIBLE')\r\n\t{\r\n\t\t// If the candidate is not at the start of the text,\r\n\t\t// and does not start with phone-number punctuation,\r\n\t\t// check the previous character.\r\n\t\tif (offset > 0 && !LEAD_CLASS_LEADING.test(candidate))\r\n\t\t{\r\n\t\t\tconst previousChar = text[offset - 1]\r\n\t\t\t// We return null if it is a latin letter or an invalid punctuation symbol.\r\n\t\t\tif (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst lastCharIndex = offset + candidate.length\r\n\t\tif (lastCharIndex < text.length)\r\n\t\t{\r\n\t\t\tconst nextChar = text[lastCharIndex]\r\n\t\t\tif (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}", "/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\r\n\r\nimport PhoneNumber from './PhoneNumber.js'\r\n\r\nimport {\r\n  MAX_LENGTH_FOR_NSN,\r\n  MAX_LENGTH_COUNTRY_CODE,\r\n  VALID_PUNCTUATION\r\n} from './constants.js'\r\n\r\nimport createExtensionPattern from './helpers/extension/createExtensionPattern.js'\r\n\r\nimport RegExpCache from './findNumbers/RegExpCache.js'\r\n\r\nimport {\r\n\tlimit,\r\n\ttrimAfterFirstMatch\r\n} from './findNumbers/util.js'\r\n\r\nimport {\r\n\t_pL,\r\n\t_pN,\r\n\tpZ,\r\n\tPZ,\r\n\tpNd\r\n} from './findNumbers/utf-8.js'\r\n\r\nimport Leniency from './findNumbers/Leniency.js'\r\nimport parsePreCandidate from './findNumbers/parsePreCandidate.js'\r\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate.js'\r\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate.js'\r\n\r\nimport { isSupportedCountry } from './metadata.js'\r\n\r\nimport parsePhoneNumber from './parsePhoneNumber.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nconst EXTN_PATTERNS_FOR_MATCHING = createExtensionPattern('matching')\r\n\r\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\r\nconst INNER_MATCHES =\r\n[\r\n\t// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\r\n\t'\\\\/+(.*)/',\r\n\r\n\t// Note that the bracket here is inside the capturing group, since we consider it part of the\r\n\t// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\r\n\t'(\\\\([^(]*)',\r\n\r\n\t// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\r\n\t// We require a space on either side of the hyphen for it to be considered a separator.\r\n\t`(?:${pZ}-|-${pZ})${pZ}*(.+)`,\r\n\r\n\t// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\r\n\t// possible that it's supposed to be used to break two numbers without spaces, and we haven't\r\n\t// seen many instances of it used within a number.\r\n\t`[\\u2012-\\u2015\\uFF0D]${pZ}*(.+)`,\r\n\r\n\t// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\r\n\t`\\\\.+${pZ}*([^.]+)`,\r\n\r\n\t// Breaks on space - e.g. \"3324451234 8002341234\"\r\n\t`${pZ}+(${PZ}+)`\r\n]\r\n\r\n// Limit on the number of leading (plus) characters.\r\nconst leadLimit = limit(0, 2)\r\n\r\n// Limit on the number of consecutive punctuation characters.\r\nconst punctuationLimit = limit(0, 4)\r\n\r\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\r\nconst digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE\r\n\r\n// Limit on the number of blocks separated by punctuation.\r\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\r\nconst blockLimit = limit(0, digitBlockLimit)\r\n\r\n/* A punctuation sequence allowing white space. */\r\nconst punctuation = `[${VALID_PUNCTUATION}]` + punctuationLimit\r\n\r\n// A digits block without punctuation.\r\nconst digitSequence = pNd + limit(1, digitBlockLimit)\r\n\r\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\r\nconst PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit\r\n\t+ digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit\r\n\t+ '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// We remove all characters that are not alpha or numerical characters.\r\n// The hash character is retained here, as it may signify\r\n// the previous block was an extension.\r\n//\r\n// // Don't know what does '&&' mean here.\r\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\r\n//\r\nconst UNWANTED_END_CHAR_PATTERN = new RegExp(`[^${_pN}${_pL}#]+$`)\r\n\r\nconst NON_DIGITS_PATTERN = /(\\D+)/\r\n\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1\r\n\r\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\r\nexport default class PhoneNumberMatcher\r\n{\r\n  /**\r\n   * @param {string} text — the character sequence that we will search, null for no text.\r\n   * @param {'POSSIBLE'|'VALID'|'STRICT_GROUPING'|'EXACT_GROUPING'} [options.leniency] — The leniency to use when evaluating candidate phone numbers. See `source/findNumbers/Leniency.js` for more details.\r\n   * @param {number} [options.maxTries] — The maximum number of invalid numbers to try before giving up on the text. This is to cover degenerate cases where the text has a lot of false positives in it. Must be >= 0.\r\n   */\r\n  constructor(text = '', options = {}, metadata)\r\n  {\r\n    options = {\r\n      v2: options.v2,\r\n      defaultCallingCode: options.defaultCallingCode,\r\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\r\n      leniency: options.leniency || (options.extended ? 'POSSIBLE' : 'VALID'),\r\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\r\n    }\r\n\r\n    // Validate `leniency`.\r\n\t\tif (!options.leniency) {\r\n\t\t\tthrow new TypeError('`leniency` is required')\r\n\t\t}\r\n    if (options.leniency !== 'POSSIBLE' && options.leniency !== 'VALID') {\r\n      throw new TypeError(`Invalid \\`leniency\\`: \"${options.leniency}\". Supported values: \"POSSIBLE\", \"VALID\".`)\r\n    }\r\n\r\n    // Validate `maxTries`.\r\n\t\tif (options.maxTries < 0) {\r\n\t\t\tthrow new TypeError('`maxTries` must be `>= 0`')\r\n\t\t}\r\n\r\n\t\tthis.text = text\r\n\t\tthis.options = options\r\n    this.metadata = metadata\r\n\r\n\t\t// The degree of phone number validation.\r\n\t\tthis.leniency = Leniency[options.leniency]\r\n\r\n\t\tif (!this.leniency) {\r\n\t\t\tthrow new TypeError(`Unknown leniency: \"${options.leniency}\"`)\r\n\t\t}\r\n\r\n\t\t/** The maximum number of retries after matching an invalid number. */\r\n\t\tthis.maxTries = options.maxTries\r\n\r\n\t\tthis.PATTERN = new RegExp(PATTERN, 'ig')\r\n\r\n    /** The iteration tristate. */\r\n    this.state = 'NOT_READY'\r\n\r\n    /** The next index to start searching at. Undefined in {@link State#DONE}. */\r\n    this.searchIndex = 0\r\n\r\n    // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\r\n    // countries being used for the same doc with ~10 patterns for each country. Some pages will have\r\n    // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\r\n    // that use-case won't have a lot of benefit.\r\n    this.regExpCache = new RegExpCache(32)\r\n  }\r\n\r\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\r\n\tfind() {\r\n\t\t// // Reset the regular expression.\r\n\t\t// this.PATTERN.lastIndex = index\r\n\r\n\t\tlet matches\r\n\t\twhile ((this.maxTries > 0) && (matches = this.PATTERN.exec(this.text)) !== null) {\r\n\t\t\tlet candidate = matches[0]\r\n\t\t\tconst offset = matches.index\r\n\r\n\t\t\tcandidate = parsePreCandidate(candidate)\r\n\r\n\t\t\tif (isValidPreCandidate(candidate, offset, this.text)) {\r\n\t\t\t\tconst match =\r\n\t\t\t\t\t// Try to come up with a valid match given the entire candidate.\r\n\t\t\t\t\tthis.parseAndVerify(candidate, offset, this.text)\r\n\t\t\t\t\t// If that failed, try to find an \"inner match\" -\r\n\t\t\t\t\t// there might be a phone number within this candidate.\r\n\t\t\t\t\t|| this.extractInnerMatch(candidate, offset, this.text)\r\n\r\n\t\t\t\tif (match) {\r\n\t\t\t\t\tif (this.options.v2) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tstartsAt: match.startsAt,\r\n\t\t\t\t\t\t\tendsAt: match.endsAt,\r\n\t\t\t\t\t\t\tnumber: match.phoneNumber\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n            const { phoneNumber } = match\r\n\r\n            const result = {\r\n              startsAt: match.startsAt,\r\n              endsAt: match.endsAt,\r\n              phone: phoneNumber.nationalNumber\r\n            }\r\n\r\n            if (phoneNumber.country) {\r\n              /* istanbul ignore if */\r\n              if (USE_NON_GEOGRAPHIC_COUNTRY_CODE && country === '001') {\r\n                result.countryCallingCode = phoneNumber.countryCallingCode\r\n              } else {\r\n                result.country = phoneNumber.country\r\n              }\r\n            } else {\r\n              result.countryCallingCode = phoneNumber.countryCallingCode\r\n            }\r\n\r\n            if (phoneNumber.ext) {\r\n              result.ext = phoneNumber.ext\r\n            }\r\n\r\n            return result\r\n          }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.maxTries--\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Attempts to extract a match from `substring`\r\n   * if the substring itself does not qualify as a match.\r\n   */\r\n  extractInnerMatch(substring, offset, text) {\r\n    for (const innerMatchPattern of INNER_MATCHES) {\r\n      let isFirstMatch = true\r\n      let candidateMatch\r\n      const innerMatchRegExp = new RegExp(innerMatchPattern, 'g')\r\n      while (this.maxTries > 0 && (candidateMatch = innerMatchRegExp.exec(substring)) !== null) {\r\n        if (isFirstMatch) {\r\n          // We should handle any group before this one too.\r\n          const candidate = trimAfterFirstMatch(\r\n            UNWANTED_END_CHAR_PATTERN,\r\n            substring.slice(0, candidateMatch.index)\r\n          )\r\n\r\n          const match = this.parseAndVerify(candidate, offset, text)\r\n\r\n          if (match) {\r\n            return match\r\n          }\r\n\r\n          this.maxTries--\r\n          isFirstMatch = false\r\n        }\r\n\r\n        const candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidateMatch[1])\r\n\r\n        // Java code does `groupMatcher.start(1)` here,\r\n        // but there's no way in javascript to get a `candidate` start index,\r\n        // therefore resort to using this kind of an approximation.\r\n        // (`groupMatcher` is called `candidateInSubstringMatch` in this javascript port)\r\n        // https://stackoverflow.com/questions/15934353/get-index-of-each-capture-in-a-javascript-regex\r\n        const candidateIndexGuess = substring.indexOf(candidate, candidateMatch.index)\r\n\r\n        const match = this.parseAndVerify(candidate, offset + candidateIndexGuess, text)\r\n        if (match) {\r\n          return match\r\n        }\r\n\r\n        this.maxTries--\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses a phone number from the `candidate` using `parse` and\r\n   * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n   * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n   *\r\n   * @param candidate  the candidate match\r\n   * @param offset  the offset of {@code candidate} within {@link #text}\r\n   * @return  the parsed and validated phone number match, or null\r\n   */\r\n  parseAndVerify(candidate, offset, text) {\r\n    if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\r\n      return\r\n  \t}\r\n\r\n    const phoneNumber = parsePhoneNumber(\r\n      candidate,\r\n      {\r\n        extended: true,\r\n        defaultCountry: this.options.defaultCountry,\r\n        defaultCallingCode: this.options.defaultCallingCode\r\n      },\r\n      this.metadata\r\n    )\r\n\r\n    if (!phoneNumber) {\r\n      return\r\n    }\r\n\r\n    if (!phoneNumber.isPossible()) {\r\n      return\r\n    }\r\n\r\n    if (this.leniency(phoneNumber, candidate, this.metadata, this.regExpCache)) {\r\n      return {\r\n        startsAt: offset,\r\n        endsAt: offset + candidate.length,\r\n        phoneNumber\r\n      }\r\n    }\r\n  }\r\n\r\n  hasNext()\r\n  {\r\n    if (this.state === 'NOT_READY')\r\n    {\r\n      this.lastMatch = this.find() // (this.searchIndex)\r\n\r\n      if (this.lastMatch)\r\n      {\r\n        // this.searchIndex = this.lastMatch.endsAt\r\n        this.state = 'READY'\r\n      }\r\n      else\r\n      {\r\n        this.state = 'DONE'\r\n      }\r\n    }\r\n\r\n    return this.state === 'READY'\r\n  }\r\n\r\n  next()\r\n  {\r\n    // Check the state and find the next match as a side-effect if necessary.\r\n    if (!this.hasNext())\r\n    {\r\n      throw new Error('No next element')\r\n    }\r\n\r\n    // Don't retain that memory any longer than necessary.\r\n    const result = this.lastMatch\r\n    this.lastMatch = null\r\n    this.state = 'NOT_READY'\r\n    return result\r\n  }\r\n}", "import PhoneNumberMatcher from '../PhoneNumberMatcher.js'\r\nimport normalizeArguments from '../normalizeArguments.js'\r\n\r\nexport default function findNumbers() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\tconst results = []\r\n\twhile (matcher.hasNext()) {\r\n\t\tresults.push(matcher.next())\r\n\t}\r\n\treturn results\r\n}", "import normalizeArguments from '../normalizeArguments.js'\r\nimport PhoneNumberMatcher from '../PhoneNumberMatcher.js'\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport default function searchNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (matcher.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: matcher.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "import PhoneNumberMatcher from './PhoneNumberMatcher.js'\r\nimport normalizeArguments from './normalizeArguments.js'\r\n\r\nexport default function findPhoneNumbersInText() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\tconst matcher = new PhoneNumberMatcher(text, { ...options, v2: true }, metadata)\r\n\tconst results = []\r\n\twhile (matcher.hasNext()) {\r\n\t\tresults.push(matcher.next())\r\n\t}\r\n\treturn results\r\n}", "import PhoneNumberMatcher from './PhoneNumberMatcher.js'\r\nimport normalizeArguments from './normalizeArguments.js'\r\n\r\nexport default function searchPhoneNumbersInText() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\tconst matcher = new PhoneNumberMatcher(text, { ...options, v2: true }, metadata)\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (matcher.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: matcher.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}", "export default class AsYouTypeState {\r\n\tconstructor({ onCountryChange, onCallingCodeChange }) {\r\n\t\tthis.onCountryChange = onCountryChange\r\n\t\tthis.onCallingCodeChange = onCallingCodeChange\r\n\t}\r\n\r\n\treset({ country, callingCode }) {\r\n\t\tthis.international = false\r\n\t\tthis.IDDPrefix = undefined\r\n\t\tthis.missingPlus = undefined\r\n\t\tthis.callingCode = undefined\r\n\t\tthis.digits = ''\r\n\t\tthis.resetNationalSignificantNumber()\r\n\t\tthis.initCountryAndCallingCode(country, callingCode)\r\n\t}\r\n\r\n\tresetNationalSignificantNumber() {\r\n\t\tthis.nationalSignificantNumber = this.getNationalDigits()\r\n\t\tthis.nationalSignificantNumberMatchesInput = true\r\n\t\tthis.nationalPrefix = undefined\r\n\t\tthis.carrierCode = undefined\r\n\t\tthis.complexPrefixBeforeNationalSignificantNumber = undefined\r\n\t}\r\n\r\n\tupdate(properties) {\r\n\t\tfor (const key of Object.keys(properties)) {\r\n\t\t\tthis[key] = properties[key]\r\n\t\t}\r\n\t}\r\n\r\n\tinitCountryAndCallingCode(country, callingCode) {\r\n\t\tthis.setCountry(country)\r\n\t\tthis.setCallingCode(callingCode)\r\n\t}\r\n\r\n\tsetCountry(country) {\r\n\t\tthis.country = country\r\n\t\tthis.onCountryChange(country)\r\n\t}\r\n\r\n\tsetCallingCode(callingCode) {\r\n\t\tthis.callingCode = callingCode\r\n\t\tthis.onCallingCodeChange(callingCode, this.country)\r\n\t}\r\n\r\n\tstartInternationalNumber(country, callingCode) {\r\n\t\t// Prepend the `+` to parsed input.\r\n\t\tthis.international = true\r\n\t\t// If a default country was set then reset it\r\n\t\t// because an explicitly international phone\r\n\t\t// number is being entered.\r\n\t\tthis.initCountryAndCallingCode(country, callingCode)\r\n\t}\r\n\r\n\tappendDigits(nextDigits) {\r\n\t\tthis.digits += nextDigits\r\n\t}\r\n\r\n\tappendNationalSignificantNumberDigits(nextDigits) {\r\n\t\tthis.nationalSignificantNumber += nextDigits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the part of `this.digits` that corresponds to the national number.\r\n\t * Basically, all digits that have been input by the user, except for the\r\n\t * international prefix and the country calling code part\r\n\t * (if the number is an international one).\r\n\t * @return {string}\r\n\t */\r\n\tgetNationalDigits() {\r\n\t\tif (this.international) {\r\n\t\t\treturn this.digits.slice(\r\n\t\t\t\t(this.IDDPrefix ? this.IDDPrefix.length : 0) +\r\n\t\t\t\t(this.callingCode ? this.callingCode.length : 0)\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n\r\n\tgetDigitsWithoutInternationalPrefix() {\r\n\t\tif (this.international) {\r\n\t\t\tif (this.IDDPrefix) {\r\n\t\t\t\treturn this.digits.slice(this.IDDPrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n}", "// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\r\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\r\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\r\n\r\n// Counts all occurences of a symbol in a string.\r\n// Unicode-unsafe (because using `.split()`).\r\nexport function countOccurences(symbol, string) {\r\n\tlet count = 0\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for counting brackets it is safe.\r\n\t// for (const character of string)\r\n\tfor (const character of string.split('')) {\r\n\t\tif (character === symbol) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\treturn count\r\n}\r\n\r\n// Repeats a string (or a symbol) N times.\r\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\r\nexport function repeat(string, times) {\r\n\tif (times < 1) {\r\n\t\treturn ''\r\n\t}\r\n\tlet result = ''\r\n\twhile (times > 1) {\r\n\t\tif (times & 1) {\r\n\t\t\tresult += string\r\n\t\t}\r\n\t\ttimes >>= 1\r\n\t\tstring += string\r\n\t}\r\n\treturn result + string\r\n}\r\n\r\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\r\n\tif (string[cutBeforeIndex] === ')') {\r\n\t\tcutBeforeIndex++\r\n\t}\r\n\treturn stripNonPairedParens(string.slice(0, cutBeforeIndex))\r\n}\r\n\r\nexport function closeNonPairedParens(template, cut_before) {\r\n\tconst retained_template = template.slice(0, cut_before)\r\n\tconst opening_braces = countOccurences('(', retained_template)\r\n\tconst closing_braces = countOccurences(')', retained_template)\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\twhile (dangling_braces > 0 && cut_before < template.length) {\r\n\t\tif (template[cut_before] === ')') {\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\t\tcut_before++\r\n\t}\r\n\treturn template.slice(0, cut_before)\r\n}\r\n\r\nexport function stripNonPairedParens(string) {\r\n\tconst dangling_braces =[]\r\n\tlet i = 0\r\n\twhile (i < string.length) {\r\n\t\tif (string[i] === '(') {\r\n\t\t\tdangling_braces.push(i)\r\n\t\t}\r\n\t\telse if (string[i] === ')') {\r\n\t\t\tdangling_braces.pop()\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\tlet start = 0\r\n\tlet cleared_string = ''\r\n\tdangling_braces.push(string.length)\r\n\tfor (const index of dangling_braces) {\r\n\t\tcleared_string += string.slice(start, index)\r\n\t\tstart = index + 1\r\n\t}\r\n\treturn cleared_string\r\n}\r\n\r\nexport function populateTemplateWithDigits(template, position, digits) {\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for `digits` it is safe.\r\n\t// for (const digit of digits)\r\n\tfor (const digit of digits.split('')) {\r\n\t\t// If there is room for more digits in current `template`,\r\n\t\t// then set the next digit in the `template`,\r\n\t\t// and return the formatted digits so far.\r\n\t\t// If more digits are entered than the current format could handle.\r\n\t\tif (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tposition = template.search(DIGIT_PLACEHOLDER_MATCHER)\r\n\t\ttemplate = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\r\n\t}\r\n\treturn [template, position]\r\n}", "import checkNumberLength from './helpers/checkNumberLength.js'\r\nimport parseDigits from './helpers/parseDigits.js'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js'\r\n\r\nexport default function formatCompleteNumber(state, format, {\r\n\tmetadata,\r\n\tshouldTryNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\tconst matcher = new RegExp(`^(?:${format.pattern()})$`)\r\n\tif (matcher.test(state.nationalSignificantNumber)) {\r\n\t\treturn formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(\r\n\t\t\tstate,\r\n\t\t\tformat,\r\n\t\t\t{\r\n\t\t\t\tmetadata,\r\n\t\t\t\tshouldTryNationalPrefixFormattingRule,\r\n\t\t\t\tgetSeparatorAfterNationalPrefix\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport function canFormatCompleteNumber(nationalSignificantNumber, metadata) {\r\n\treturn checkNumberLength(nationalSignificantNumber, metadata) === 'IS_POSSIBLE'\r\n}\r\n\r\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\r\n\tmetadata,\r\n\tshouldTryNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\t// `format` has already been checked for `nationalPrefix` requirement.\r\n\r\n\tconst {\r\n\t\tnationalSignificantNumber,\r\n\t\tinternational,\r\n\t\tnationalPrefix,\r\n\t\tcarrierCode\r\n\t} = state\r\n\r\n\t// Format the number with using `national_prefix_formatting_rule`.\r\n\t// If the resulting formatted number is a valid formatted number, then return it.\r\n\t//\r\n\t// Google's AsYouType formatter is different in a way that it doesn't try\r\n\t// to format using the \"national prefix formatting rule\", and instead it\r\n\t// simply prepends a national prefix followed by a \" \" character.\r\n\t// This code does that too, but as a fallback.\r\n\t// The reason is that \"national prefix formatting rule\" may use parentheses,\r\n\t// which wouldn't be included has it used the simpler Google's way.\r\n\t//\r\n\tif (shouldTryNationalPrefixFormattingRule(format)) {\r\n\t\tconst formattedNumber = formatNationalNumber(state, format, {\r\n\t\t\tuseNationalPrefixFormattingRule: true,\r\n\t\t\tgetSeparatorAfterNationalPrefix,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\tif (formattedNumber) {\r\n\t\t\treturn formattedNumber\r\n\t\t}\r\n\t}\r\n\r\n\t// Format the number without using `national_prefix_formatting_rule`.\r\n\treturn formatNationalNumber(state, format, {\r\n\t\tuseNationalPrefixFormattingRule: false,\r\n\t\tgetSeparatorAfterNationalPrefix,\r\n\t\tmetadata\r\n\t})\r\n}\r\n\r\nfunction formatNationalNumber(state, format, {\r\n\tmetadata,\r\n\tuseNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\tlet formattedNationalNumber = formatNationalNumberUsingFormat(\r\n\t\tstate.nationalSignificantNumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tcarrierCode: state.carrierCode,\r\n\t\t\tuseInternationalFormat: state.international,\r\n\t\t\twithNationalPrefix: useNationalPrefixFormattingRule,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n\tif (!useNationalPrefixFormattingRule) {\r\n\t\tif (state.nationalPrefix) {\r\n\t\t\t// If a national prefix was extracted, then just prepend it,\r\n\t\t\t// followed by a \" \" character.\r\n\t\t\tformattedNationalNumber = state.nationalPrefix +\r\n\t\t\t\tgetSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\tformattedNationalNumber\r\n\t\t} else if (state.complexPrefixBeforeNationalSignificantNumber) {\r\n\t\t\tformattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber +\r\n\t\t\t\t' ' +\r\n\t\t\t\tformattedNationalNumber\r\n\t\t}\r\n\t}\r\n\tif (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n}\r\n\r\n// Check that the formatted phone number contains exactly\r\n// the same digits that have been input by the user.\r\n// For example, when \"0111523456789\" is input for `AR` country,\r\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\r\n// which means that the national part of `this.digits` isn't simply equal to\r\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\r\n//\r\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\r\n// being formatted via `metadata[country].national_prefix_transform_rule`.\r\n// For example, for `VI` country, it prepends `340` to the national number,\r\n// and if this check hasn't been implemented, then there would be a bug\r\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\r\n//\r\n// So, all these \"gotchas\" are filtered out.\r\n//\r\n// In the original Google's code, the comments say:\r\n// \"Check that we didn't remove nor add any extra digits when we matched\r\n// this formatting pattern. This usually happens after we entered the last\r\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\r\n// formatted but AYTF should retain all the number entered and not change\r\n// in order to match a format (of same leading digits and length) display\r\n// in that way.\"\r\n// \"If it's the same (i.e entered number and format is same), then it's\r\n// safe to return this in formatted number as nothing is lost / added.\"\r\n// Otherwise, don't use this format.\r\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\r\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\r\n//\r\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\r\n\treturn parseDigits(formattedNationalNumber) === state.getNationalDigits()\r\n}", "export default class PatternParser {\r\n\tparse(pattern) {\r\n\t\tthis.context = [{\r\n\t\t\tor: true,\r\n\t\t\tinstructions: []\r\n\t\t}]\r\n\r\n\t\tthis.parsePattern(pattern)\r\n\r\n\t\tif (this.context.length !== 1) {\r\n\t\t\tthrow new Error('Non-finalized contexts left when pattern parse ended')\r\n\t\t}\r\n\r\n\t\tconst { branches, instructions } = this.context[0]\r\n\r\n\t\tif (branches) {\r\n\t\t\treturn {\r\n\t\t\t\top: '|',\r\n\t\t\t\targs: branches.concat([\r\n\t\t\t\t\texpandSingleElementArray(instructions)\r\n\t\t\t\t])\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* istanbul ignore if */\r\n\t\tif (instructions.length === 0) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\tif (instructions.length === 1) {\r\n\t\t\treturn instructions[0]\r\n\t\t}\r\n\r\n\t\treturn instructions\r\n\t}\r\n\r\n\tstartContext(context) {\r\n\t\tthis.context.push(context)\r\n\t}\r\n\r\n\tendContext() {\r\n\t\tthis.context.pop()\r\n\t}\r\n\r\n\tgetContext() {\r\n\t\treturn this.context[this.context.length - 1]\r\n\t}\r\n\r\n\tparsePattern(pattern) {\r\n\t\tif (!pattern) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\tconst match = pattern.match(OPERATOR)\r\n\t\tif (!match) {\r\n\t\t\tif (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\r\n\t\t\t\tthrow new Error(`Illegal characters found in a pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tthis.getContext().instructions = this.getContext().instructions.concat(\r\n\t\t\t\tpattern.split('')\r\n\t\t\t)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst operator = match[1]\r\n\t\tconst before = pattern.slice(0, match.index)\r\n\t\tconst rightPart = pattern.slice(match.index + operator.length)\r\n\r\n\t\tswitch (operator) {\r\n\t\t\tcase '(?:':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\tor: true,\r\n\t\t\t\t\tinstructions: [],\r\n\t\t\t\t\tbranches: []\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ')':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\")\" operator must be preceded by \"(?:\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tif (this.getContext().instructions.length === 0) {\r\n\t\t\t\t\tthrow new Error('No instructions found after \"|\" operator in an \"or\" group')\r\n\t\t\t\t}\r\n\t\t\t\tconst { branches } = this.getContext()\r\n\t\t\t\tbranches.push(\r\n\t\t\t\t\texpandSingleElementArray(\r\n\t\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '|',\r\n\t\t\t\t\targs: branches\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '|':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\"|\" operator can only be used inside \"or\" groups')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\t// The top-level is an implicit \"or\" group, if required.\r\n\t\t\t\tif (!this.getContext().branches) {\r\n\t\t\t\t\t// `branches` are not defined only for the root implicit \"or\" operator.\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif (this.context.length === 1) {\r\n\t\t\t\t\t\tthis.getContext().branches = []\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('\"branches\" not found in an \"or\" group context')\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.getContext().branches.push(\r\n\t\t\t\t\texpandSingleElementArray(\r\n\t\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\tthis.getContext().instructions = []\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '[':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\toneOfSet: true\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ']':\r\n\t\t\t\tif (!this.getContext().oneOfSet) {\r\n\t\t\t\t\tthrow new Error('\"]\" operator must be preceded by \"[\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '[]',\r\n\t\t\t\t\targs: parseOneOfSet(before)\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown operator: ${operator}`)\r\n\t\t}\r\n\r\n\t\tif (rightPart) {\r\n\t\t\tthis.parsePattern(rightPart)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction parseOneOfSet(pattern) {\r\n\tconst values = []\r\n\tlet i = 0\r\n\twhile (i < pattern.length) {\r\n\t\tif (pattern[i] === '-') {\r\n\t\t\tif (i === 0 || i === pattern.length - 1) {\r\n\t\t\t\tthrow new Error(`Couldn't parse a one-of set pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tconst prevValue = pattern[i - 1].charCodeAt(0) + 1\r\n\t\t\tconst nextValue = pattern[i + 1].charCodeAt(0) - 1\r\n\t\t\tlet value = prevValue\r\n\t\t\twhile (value <= nextValue) {\r\n\t\t\t\tvalues.push(String.fromCharCode(value))\r\n\t\t\t\tvalue++\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalues.push(pattern[i])\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn values\r\n}\r\n\r\nconst ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/\r\n\r\nconst OPERATOR = new RegExp(\r\n\t// any of:\r\n\t'(' +\r\n\t\t// or operator\r\n\t\t'\\\\|' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group start\r\n\t\t'\\\\(\\\\?\\\\:' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group end\r\n\t\t'\\\\)' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set start\r\n\t\t'\\\\[' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set end\r\n\t\t'\\\\]' +\r\n\t')'\r\n)\r\n\r\nfunction expandSingleElementArray(array) {\r\n\tif (array.length === 1) {\r\n\t\treturn array[0]\r\n\t}\r\n\treturn array\r\n}", "import PatternParser from './AsYouTypeFormatter.PatternParser.js'\r\n\r\nexport default class PatternMatcher {\r\n\tconstructor(pattern) {\r\n\t\tthis.matchTree = new PatternParser().parse(pattern)\r\n\t}\r\n\r\n\tmatch(string, { allowOverflow } = {}) {\r\n\t\tif (!string) {\r\n\t\t\tthrow new Error('String is required')\r\n\t\t}\r\n\t\tconst result = match(string.split(''), this.matchTree, true)\r\n\t\tif (result && result.match) {\r\n\t\t\tdelete result.matchedChars\r\n\t\t}\r\n\t\tif (result && result.overflow) {\r\n\t\t\tif (!allowOverflow) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result\r\n\t}\r\n}\r\n\r\n/**\r\n * Matches `characters` against a pattern compiled into a `tree`.\r\n * @param  {string[]} characters\r\n * @param  {Tree} tree — A pattern compiled into a `tree`. See the `*.d.ts` file for the description of the `tree` structure.\r\n * @param  {boolean} last — Whether it's the last (rightmost) subtree on its level of the match tree.\r\n * @return {object} See the `*.d.ts` file for the description of the result object.\r\n */\r\nfunction match(characters, tree, last) {\r\n\t// If `tree` is a string, then `tree` is a single character.\r\n\t// That's because when a pattern is parsed, multi-character-string parts\r\n\t// of a pattern are compiled into arrays of single characters.\r\n\t// I still wrote this piece of code for a \"general\" hypothetical case\r\n\t// when `tree` could be a string of several characters, even though\r\n\t// such case is not possible with the current implementation.\r\n\tif (typeof tree === 'string') {\r\n\t\tconst characterString = characters.join('')\r\n\t\tif (tree.indexOf(characterString) === 0) {\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (characters.length === tree.length) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmatch: true,\r\n\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\treturn {\r\n\t\t\t\tpartialMatch: true,\r\n\t\t\t\t// matchedChars: characters\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (characterString.indexOf(tree) === 0) {\r\n\t\t\tif (last) {\r\n\t\t\t\t// The `else` path is not possible because `tree` is always a single character.\r\n\t\t\t\t// The `else` case for `characters.length > tree.length` would be\r\n\t\t\t\t// `characters.length <= tree.length` which means `characters.length <= 1`.\r\n\t\t\t\t// `characters` array can't be empty, so that means `characters === [tree]`,\r\n\t\t\t\t// which would also mean `tree.indexOf(characterString) === 0` and that'd mean\r\n\t\t\t\t// that the `if (tree.indexOf(characterString) === 0)` condition before this\r\n\t\t\t\t// `if` condition would be entered, and returned from there, not reaching this code.\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (characters.length > tree.length) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tmatch: true,\r\n\t\t\t\tmatchedChars: characters.slice(0, tree.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\tif (Array.isArray(tree)) {\r\n\t\tlet restCharacters = characters.slice()\r\n\t\tlet i = 0\r\n\t\twhile (i < tree.length) {\r\n\t\t\tconst subtree = tree[i]\r\n\t\t\tconst result = match(restCharacters, subtree, last && (i === tree.length - 1))\r\n\t\t\tif (!result) {\r\n\t\t\t\treturn\r\n\t\t\t} else if (result.overflow) {\r\n\t\t\t\treturn result\r\n\t\t\t} else if (result.match) {\r\n\t\t\t\t// Continue with the next subtree with the rest of the characters.\r\n\t\t\t\trestCharacters = restCharacters.slice(result.matchedChars.length)\r\n\t\t\t\tif (restCharacters.length === 0) {\r\n\t\t\t\t\tif (i === tree.length - 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ti++\r\n\t\t}\r\n\t\t// If `last` then overflow has already been checked\r\n\t\t// by the last element of the `tree` array.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (last) {\r\n\t\t\treturn {\r\n\t\t\t\toverflow: true\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tmatch: true,\r\n\t\t\tmatchedChars: characters.slice(0, characters.length - restCharacters.length)\r\n\t\t}\r\n\t}\r\n\r\n\tswitch (tree.op) {\r\n\t\tcase '|':\r\n\t\t\tlet partialMatch\r\n\t\t\tfor (const branch of tree.args) {\r\n\t\t\t\tconst result = match(characters, branch, last)\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\tif (result.overflow) {\r\n\t\t\t\t\t\treturn result\r\n\t\t\t\t\t} else if (result.match) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: result.matchedChars\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\t\t\tpartialMatch = true\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (partialMatch) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t// matchedChars: ...\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Not even a partial match.\r\n\t\t\treturn\r\n\r\n\t\tcase '[]':\r\n\t\t\tfor (const char of tree.args) {\r\n\t\t\t\tif (characters[0] === char) {\r\n\t\t\t\t\tif (characters.length === 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (last) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\tmatchedChars: [char]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No character matches.\r\n\t\t\treturn\r\n\r\n\t\t/* istanbul ignore next */\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unsupported instruction tree: ${tree}`)\r\n\t}\r\n}", "import {\r\n\tDIGIT_PLACEHOLDER,\r\n\tcountOccurences,\r\n\trepeat,\r\n\tcutAndStripNonPairedParens,\r\n\tcloseNonPairedParens,\r\n\tstripNonPairedParens,\r\n\tpopulateTemplateWithDigits\r\n} from './AsYouTypeFormatter.util.js'\r\n\r\nimport formatCompleteNumber, {\r\n\tcanFormatCompleteNumber\r\n} from './AsYouTypeFormatter.complete.js'\r\n\r\nimport PatternMatcher from './AsYouTypeFormatter.PatternMatcher.js'\r\n\r\nimport parseDigits from './helpers/parseDigits.js'\r\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util.js'\r\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat.js'\r\nimport { VALID_PUNCTUATION } from './constants.js'\r\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle.js'\r\n\r\n// Used in phone number format template creation.\r\n// Could be any digit, I guess.\r\nconst DUMMY_DIGIT = '9'\r\n// I don't know why is it exactly `15`\r\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\r\n// Create a phone number consisting only of the digit 9 that matches the\r\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\r\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\r\n\r\n// A set of characters that, if found in a national prefix formatting rules, are an indicator to\r\n// us that we should separate the national prefix from the number when formatting.\r\nconst NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/\r\n\r\n// Deprecated: Google has removed some formatting pattern related code from their repo.\r\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\r\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\r\n// Because this library supports generating custom metadata\r\n// some users may still be using old metadata so the relevant\r\n// code seems to stay until some next major version update.\r\nconst SUPPORT_LEGACY_FORMATTING_PATTERNS = true\r\n\r\n// A pattern that is used to match character classes in regular expressions.\r\n// An example of a character class is \"[1-4]\".\r\nconst CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\[([^\\[\\]])*\\]/g)\r\n\r\n// Any digit in a regular expression that actually denotes a digit. For\r\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\r\n// (8 and 0) are standalone digits, but the rest are not.\r\n// Two look-aheads are needed because the number following \\\\d could be a\r\n// two-digit number, since the phone number can be as long as 15 digits.\r\nconst CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\d(?=[^,}][^,}])/g)\r\n\r\n// A regular expression that is used to determine if a `format` is\r\n// suitable to be used in the \"as you type formatter\".\r\n// A `format` is suitable when the resulting formatted number has\r\n// the same digits as the user has entered.\r\n//\r\n// In the simplest case, that would mean that the format\r\n// doesn't add any additional digits when formatting a number.\r\n// Google says that it also shouldn't add \"star\" (`*`) characters,\r\n// like it does in some Israeli formats.\r\n// Such basic format would only contain \"valid punctuation\"\r\n// and \"captured group\" identifiers ($1, $2, etc).\r\n//\r\n// An example of a format that adds additional digits:\r\n//\r\n// Country: `AR` (Argentina).\r\n// Format:\r\n// {\r\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\r\n//    \"leading_digits_patterns\": [\"91\"],\r\n//    \"national_prefix_formatting_rule\": \"0$1\",\r\n//    \"format\": \"$2 15-$3-$4\",\r\n//    \"international_format\": \"$1 $2 $3-$4\"\r\n// }\r\n//\r\n// In the format above, the `format` adds `15` to the digits when formatting a number.\r\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\r\n// has previously removed `15` from a national number, so re-adding `15` in `format`\r\n// doesn't actually result in any extra digits added to user's input.\r\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\r\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\r\n//\r\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\r\n// `libphonenumber` code.\r\n//\r\nconst NON_ALTERING_FORMAT_REG_EXP = new RegExp(\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t// Google developers say:\r\n\t// \"We require that the first matching group is present in the\r\n\t//  output pattern to ensure no data is lost while formatting.\"\r\n\t'\\\\$1' +\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)*' +\r\n\t'$'\r\n)\r\n\r\n// This is the minimum length of the leading digits of a phone number\r\n// to guarantee the first \"leading digits pattern\" for a phone number format\r\n// to be preemptive.\r\nconst MIN_LEADING_DIGITS_LENGTH = 3\r\n\r\nexport default class AsYouTypeFormatter {\r\n\tconstructor({\r\n\t\tstate,\r\n\t\tmetadata\r\n\t}) {\r\n\t\tthis.metadata = metadata\r\n\t\tthis.resetFormat()\r\n\t}\r\n\r\n\tresetFormat() {\r\n\t\tthis.chosenFormat = undefined\r\n\t\tthis.template = undefined\r\n\t\tthis.nationalNumberTemplate = undefined\r\n\t\tthis.populatedNationalNumberTemplate = undefined\r\n\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t}\r\n\r\n\treset(numberingPlan, state) {\r\n\t\tthis.resetFormat()\r\n\t\tif (numberingPlan) {\r\n\t\t\tthis.isNANP = numberingPlan.callingCode() === '1'\r\n\t\t\tthis.matchingFormats = numberingPlan.formats()\r\n\t\t\tif (state.nationalSignificantNumber) {\r\n\t\t\t\tthis.narrowDownMatchingFormats(state)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.isNANP = undefined\r\n\t\t\tthis.matchingFormats = []\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats an updated phone number.\r\n\t * @param  {string} nextDigits — Additional phone number digits.\r\n\t * @param  {object} state — `AsYouType` state.\r\n\t * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.\r\n\t */\r\n\tformat(nextDigits, state) {\r\n\t\t// See if the phone number digits can be formatted as a complete phone number.\r\n\t\t// If not, use the results from `formatNationalNumberWithNextDigits()`,\r\n\t\t// which formats based on the chosen formatting pattern.\r\n\t\t//\r\n\t\t// Attempting to format complete phone number first is how it's done\r\n\t\t// in Google's `libphonenumber`, so this library just follows it.\r\n\t\t// Google's `libphonenumber` code doesn't explain in detail why does it\r\n\t\t// attempt to format digits as a complete phone number\r\n\t\t// instead of just going with a previoulsy (or newly) chosen `format`:\r\n\t\t//\r\n\t\t// \"Checks to see if there is an exact pattern match for these digits.\r\n\t\t//  If so, we should use this instead of any other formatting template\r\n\t\t//  whose leadingDigitsPattern also matches the input.\"\r\n\t\t//\r\n\t\tif (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\r\n\t\t\tfor (const format of this.matchingFormats) {\r\n\t\t\t\tconst formattedCompleteNumber = formatCompleteNumber(\r\n\t\t\t\t\tstate,\r\n\t\t\t\t\tformat,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmetadata: this.metadata,\r\n\t\t\t\t\t\tshouldTryNationalPrefixFormattingRule: (format) => this.shouldTryNationalPrefixFormattingRule(format, {\r\n\t\t\t\t\t\t\tinternational: state.international,\r\n\t\t\t\t\t\t\tnationalPrefix: state.nationalPrefix\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tgetSeparatorAfterNationalPrefix: (format) => this.getSeparatorAfterNationalPrefix(format)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t\tif (formattedCompleteNumber) {\r\n\t\t\t\t\tthis.resetFormat()\r\n\t\t\t\t\tthis.chosenFormat = format\r\n\t\t\t\t\tthis.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state)\r\n\t\t\t\t\tthis.populatedNationalNumberTemplate = formattedCompleteNumber\r\n\t\t\t\t\t// With a new formatting template, the matched position\r\n\t\t\t\t\t// using the old template needs to be reset.\r\n\t\t\t\t\tthis.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER)\r\n\t\t\t\t\treturn formattedCompleteNumber\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Format the digits as a partial (incomplete) phone number\r\n\t\t// using the previously chosen formatting pattern (or a newly chosen one).\r\n\t\treturn this.formatNationalNumberWithNextDigits(nextDigits, state)\r\n\t}\r\n\r\n\t// Formats the next phone number digits.\r\n\tformatNationalNumberWithNextDigits(nextDigits, state) {\r\n\t\tconst previouslyChosenFormat = this.chosenFormat\r\n\r\n\t\t// Choose a format from the list of matching ones.\r\n\t\tconst newlyChosenFormat = this.chooseFormat(state)\r\n\r\n\t\tif (newlyChosenFormat) {\r\n\t\t\tif (newlyChosenFormat === previouslyChosenFormat) {\r\n\t\t\t\t// If it can format the next (current) digits\r\n\t\t\t\t// using the previously chosen phone number format\r\n\t\t\t\t// then return the updated formatted number.\r\n\t\t\t\treturn this.formatNextNationalNumberDigits(nextDigits)\r\n\t\t\t} else {\r\n\t\t\t\t// If a more appropriate phone number format\r\n\t\t\t\t// has been chosen for these \"leading digits\",\r\n\t\t\t\t// then re-format the national phone number part\r\n\t\t\t\t// using the newly selected format.\r\n\t\t\t\treturn this.formatNextNationalNumberDigits(state.getNationalDigits())\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tnarrowDownMatchingFormats({\r\n\t\tnationalSignificantNumber,\r\n\t\tnationalPrefix,\r\n\t\tinternational\r\n\t}) {\r\n\t\tconst leadingDigits = nationalSignificantNumber\r\n\r\n\t\t// \"leading digits\" pattern list starts with a\r\n\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\r\n\t\t// So, after a user inputs 3 digits of a national (significant) phone number\r\n\t\t// this national (significant) number can already be formatted.\r\n\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\r\n\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\r\n\r\n\t\t// This implementation is different from Google's\r\n\t\t// in that it searches for a fitting format\r\n\t\t// even if the user has entered less than\r\n\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\r\n\t\t// Because some leading digit patterns already match for a single first digit.\r\n\t\tlet leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH\r\n\t\tif (leadingDigitsPatternIndex < 0) {\r\n\t\t\tleadingDigitsPatternIndex = 0\r\n\t\t}\r\n\r\n\t\tthis.matchingFormats = this.matchingFormats.filter(\r\n\t\t\tformat => this.formatSuits(format, international, nationalPrefix)\r\n\t\t\t\t&& this.formatMatches(format, leadingDigits, leadingDigitsPatternIndex)\r\n\t\t)\r\n\r\n\t\t// If there was a phone number format chosen\r\n\t\t// and it no longer holds given the new leading digits then reset it.\r\n\t\t// The test for this `if` condition is marked as:\r\n\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\r\n\t\t// To construct a valid test case for this one can find a country\r\n\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\r\n\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\r\n\t\tif (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t}\r\n\r\n\tformatSuits(format, international, nationalPrefix) {\r\n\t\t// When a prefix before a national (significant) number is\r\n\t\t// simply a national prefix, then it's parsed as `this.nationalPrefix`.\r\n\t\t// In more complex cases, a prefix before national (significant) number\r\n\t\t// could include a national prefix as well as some \"capturing groups\",\r\n\t\t// and in that case there's no info whether a national prefix has been parsed.\r\n\t\t// If national prefix is not used when formatting a phone number\r\n\t\t// using this format, but a national prefix has been entered by the user,\r\n\t\t// and was extracted, then discard such phone number format.\r\n\t\t// In Google's \"AsYouType\" formatter code, the equivalent would be this part:\r\n\t\t// https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\r\n\t\tif (nationalPrefix &&\r\n\t\t\t!format.usesNationalPrefix() &&\r\n\t\t\t// !format.domesticCarrierCodeFormattingRule() &&\r\n\t\t\t!format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// If national prefix is mandatory for this phone number format\r\n\t\t// and there're no guarantees that a national prefix is present in user input\r\n\t\t// then discard this phone number format as not suitable.\r\n\t\t// In Google's \"AsYouType\" formatter code, the equivalent would be this part:\r\n\t\t// https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\r\n\t\tif (!international &&\r\n\t\t\t!nationalPrefix &&\r\n\t\t\tformat.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tformatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\r\n\t\tconst leadingDigitsPatternsCount = format.leadingDigitsPatterns().length\r\n\r\n\t\t// If this format is not restricted to a certain\r\n\t\t// leading digits pattern then it fits.\r\n\t\t// The test case could be found by searching for \"leadingDigitsPatternsCount === 0\".\r\n\t\tif (leadingDigitsPatternsCount === 0) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// Start narrowing down the list of possible formats based on the leading digits.\r\n\t\t// (only previously matched formats take part in the narrowing down process)\r\n\r\n\t\t// `leading_digits_patterns` start with 3 digits min\r\n\t\t// and then go up from there one digit at a time.\r\n\t\tleadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1)\r\n\t\tconst leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]\r\n\r\n\t\t// Google imposes a requirement on the leading digits\r\n\t\t// to be minimum 3 digits long in order to be eligible\r\n\t\t// for checking those with a leading digits pattern.\r\n\t\t//\r\n\t\t// Since `leading_digits_patterns` start with 3 digits min,\r\n\t\t// Google's original `libphonenumber` library only starts\r\n\t\t// excluding any non-matching formats only when the\r\n\t\t// national number entered so far is at least 3 digits long,\r\n\t\t// otherwise format matching would give false negatives.\r\n\t\t//\r\n\t\t// For example, when the digits entered so far are `2`\r\n\t\t// and the leading digits pattern is `21` –\r\n\t\t// it's quite obvious in this case that the format could be the one\r\n\t\t// but due to the absence of further digits it would give false negative.\r\n\t\t//\r\n\t\t// Also, `leading_digits_patterns` doesn't always correspond to a single\r\n\t\t// digits count. For example, `60|8` pattern would already match `8`\r\n\t\t// but the `60` part would require having at least two leading digits,\r\n\t\t// so the whole pattern would require inputting two digits first in order to\r\n\t\t// decide on whether it matches the input, even when the input is \"80\".\r\n\t\t//\r\n\t\t// This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`\r\n\t\t// even when there's only 1 or 2 digits of the national (significant) number.\r\n\t\t// To do that, it uses a non-strict pattern matcher written specifically for that.\r\n\t\t//\r\n\t\tif (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\r\n\t\t\t// Before leading digits < 3 matching was implemented:\r\n\t\t\t// return true\r\n\t\t\t//\r\n\t\t\t// After leading digits < 3 matching was implemented:\r\n\t\t\ttry {\r\n\t\t\t\treturn new PatternMatcher(leadingDigitsPattern).match(leadingDigits, { allowOverflow: true }) !== undefined\r\n\t\t\t} catch (error) /* istanbul ignore next */ {\r\n\t\t\t\t// There's a slight possibility that there could be some undiscovered bug\r\n\t\t\t\t// in the pattern matcher code. Since the \"leading digits < 3 matching\"\r\n\t\t\t\t// feature is not \"essential\" for operation, it can fall back to the old way\r\n\t\t\t\t// in case of any issues rather than halting the application's execution.\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are\r\n\t\t// available then use the usual regular expression matching.\r\n\t\t//\r\n\t\t// The whole pattern is wrapped in round brackets (`()`) because\r\n\t\t// the pattern can use \"or\" operator (`|`) at the top level of the pattern.\r\n\t\t//\r\n\t\treturn new RegExp(`^(${leadingDigitsPattern})`).test(leadingDigits)\r\n\t}\r\n\r\n\tgetFormatFormat(format, international) {\r\n\t\treturn international ? format.internationalFormat() : format.format()\r\n\t}\r\n\r\n\tchooseFormat(state) {\r\n\t\t// When there are multiple available formats, the formatter uses the first\r\n\t\t// format where a formatting template could be created.\r\n\t\t//\r\n\t\t// For some weird reason, `istanbul` says \"else path not taken\"\r\n\t\t// for the `for of` line below. Supposedly that means that\r\n\t\t// the loop doesn't ever go over the last element in the list.\r\n\t\t// That's true because there always is `this.chosenFormat`\r\n\t\t// when `this.matchingFormats` is non-empty.\r\n\t\t// And, for some weird reason, it doesn't think that the case\r\n\t\t// with empty `this.matchingFormats` qualifies for a valid \"else\" path.\r\n\t\t// So simply muting this `istanbul` warning.\r\n\t\t// It doesn't skip the contents of the `for of` loop,\r\n\t\t// it just skips the `for of` line.\r\n\t\t//\r\n\t\t/* istanbul ignore next */\r\n\t\tfor (const format of this.matchingFormats.slice()) {\r\n\t\t\t// If this format is currently being used\r\n\t\t\t// and is still suitable, then stick to it.\r\n\t\t\tif (this.chosenFormat === format) {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\t// Sometimes, a formatting rule inserts additional digits in a phone number,\r\n\t\t\t// and \"as you type\" formatter can't do that: it should only use the digits\r\n\t\t\t// that the user has input.\r\n\t\t\t//\r\n\t\t\t// For example, in Argentina, there's a format for mobile phone numbers:\r\n\t\t\t//\r\n\t\t\t// {\r\n\t\t\t//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\r\n\t\t\t//    \"leading_digits_patterns\": [\"91\"],\r\n\t\t\t//    \"national_prefix_formatting_rule\": \"0$1\",\r\n\t\t\t//    \"format\": \"$2 15-$3-$4\",\r\n\t\t\t//    \"international_format\": \"$1 $2 $3-$4\"\r\n\t\t\t// }\r\n\t\t\t//\r\n\t\t\t// In that format, `international_format` is used instead of `format`\r\n\t\t\t// because `format` inserts `15` in the formatted number,\r\n\t\t\t// and `AsYouType` formatter should only use the digits\r\n\t\t\t// the user has actually input, without adding any extra digits.\r\n\t\t\t// In this case, it wouldn't make a difference, because the `15`\r\n\t\t\t// is first stripped when applying `national_prefix_for_parsing`\r\n\t\t\t// and then re-added when using `format`, so in reality it doesn't\r\n\t\t\t// add any new digits to the number, but to detect that, the code\r\n\t\t\t// would have to be more complex: it would have to try formatting\r\n\t\t\t// the digits using the format and then see if any digits have\r\n\t\t\t// actually been added or removed, and then, every time a new digit\r\n\t\t\t// is input, it should re-check whether the chosen format doesn't\r\n\t\t\t// alter the digits.\r\n\t\t\t//\r\n\t\t\t// Google's code doesn't go that far, and so does this library:\r\n\t\t\t// it simply requires that a `format` doesn't add any additonal\r\n\t\t\t// digits to user's input.\r\n\t\t\t//\r\n\t\t\t// Also, people in general should move from inputting phone numbers\r\n\t\t\t// in national format (possibly with national prefixes)\r\n\t\t\t// and use international phone number format instead:\r\n\t\t\t// it's a logical thing in the modern age of mobile phones,\r\n\t\t\t// globalization and the internet.\r\n\t\t\t//\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (!NON_ALTERING_FORMAT_REG_EXP.test(this.getFormatFormat(format, state.international))) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tif (!this.createTemplateForFormat(format, state)) {\r\n\t\t\t\t// Remove the format if it can't generate a template.\r\n\t\t\t\tthis.matchingFormats = this.matchingFormats.filter(_ => _ !== format)\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tthis.chosenFormat = format\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tif (!this.chosenFormat) {\r\n\t\t\t// No format matches the national (significant) phone number.\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t\treturn this.chosenFormat\r\n\t}\r\n\r\n\tcreateTemplateForFormat(format, state) {\r\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\r\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\r\n\t\t// (Though there's no such format in current metadata)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Get formatting template for this phone number format\r\n\t\tconst template = this.getTemplateForFormat(format, state)\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (template) {\r\n\t\t\tthis.setNationalNumberTemplate(template, state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tgetSeparatorAfterNationalPrefix(format) {\r\n\t\t// `US` metadata doesn't have a `national_prefix_formatting_rule`,\r\n\t\t// so the `if` condition below doesn't apply to `US`,\r\n\t\t// but in reality there shoudl be a separator\r\n\t\t// between a national prefix and a national (significant) number.\r\n\t\t// So `US` national prefix separator is a \"special\" \"hardcoded\" case.\r\n\t\tif (this.isNANP) {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\t// If a `format` has a `national_prefix_formatting_rule`\r\n\t\t// and that rule has a separator after a national prefix,\r\n\t\t// then it means that there should be a separator\r\n\t\t// between a national prefix and a national (significant) number.\r\n\t\tif (format &&\r\n\t\t\tformat.nationalPrefixFormattingRule() &&\r\n\t\t\tNATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\t// At this point, there seems to be no clear evidence that\r\n\t\t// there should be a separator between a national prefix\r\n\t\t// and a national (significant) number. So don't insert one.\r\n\t\treturn ''\r\n\t}\r\n\r\n\tgetInternationalPrefixBeforeCountryCallingCode({ IDDPrefix, missingPlus }, options) {\r\n\t\tif (IDDPrefix) {\r\n\t\t\treturn options && options.spacing === false ? IDDPrefix : IDDPrefix + ' '\r\n\t\t}\r\n\t\tif (missingPlus) {\r\n\t\t\treturn ''\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\r\n\tgetTemplate(state) {\r\n\t\tif (!this.template) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// `this.template` holds the template for a \"complete\" phone number.\r\n\t\t// The currently entered phone number is most likely not \"complete\",\r\n\t\t// so trim all non-populated digits.\r\n\t\tlet index = -1\r\n\t\tlet i = 0\r\n\t\tconst internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, { spacing: false }) : ''\r\n\t\twhile (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\r\n\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1)\r\n\t\t\ti++\r\n\t\t}\r\n\t\treturn cutAndStripNonPairedParens(this.template, index + 1)\r\n\t}\r\n\r\n\tsetNationalNumberTemplate(template, state) {\r\n\t\tthis.nationalNumberTemplate = template\r\n\t\tthis.populatedNationalNumberTemplate = template\r\n\t\t// With a new formatting template, the matched position\r\n\t\t// using the old template needs to be reset.\r\n\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t\t// For convenience, the public `.template` property\r\n\t\t// contains the whole international number\r\n\t\t// if the phone number being input is international:\r\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\r\n\t\t// a spacebar and then the template for the formatted national number.\r\n\t\tif (state.international) {\r\n\t\t\tthis.template =\r\n\t\t\t\tthis.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) +\r\n\t\t\t\trepeat(DIGIT_PLACEHOLDER, state.callingCode.length) +\r\n\t\t\t\t' ' +\r\n\t\t\t\ttemplate\r\n\t\t} else {\r\n\t\t\tthis.template = template\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Generates formatting template for a national phone number,\r\n\t * optionally containing a national prefix, for a format.\r\n\t * @param  {Format} format\r\n\t * @param  {string} nationalPrefix\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplateForFormat(format, {\r\n\t\tnationalSignificantNumber,\r\n\t\tinternational,\r\n\t\tnationalPrefix,\r\n\t\tcomplexPrefixBeforeNationalSignificantNumber\r\n\t}) {\r\n\t\tlet pattern = format.pattern()\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\r\n\t\t\tpattern = pattern\r\n\t\t\t\t// Replace anything in the form of [..] with \\d\r\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\r\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\r\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d')\r\n\t\t}\r\n\r\n\t\t// Generate a dummy national number (consisting of `9`s)\r\n\t\t// that fits this format's `pattern`.\r\n\t\t//\r\n\t\t// This match will always succeed,\r\n\t\t// because the \"longest dummy phone number\"\r\n\t\t// has enough length to accomodate any possible\r\n\t\t// national phone number format pattern.\r\n\t\t//\r\n\t\tlet digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (nationalSignificantNumber.length > digits.length) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Get a formatting template which can be used to efficiently format\r\n\t\t// a partial number where digits are added one by one.\r\n\r\n\t\t// Below `strictPattern` is used for the\r\n\t\t// regular expression (with `^` and `$`).\r\n\t\t// This wasn't originally in Google's `libphonenumber`\r\n\t\t// and I guess they don't really need it\r\n\t\t// because they're not using \"templates\" to format phone numbers\r\n\t\t// but I added `strictPattern` after encountering\r\n\t\t// South Korean phone number formatting bug.\r\n\t\t//\r\n\t\t// Non-strict regular expression bug demonstration:\r\n\t\t//\r\n\t\t// this.nationalSignificantNumber : `111111111` (9 digits)\r\n\t\t//\r\n\t\t// pattern : (\\d{2})(\\d{3,4})(\\d{4})\r\n\t\t// format : `$1 $2 $3`\r\n\t\t// digits : `9999999999` (10 digits)\r\n\t\t//\r\n\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\r\n\t\t//\r\n\t\t// template : xx xxxx xxxx\r\n\t\t//\r\n\t\t// But the correct template in this case is `xx xxx xxxx`.\r\n\t\t// The template was generated incorrectly because of the\r\n\t\t// `{3,4}` variability in the `pattern`.\r\n\t\t//\r\n\t\t// The fix is, if `this.nationalSignificantNumber` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then `this.nationalSignificantNumber`\r\n\t\t// is used instead of `digits`.\r\n\r\n\t\tconst strictPattern = new RegExp('^' + pattern + '$')\r\n\t\tconst nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT)\r\n\r\n\t\t// If `this.nationalSignificantNumber` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then use it\r\n\t\t// instead of `digits`.\r\n\t\tif (strictPattern.test(nationalNumberDummyDigits)) {\r\n\t\t\tdigits = nationalNumberDummyDigits\r\n\t\t}\r\n\r\n\t\tlet numberFormat = this.getFormatFormat(format, international)\r\n\t\tlet nationalPrefixIncludedInTemplate\r\n\r\n\t\t// If a user did input a national prefix (and that's guaranteed),\r\n\t\t// and if a `format` does have a national prefix formatting rule,\r\n\t\t// then see if that national prefix formatting rule\r\n\t\t// prepends exactly the same national prefix the user has input.\r\n\t\t// If that's the case, then use the `format` with the national prefix formatting rule.\r\n\t\t// Otherwise, use  the `format` without the national prefix formatting rule,\r\n\t\t// and prepend a national prefix manually to it.\r\n\t\tif (this.shouldTryNationalPrefixFormattingRule(format, { international, nationalPrefix })) {\r\n\t\t\tconst numberFormatWithNationalPrefix = numberFormat.replace(\r\n\t\t\t\tFIRST_GROUP_PATTERN,\r\n\t\t\t\tformat.nationalPrefixFormattingRule()\r\n\t\t\t)\r\n\t\t\t// If `national_prefix_formatting_rule` of a `format` simply prepends\r\n\t\t\t// national prefix at the start of a national (significant) number,\r\n\t\t\t// then such formatting can be used with `AsYouType` formatter.\r\n\t\t\t// There seems to be no `else` case: everywhere in metadata,\r\n\t\t\t// national prefix formatting rule is national prefix + $1,\r\n\t\t\t// or `($1)`, in which case such format isn't even considered\r\n\t\t\t// when the user has input a national prefix.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\r\n\t\t\t\tnumberFormat = numberFormatWithNationalPrefix\r\n\t\t\t\tnationalPrefixIncludedInTemplate = true\r\n\t\t\t\t// Replace all digits of the national prefix in the formatting template\r\n\t\t\t\t// with `DIGIT_PLACEHOLDER`s.\r\n\t\t\t\tif (nationalPrefix) {\r\n\t\t\t\t\tlet i = nationalPrefix.length\r\n\t\t\t\t\twhile (i > 0) {\r\n\t\t\t\t\t\tnumberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER)\r\n\t\t\t\t\t\ti--\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Generate formatting template for this phone number format.\r\n\t\tlet template = digits\r\n\t\t\t// Format the dummy phone number according to the format.\r\n\t\t\t.replace(new RegExp(pattern), numberFormat)\r\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER.\r\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER)\r\n\r\n\t\t// If a prefix of a national (significant) number is not as simple\r\n\t\t// as just a basic national prefix, then just prepend such prefix\r\n\t\t// before the national (significant) number, optionally spacing\r\n\t\t// the two with a whitespace.\r\n\t\tif (!nationalPrefixIncludedInTemplate) {\r\n\t\t\tif (complexPrefixBeforeNationalSignificantNumber) {\r\n\t\t\t\t// Prepend the prefix to the template manually.\r\n\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) +\r\n\t\t\t\t\t' ' +\r\n\t\t\t\t\ttemplate\r\n\t\t\t} else if (nationalPrefix) {\r\n\t\t\t\t// Prepend national prefix to the template manually.\r\n\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) +\r\n\t\t\t\t\tthis.getSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (international) {\r\n\t\t\ttemplate = applyInternationalSeparatorStyle(template)\r\n\t\t}\r\n\r\n\t\treturn template\r\n\t}\r\n\r\n\tformatNextNationalNumberDigits(digits) {\r\n\t\tconst result = populateTemplateWithDigits(\r\n\t\t\tthis.populatedNationalNumberTemplate,\r\n\t\t\tthis.populatedNationalNumberTemplatePosition,\r\n\t\t\tdigits\r\n\t\t)\r\n\r\n\t\tif (!result) {\r\n\t\t\t// Reset the format.\r\n\t\t\tthis.resetFormat()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.populatedNationalNumberTemplate = result[0]\r\n\t\tthis.populatedNationalNumberTemplatePosition = result[1]\r\n\r\n\t\t// Return the formatted phone number so far.\r\n\t\treturn cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\r\n\t\t// The old way which was good for `input-format` but is not so good\r\n\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\r\n\t\t// return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\t\t// \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\r\n\t}\r\n\r\n\tshouldTryNationalPrefixFormattingRule(format, { international, nationalPrefix }) {\r\n\t\tif (format.nationalPrefixFormattingRule()) {\r\n\t\t\t// In some countries, `national_prefix_formatting_rule` is `($1)`,\r\n\t\t\t// so it applies even if the user hasn't input a national prefix.\r\n\t\t\t// `format.usesNationalPrefix()` detects such cases.\r\n\t\t\tconst usesNationalPrefix = format.usesNationalPrefix()\r\n\t\t\tif ((usesNationalPrefix && nationalPrefix) ||\r\n\t\t\t\t(!usesNationalPrefix && !international)) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}", "import extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js'\r\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber.js'\r\nimport stripIddPrefix from './helpers/stripIddPrefix.js'\r\nimport parseDigits from './helpers/parseDigits.js'\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants.js'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART =\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i')\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_PART =\r\n\t'(?:' +\r\n\t\t'[' + PLUS_CHARS + ']' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']*' +\r\n\t\t'|' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']+' +\r\n\t')'\r\n\r\nconst AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp(\r\n\t'[^' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+' +\r\n\t'.*' +\r\n\t'$'\r\n)\r\n\r\n// Tests whether `national_prefix_for_parsing` could match\r\n// different national prefixes.\r\n// Matches anything that's not a digit or a square bracket.\r\nconst COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/\r\n\r\nexport default class AsYouTypeParser {\r\n\tconstructor({\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata,\r\n\t\tonNationalSignificantNumberChange\r\n\t}) {\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.metadata = metadata\r\n\t\tthis.onNationalSignificantNumberChange = onNationalSignificantNumberChange\r\n\t}\r\n\r\n\tinput(text, state) {\r\n\t\tconst [formattedDigits, hasPlus] = extractFormattedDigitsAndPlus(text)\r\n\t\tconst digits = parseDigits(formattedDigits)\r\n\t\t// Checks for a special case: just a leading `+` has been entered.\r\n\t\tlet justLeadingPlus\r\n\t\tif (hasPlus) {\r\n\t\t\tif (!state.digits) {\r\n\t\t\t\tstate.startInternationalNumber()\r\n\t\t\t\tif (!digits) {\r\n\t\t\t\t\tjustLeadingPlus = true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (digits) {\r\n\t\t\tthis.inputDigits(digits, state)\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number digits.\r\n\t * @param  {string} digits\r\n\t * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n\t */\r\n\tinputDigits(nextDigits, state) {\r\n\t\tconst { digits } = state\r\n\t\tconst hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3\r\n\r\n\t\t// Append phone number digits.\r\n\t\tstate.appendDigits(nextDigits)\r\n\r\n\t\t// Attempt to extract IDD prefix:\r\n\t\t// Some users input their phone number in international format,\r\n\t\t// but in an \"out-of-country\" dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers as soon as there're at least 3 digits.\r\n\t\t// Google's library attempts to extract IDD prefix at 3 digits,\r\n\t\t// so this library just copies that behavior.\r\n\t\t// I guess that's because the most commot IDD prefixes are\r\n\t\t// `00` (Europe) and `011` (US).\r\n\t\t// There exist really long IDD prefixes too:\r\n\t\t// for example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t// An IDD prefix is extracted here, and then every time when\r\n\t\t// there's a new digit and the number couldn't be formatted.\r\n\t\tif (hasReceivedThreeLeadingDigits) {\r\n\t\t\tthis.extractIddPrefix(state)\r\n\t\t}\r\n\r\n\t\tif (this.isWaitingForCountryCallingCode(state)) {\r\n\t\t\tif (!this.extractCountryCallingCode(state)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tstate.appendNationalSignificantNumberDigits(nextDigits)\r\n\t\t}\r\n\r\n\t\t// If a phone number is being input in international format,\r\n\t\t// then it's not valid for it to have a national prefix.\r\n\t\t// Still, some people incorrectly input such numbers with a national prefix.\r\n\t\t// In such cases, only attempt to strip a national prefix if the number becomes too long.\r\n\t\t// (but that is done later, not here)\r\n\t\tif (!state.international) {\r\n\t\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\t\tthis.extractNationalSignificantNumber(\r\n\t\t\t\t\tstate.getNationalDigits(),\r\n\t\t\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisWaitingForCountryCallingCode({ international, callingCode }) {\r\n\t\treturn international && !callingCode\r\n\t}\r\n\r\n\t// Extracts a country calling code from a number\r\n\t// being entered in internatonal format.\r\n\textractCountryCallingCode(state) {\r\n\t\tconst { countryCallingCode, number } = extractCountryCallingCode(\r\n\t\t\t'+' + state.getDigitsWithoutInternationalPrefix(),\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (countryCallingCode) {\r\n\t\t\tstate.setCallingCode(countryCallingCode)\r\n\t\t\tstate.update({\r\n\t\t\t\tnationalSignificantNumber: number\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\treset(numberingPlan) {\r\n\t\tif (numberingPlan) {\r\n\t\t\tthis.hasSelectedNumberingPlan = true\r\n\t\t\tconst nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing()\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing)\r\n\t\t} else {\r\n\t\t\tthis.hasSelectedNumberingPlan = undefined\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts a national (significant) number from user input.\r\n\t * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n\t * and doesn't apply `national_prefix_transform_rule` after that.\r\n\t * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n\t * @return {boolean} [extracted]\r\n\t */\r\n\textractNationalSignificantNumber(nationalDigits, setState) {\r\n\t\tif (!this.hasSelectedNumberingPlan) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\tif (nationalNumber === nationalDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\t/**\r\n\t * In Google's code this function is called \"attempt to extract longer NDD\".\r\n\t * \"Some national prefixes are a substring of others\", they say.\r\n\t * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n\t */\r\n\textractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\r\n\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\treturn this.extractNationalSignificantNumber(nationalDigits, setState)\r\n\t\t}\r\n\t\tif (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\t// If a national prefix has been extracted previously,\r\n\t\t// then it's always extracted as additional digits are added.\r\n\t\t// That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\r\n\t\t// doesn't do anything different from what it currently does.\r\n\t\t// So, just in case, here's this check, though it doesn't occur.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (nationalNumber === prevNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\tonExtractedNationalNumber(\r\n\t\tnationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tnationalSignificantNumber,\r\n\t\tnationalDigits,\r\n\t\tsetState\r\n\t) {\r\n\t\tlet complexPrefixBeforeNationalSignificantNumber\r\n\t\tlet nationalSignificantNumberMatchesInput\r\n\t\t// This check also works with empty `this.nationalSignificantNumber`.\r\n\t\tconst nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber)\r\n\t\t// If the extracted national (significant) number is the\r\n\t\t// last substring of the `digits`, then it means that it hasn't been altered:\r\n\t\t// no digits have been removed from the national (significant) number\r\n\t\t// while applying `national_prefix_transform_rule`.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\tif (nationalSignificantNumberIndex >= 0 &&\r\n\t\t\tnationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\r\n\t\t\tnationalSignificantNumberMatchesInput = true\r\n\t\t\t// If a prefix of a national (significant) number is not as simple\r\n\t\t\t// as just a basic national prefix, then such prefix is stored in\r\n\t\t\t// `this.complexPrefixBeforeNationalSignificantNumber` property and will be\r\n\t\t\t// prepended \"as is\" to the national (significant) number to produce\r\n\t\t\t// a formatted result.\r\n\t\t\tconst prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex)\r\n\t\t\t// `prefixBeforeNationalNumber` is always non-empty,\r\n\t\t\t// because `onExtractedNationalNumber()` isn't called\r\n\t\t\t// when a national (significant) number hasn't been actually \"extracted\":\r\n\t\t\t// when a national (significant) number is equal to the national part of `digits`,\r\n\t\t\t// then `onExtractedNationalNumber()` doesn't get called.\r\n\t\t\tif (prefixBeforeNationalNumber !== nationalPrefix) {\r\n\t\t\t\tcomplexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetState({\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tnationalSignificantNumberMatchesInput,\r\n\t\t\tcomplexPrefixBeforeNationalSignificantNumber\r\n\t\t})\r\n\t\t// `onExtractedNationalNumber()` is only called when\r\n\t\t// the national (significant) number actually did change.\r\n\t\tthis.hasExtractedNationalSignificantNumber = true\r\n\t\tthis.onNationalSignificantNumberChange()\r\n\t}\r\n\r\n\treExtractNationalSignificantNumber(state) {\r\n\t\t// Attempt to extract a national prefix.\r\n\t\t//\r\n\t\t// Some people incorrectly input national prefix\r\n\t\t// in an international phone number.\r\n\t\t// For example, some people write British phone numbers as `+44(0)...`.\r\n\t\t//\r\n\t\t// Also, in some rare cases, it is valid for a national prefix\r\n\t\t// to be a part of an international phone number.\r\n\t\t// For example, mobile phone numbers in Mexico are supposed to be\r\n\t\t// dialled internationally using a `1` national prefix,\r\n\t\t// so the national prefix will be part of an international number.\r\n\t\t//\r\n\t\t// Quote from:\r\n\t\t// https://www.mexperience.com/dialing-cell-phones-in-mexico/\r\n\t\t//\r\n\t\t// \"Dialing a Mexican cell phone from abroad\r\n\t\t// When you are calling a cell phone number in Mexico from outside Mexico,\r\n\t\t// it’s necessary to dial an additional “1” after Mexico’s country code\r\n\t\t// (which is “52”) and before the area code.\r\n\t\t// You also ignore the 045, and simply dial the area code and the\r\n\t\t// cell phone’s number.\r\n\t\t//\r\n\t\t// If you don’t add the “1”, you’ll receive a recorded announcement\r\n\t\t// asking you to redial using it.\r\n\t\t//\r\n\t\t// For example, if you are calling from the USA to a cell phone\r\n\t\t// in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\r\n\t\t// (Note that this is different to calling a land line in Mexico City\r\n\t\t// from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\r\n\t\t//\r\n\t\t// Google's demo output:\r\n\t\t// https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\r\n\t\t//\r\n\t\tif (this.extractAnotherNationalSignificantNumber(\r\n\t\t\tstate.getNationalDigits(),\r\n\t\t\tstate.nationalSignificantNumber,\r\n\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// If no format matches the phone number, then it could be\r\n\t\t// \"a really long IDD\" (quote from a comment in Google's library).\r\n\t\t// An IDD prefix is first extracted when the user has entered at least 3 digits,\r\n\t\t// and then here — every time when there's a new digit and the number\r\n\t\t// couldn't be formatted.\r\n\t\t// For example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t//\r\n\t\t// Could also check `!hasReceivedThreeLeadingDigits` here\r\n\t\t// to filter out the case when this check duplicates the one\r\n\t\t// already performed when there're 3 leading digits,\r\n\t\t// but it's not a big deal, and in most cases there\r\n\t\t// will be a suitable `format` when there're 3 leading digits.\r\n\t\t//\r\n\t\tif (this.extractIddPrefix(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// Google's AsYouType formatter supports sort of an \"autocorrection\" feature\r\n\t\t// when it \"autocorrects\" numbers that have been input for a country\r\n\t\t// with that country's calling code.\r\n\t\t// Such \"autocorrection\" feature looks weird, but different people have been requesting it:\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/375\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/316\r\n\t\tif (this.fixMissingPlus(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\textractIddPrefix(state) {\r\n\t\t// An IDD prefix can't be present in a number written with a `+`.\r\n\t\t// Also, don't re-extract an IDD prefix if has already been extracted.\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tIDDPrefix,\r\n\t\t\tdigits,\r\n\t\t\tnationalSignificantNumber\r\n\t\t} = state\r\n\t\tif (international || IDDPrefix) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Some users input their phone number in \"out-of-country\"\r\n\t\t// dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(\r\n\t\t\tdigits,\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\r\n\t\t\t// If an IDD prefix was stripped then convert the IDD-prefixed number\r\n\t\t\t// to international number for subsequent parsing.\r\n\t\t\tstate.update({\r\n\t\t\t\tIDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\r\n\t\t\t})\r\n\t\t\tthis.startInternationalNumber(state, {\r\n\t\t\t\tcountry: undefined,\r\n\t\t\t\tcallingCode: undefined\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tfixMissingPlus(state) {\r\n\t\tif (!state.international) {\r\n\t\t\tconst {\r\n\t\t\t\tcountryCallingCode: newCallingCode,\r\n\t\t\t\tnumber\r\n\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\tstate.digits,\r\n\t\t\t\tthis.defaultCountry,\r\n\t\t\t\tthis.defaultCallingCode,\r\n\t\t\t\tthis.metadata.metadata\r\n\t\t\t)\r\n\t\t\tif (newCallingCode) {\r\n\t\t\t\tstate.update({\r\n\t\t\t\t\tmissingPlus: true\r\n\t\t\t\t})\r\n\t\t\t\tthis.startInternationalNumber(state, {\r\n\t\t\t\t\tcountry: state.country,\r\n\t\t\t\t\tcallingCode: newCallingCode\r\n\t\t\t\t})\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstartInternationalNumber(state, { country, callingCode }) {\r\n\t\tstate.startInternationalNumber(country, callingCode)\r\n\t\t// If a national (significant) number has been extracted before, reset it.\r\n\t\tif (state.nationalSignificantNumber) {\r\n\t\t\tstate.resetNationalSignificantNumber()\r\n\t\t\tthis.onNationalSignificantNumberChange()\r\n\t\t\tthis.hasExtractedNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\textractCallingCodeAndNationalSignificantNumber(state) {\r\n\t\tif (this.extractCountryCallingCode(state)) {\r\n\t\t\t// `this.extractCallingCode()` is currently called when the number\r\n\t\t\t// couldn't be formatted during the standard procedure.\r\n\t\t\t// Normally, the national prefix would be re-extracted\r\n\t\t\t// for an international number if such number couldn't be formatted,\r\n\t\t\t// but since it's already not able to be formatted,\r\n\t\t\t// there won't be yet another retry, so also extract national prefix here.\r\n\t\t\tthis.extractNationalSignificantNumber(\r\n\t\t\t\tstate.getNationalDigits(),\r\n\t\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\r\nfunction extractFormattedPhoneNumber(text) {\r\n\t// Attempt to extract a possible number from the string passed in.\r\n\tconst startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\t// Trim everything to the left of the phone number.\r\n\ttext = text.slice(startsAt)\r\n\t// Trim the `+`.\r\n\tlet hasPlus\r\n\tif (text[0] === '+') {\r\n\t\thasPlus = true\r\n\t\ttext = text.slice('+'.length)\r\n\t}\r\n\t// Trim everything to the right of the phone number.\r\n\ttext = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, '')\r\n\t// Re-add the previously trimmed `+`.\r\n\tif (hasPlus) {\r\n\t\ttext = '+' + text\r\n\t}\r\n\treturn text\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nfunction _extractFormattedDigitsAndPlus(text) {\r\n\t// Extract a formatted phone number part from text.\r\n\tconst extractedNumber = extractFormattedPhoneNumber(text) || ''\r\n\t// Trim a `+`.\r\n\tif (extractedNumber[0] === '+') {\r\n\t\treturn [extractedNumber.slice('+'.length), true]\r\n\t}\r\n\treturn [extractedNumber]\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nexport function extractFormattedDigitsAndPlus(text) {\r\n\tlet [formattedDigits, hasPlus] = _extractFormattedDigitsAndPlus(text)\r\n\t// If the extracted phone number part\r\n\t// can possibly be a part of some valid phone number\r\n\t// then parse phone number characters from a formatted phone number.\r\n\tif (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\r\n\t\tformattedDigits = ''\r\n\t}\r\n\treturn [formattedDigits, hasPlus]\r\n}", "import Metadata from './metadata.js'\r\nimport PhoneNumber from './PhoneNumber.js'\r\nimport AsYouTypeState from './AsYouTypeState.js'\r\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.js'\r\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser.js'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class AsYouType {\r\n\t/**\r\n\t * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(optionsOrDefaultCountry, metadata) {\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\t\tconst [defaultCountry, defaultCallingCode] = this.getCountryAndCallingCode(optionsOrDefaultCountry)\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\tgetCountryAndCallingCode(optionsOrDefaultCountry) {\r\n\t\t// Set `defaultCountry` and `defaultCallingCode` options.\r\n\t\tlet defaultCountry\r\n\t\tlet defaultCallingCode\r\n\t\t// Turns out `null` also has type \"object\". Weird.\r\n\t\tif (optionsOrDefaultCountry) {\r\n\t\t\tif (typeof optionsOrDefaultCountry === 'object') {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry.defaultCountry\r\n\t\t\t\tdefaultCallingCode = optionsOrDefaultCountry.defaultCallingCode\r\n\t\t\t} else {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\r\n\t\t\tdefaultCountry = undefined\r\n\t\t}\r\n\t\tif (defaultCallingCode) {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tdefaultCountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [defaultCountry, defaultCallingCode]\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number characters.\r\n\t * @param  {string} text\r\n\t * @return {string} Formatted phone number characters that have been input so far.\r\n\t */\r\n\tinput(text) {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t} = this.parser.input(text, this.state)\r\n\t\tif (justLeadingPlus) {\r\n\t\t\tthis.formattedOutput = '+'\r\n\t\t} else if (digits) {\r\n\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t// Match the available formats by the currently available leading digits.\r\n\t\t\tif (this.state.nationalSignificantNumber) {\r\n\t\t\t\tthis.formatter.narrowDownMatchingFormats(this.state)\r\n\t\t\t}\r\n\t\t\tlet formattedNationalNumber\r\n\t\t\tif (this.metadata.hasSelectedNumberingPlan()) {\r\n\t\t\t\tformattedNationalNumber = this.formatter.format(digits, this.state)\r\n\t\t\t}\r\n\t\t\tif (formattedNationalNumber === undefined) {\r\n\t\t\t\t// See if another national (significant) number could be re-extracted.\r\n\t\t\t\tif (this.parser.reExtractNationalSignificantNumber(this.state)) {\r\n\t\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\t\t// If it could, then re-try formatting the new national (significant) number.\r\n\t\t\t\t\tconst nationalDigits = this.state.getNationalDigits()\r\n\t\t\t\t\tif (nationalDigits) {\r\n\t\t\t\t\t\tformattedNationalNumber = this.formatter.format(nationalDigits, this.state)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.formattedOutput = formattedNationalNumber\r\n\t\t\t\t? this.getFullNumber(formattedNationalNumber)\r\n\t\t\t\t: this.getNonFormattedNumber()\r\n\t\t}\r\n\t\treturn this.formattedOutput\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.state = new AsYouTypeState({\r\n\t\t\tonCountryChange: (country) => {\r\n\t\t\t\t// Before version `1.6.0`, the official `AsYouType` formatter API\r\n\t\t\t\t// included the `.country` property of an `AsYouType` instance.\r\n\t\t\t\t// Since that property (along with the others) have been moved to\r\n\t\t\t\t// `this.state`, `this.country` property is emulated for compatibility\r\n\t\t\t\t// with the old versions.\r\n\t\t\t\tthis.country = country\r\n\t\t\t},\r\n\t\t\tonCallingCodeChange: (callingCode, country) => {\r\n\t\t\t\tthis.metadata.selectNumberingPlan(country, callingCode)\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t\tthis.parser.reset(this.metadata.numberingPlan)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.formatter = new AsYouTypeFormatter({\r\n\t\t\tstate: this.state,\r\n\t\t\tmetadata: this.metadata\r\n\t\t})\r\n\t\tthis.parser = new AsYouTypeParser({\r\n\t\t\tdefaultCountry: this.defaultCountry,\r\n\t\t\tdefaultCallingCode: this.defaultCallingCode,\r\n\t\t\tmetadata: this.metadata,\r\n\t\t\tstate: this.state,\r\n\t\t\tonNationalSignificantNumberChange: () => {\r\n\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.state.reset({\r\n\t\t\tcountry: this.defaultCountry,\r\n\t\t\tcallingCode: this.defaultCallingCode\r\n\t\t})\r\n\t\tthis.formattedOutput = ''\r\n\t\treturn this\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is being input in international format.\r\n\t * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisInternational() {\r\n\t\treturn this.state.international\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the \"calling code\" part of the phone number when it's being input\r\n\t * in an international format.\r\n\t * If no valid calling code has been entered so far, returns `undefined`.\r\n\t * @return {string} [callingCode]\r\n\t */\r\n\tgetCallingCode() {\r\n\t\t // If the number is being input in national format and some \"default calling code\"\r\n\t\t // has been passed to `AsYouType` constructor, then `this.state.callingCode`\r\n\t\t // is equal to that \"default calling code\".\r\n\t\t //\r\n\t\t // If the number is being input in national format and no \"default calling code\"\r\n\t\t // has been passed to `AsYouType` constructor, then returns `undefined`,\r\n\t\t // even if a \"default country\" has been passed to `AsYouType` constructor.\r\n\t\t //\r\n\t\tif (this.isInternational()) {\r\n\t\t\treturn this.state.callingCode\r\n\t\t}\r\n\t}\r\n\r\n\t// A legacy alias.\r\n\tgetCountryCallingCode() {\r\n\t\treturn this.getCallingCode()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * Returns `undefined` if no phone number has been input yet.\r\n\t * @return {string} [country]\r\n\t */\r\n\tgetCountry() {\r\n\t\tconst { digits } = this.state\r\n\t\t// Return `undefined` if no digits have been input yet.\r\n\t\tif (digits) {\r\n\t\t\treturn this._getCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * @return {string} [country]\r\n\t */\r\n\t_getCountry() {\r\n\t\tconst { country } = this.state\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t// `AsYouType.getCountry()` returns `undefined`\r\n\t\t\t// for \"non-geographic\" phone numbering plans.\r\n\t\t\tif (country === '001') {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn country\r\n\t}\r\n\r\n\tdetermineTheCountryIfNeeded() {\r\n\t\t// Suppose a user enters a phone number in international format,\r\n\t\t// and there're several countries corresponding to that country calling code,\r\n\t\t// and a country has been derived from the number, and then\r\n\t\t// a user enters one more digit and the number is no longer\r\n\t\t// valid for the derived country, so the country should be re-derived\r\n\t\t// on every new digit in those cases.\r\n\t\t//\r\n\t\t// If the phone number is being input in national format,\r\n\t\t// then it could be a case when `defaultCountry` wasn't specified\r\n\t\t// when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\r\n\t\t// and that \"calling code\" could correspond to a \"non-geographic entity\",\r\n\t\t// or there could be several countries corresponding to that country calling code.\r\n\t\t// In those cases, `this.country` is `undefined` and should be derived\r\n\t\t// from the number. Again, if country calling code is ambiguous, then\r\n\t\t// `this.country` should be re-derived with each new digit.\r\n\t\t//\r\n\t\tif (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\r\n\t\t\tthis.determineTheCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode ` in case of an international phone number\r\n\tgetFullNumber(formattedNationalNumber) {\r\n\t\tif (this.isInternational()) {\r\n\t\t\tconst prefix = (text) => this.formatter.getInternationalPrefixBeforeCountryCallingCode(this.state, {\r\n\t\t\t\tspacing: text ? true : false\r\n\t\t\t}) + text\r\n\t\t\tconst { callingCode } = this.state\r\n\t\t\tif (!callingCode) {\r\n\t\t\t\treturn prefix(`${this.state.getDigitsWithoutInternationalPrefix()}`)\r\n\t\t\t}\r\n\t\t\tif (!formattedNationalNumber) {\r\n\t\t\t\treturn prefix(callingCode)\r\n\t\t\t}\r\n\t\t\treturn prefix(`${callingCode} ${formattedNationalNumber}`)\r\n\t\t}\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n\r\n\tgetNonFormattedNationalNumberWithPrefix() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcomplexPrefixBeforeNationalSignificantNumber,\r\n\t\t\tnationalPrefix\r\n\t\t} = this.state\r\n\t\tlet number = nationalSignificantNumber\r\n\t\tconst prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix\r\n\t\tif (prefix) {\r\n\t\t\tnumber = prefix + number\r\n\t\t}\r\n\t\treturn number\r\n\t}\r\n\r\n\tgetNonFormattedNumber() {\r\n\t\tconst { nationalSignificantNumberMatchesInput } = this.state\r\n\t\treturn this.getFullNumber(\r\n\t\t\tnationalSignificantNumberMatchesInput\r\n\t\t\t\t? this.getNonFormattedNationalNumberWithPrefix()\r\n\t\t\t\t: this.state.getNationalDigits()\r\n\t\t)\r\n\t}\r\n\r\n\tgetNonFormattedTemplate() {\r\n\t\tconst number = this.getNonFormattedNumber()\r\n\t\tif (number) {\r\n\t\t\treturn number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER)\r\n\t\t}\r\n\t}\r\n\r\n\tisCountryCallingCodeAmbiguous() {\r\n\t\tconst { callingCode } = this.state\r\n\t\tconst countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode)\r\n\t\treturn countryCodes && countryCodes.length > 1\r\n\t}\r\n\r\n\t// Determines the country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermineTheCountry() {\r\n\t\tthis.state.setCountry(getCountryByCallingCode(\r\n\t\t\tthis.isInternational() ? this.state.callingCode : this.defaultCallingCode,\r\n\t\t\tthis.state.nationalSignificantNumber,\r\n\t\t\tthis.metadata\r\n\t\t))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a E.164 phone number value for the user's input.\r\n\t *\r\n\t * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n\t * it will return `\"+12223334444\"`.\r\n\t *\r\n\t * For international phone number input, it will also auto-correct\r\n\t * some minor errors such as using a national prefix when writing\r\n\t * an international phone number. For example, if the user inputs\r\n\t * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n\t * `\"+447400000000\"` phone number value.\r\n\t *\r\n\t * Will return `undefined` if no digits have been input,\r\n\t * or when inputting a phone number in national format and no\r\n\t * default country or default \"country calling code\" have been set.\r\n\t *\r\n\t * @return {string} [value]\r\n\t */\r\n\tgetNumberValue() {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tcallingCode,\r\n\t\t\tcountry,\r\n\t\t\tnationalSignificantNumber\r\n\t\t} = this.state\r\n\r\n\t \t// Will return `undefined` if no digits have been input.\r\n\t\tif (!digits) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (this.isInternational()) {\r\n\t\t\tif (callingCode) {\r\n\t\t\t\treturn '+' + callingCode + nationalSignificantNumber\r\n\t\t\t} else {\r\n\t\t\t\treturn '+' + digits\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst callingCode_ = country ? this.metadata.countryCallingCode() : callingCode\r\n\t\t\t\treturn '+' + callingCode_ + nationalSignificantNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance of `PhoneNumber` class.\r\n\t * Will return `undefined` if no national (significant) number\r\n\t * digits have been entered so far, or if no `defaultCountry` has been\r\n\t * set and the user enters a phone number not in international format.\r\n\t */\r\n\tgetNumber() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcarrierCode,\r\n\t\t\tcallingCode\r\n\t\t} = this.state\r\n\r\n\t\t// `this._getCountry()` is basically same as `this.state.country`\r\n\t\t// with the only change that it return `undefined` in case of a\r\n\t\t// \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\r\n\t\tconst country = this._getCountry()\r\n\r\n\t\tif (!nationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (!country && !callingCode) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountry || callingCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"possible\".\r\n\t * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisPossible() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isPossible()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"valid\".\r\n\t * Is just a shortcut for `PhoneNumber.isValid()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisValid() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isValid()\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * This method is used in `react-phone-number-input/source/input-control.js`\r\n\t * in versions before `3.0.16`.\r\n\t */\r\n\tgetNationalNumber() {\r\n\t\treturn this.state.nationalSignificantNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the phone number characters entered by the user.\r\n\t * @return {string}\r\n\t */\r\n\tgetChars() {\r\n\t\treturn (this.state.international ? '+' : '') + this.state.digits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the template for the formatted phone number.\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplate() {\r\n\t\treturn this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || ''\r\n\t}\r\n}", "import Metadata from './metadata.js'\r\n\r\nexport default function getCountries(metadata) {\r\n\treturn new Metadata(metadata).getCountries()\r\n}", "import PhoneNumber from './PhoneNumber.js'\r\n\r\nexport default function getExampleNumber(country, examples, metadata) {\r\n\tif (examples[country]) {\r\n\t\treturn new PhoneNumber(country, examples[country], metadata)\r\n\t}\r\n}", "import AsYouType from './AsYouType.js'\r\n\r\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\r\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\r\n\tif (!metadata) {\r\n\t\tmetadata = country\r\n\t\tcountry = undefined\r\n\t}\r\n\treturn new AsYouType(country, metadata).input(value)\r\n}", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { parsePhoneNumberWithError as _parsePhoneNumberWithError } from '../../core/index.js'\r\n\r\nexport function parsePhoneNumberWithError() {\r\n\treturn withMetadataArgument(_parsePhoneNumberWithError, arguments)\r\n}\r\n", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { default as _parsePhoneNumber } from '../../core/index.js'\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn withMetadataArgument(_parsePhoneNumber, arguments)\r\n}", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { isValidPhoneNumber as _isValidPhoneNumber } from '../../core/index.js'\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn withMetadataArgument(_isValidPhoneNumber, arguments)\r\n}", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { isPossiblePhoneNumber as _isPossiblePhoneNumber } from '../../core/index.js'\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn withMetadataArgument(_isPossiblePhoneNumber, arguments)\r\n}", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { validatePhoneNumberLength as _validatePhoneNumberLength } from '../../core/index.js'\r\n\r\nexport function validatePhoneNumberLength() {\r\n\treturn withMetadataArgument(_validatePhoneNumberLength, arguments)\r\n}", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { findNumbers as _findNumbers } from '../../core/index.js'\r\n\r\nexport function findNumbers() {\r\n\treturn withMetadataArgument(_findNumbers, arguments)\r\n}", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { searchNumbers as _searchNumbers } from '../../core/index.js'\r\n\r\nexport function searchNumbers() {\r\n\treturn withMetadataArgument(_searchNumbers, arguments)\r\n}", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { findPhoneNumbersInText as _findPhoneNumbersInText } from '../../core/index.js'\r\n\r\nexport function findPhoneNumbersInText() {\r\n\treturn withMetadataArgument(_findPhoneNumbersInText, arguments)\r\n}", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { searchPhoneNumbersInText as _searchPhoneNumbersInText } from '../../core/index.js'\r\n\r\nexport function searchPhoneNumbersInText() {\r\n\treturn withMetadataArgument(_searchPhoneNumbersInText, arguments)\r\n}", "// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.min.json.js'\r\n\r\nimport { PhoneNumberMatcher as _PhoneNumberMatcher } from '../../core/index.js'\r\n\r\nexport function PhoneNumberMatcher(text, options) {\r\n\treturn _PhoneNumberMatcher.call(this, text, options, metadata)\r\n}\r\nPhoneNumberMatcher.prototype = Object.create(_PhoneNumberMatcher.prototype, {})\r\nPhoneNumberMatcher.prototype.constructor = PhoneNumberMatcher\r\n", "// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.min.json.js'\r\n\r\nimport { AsYouType as _AsYouType } from '../../core/index.js'\r\n\r\nexport function AsYouType(country) {\r\n\treturn _AsYouType.call(this, country, metadata)\r\n}\r\n\r\nAsYouType.prototype = Object.create(_AsYouType.prototype, {})\r\nAsYouType.prototype.constructor = AsYouType", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { isSupportedCountry as _isSupportedCountry } from '../../core/index.js'\r\n\r\nexport function isSupportedCountry() {\r\n\treturn withMetadataArgument(_isSupportedCountry, arguments)\r\n}", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { getCountries as _getCountries } from '../../core/index.js'\r\n\r\nexport function getCountries() {\r\n\treturn withMetadataArgument(_getCountries, arguments)\r\n}", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { getCountryCallingCode as _getCountryCallingCode } from '../../core/index.js'\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn withMetadataArgument(_getCountryCallingCode, arguments)\r\n}", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { getExtPrefix as _getExtPrefix } from '../../core/index.js'\r\n\r\nexport function getExtPrefix() {\r\n\treturn withMetadataArgument(_getExtPrefix, arguments)\r\n}", "// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.min.json.js'\r\n\r\nimport { Metadata as _Metadata } from '../../core/index.js'\r\n\r\nexport function Metadata() {\r\n\treturn _Metadata.call(this, metadata)\r\n}\r\n\r\nMetadata.prototype = Object.create(_Metadata.prototype, {})\r\nMetadata.prototype.constructor = Metadata", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { getExampleNumber as _getExampleNumber } from '../../core/index.js'\r\n\r\nexport function getExampleNumber() {\r\n\treturn withMetadataArgument(_getExampleNumber, arguments)\r\n}", "import withMetadataArgument from './withMetadataArgument.js'\r\nimport { formatIncompletePhoneNumber as _formatIncompletePhoneNumber } from '../../core/index.js'\r\n\r\nexport function formatIncompletePhoneNumber() {\r\n\treturn withMetadataArgument(_formatIncompletePhoneNumber, arguments)\r\n}", "import _parseNumber from '../parse.js'\r\nimport normalizeArguments from '../normalizeArguments.js'\r\n\r\nexport default function parseNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn _parseNumber(text, options, metadata)\r\n}", "import withMetadataArgument from '../min/exports/withMetadataArgument.js'\r\n\r\nimport _parse from '../es6/legacy/parse.js'\r\n\r\nexport function parse() {\r\n\treturn withMetadataArgument(_parse, arguments)\r\n}\r\n", "import _formatNumber from '../format.js'\r\nimport parse from '../parse.js'\r\n\r\nexport default function formatNumber() {\r\n\tconst {\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t} = normalizeArguments(arguments)\r\n\r\n\treturn _formatNumber(input, format, options, metadata)\r\n}\r\n\r\n// Sort out arguments\r\nfunction normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4, arg_5] = Array.prototype.slice.call(args)\r\n\r\n\tlet input\r\n\tlet format\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// Sort out arguments.\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `format('8005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If country code is supplied.\r\n\t\t// `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\r\n\t\tif (typeof arg_3 === 'string')\r\n\t\t{\r\n\t\t\tformat = arg_3\r\n\r\n\t\t\tif (arg_5)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_4\r\n\t\t\t\tmetadata = arg_5\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { defaultCountry: arg_2, extended: true }, metadata)\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\t// `format('+78005553535', 'NATIONAL', [options], metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (typeof arg_2 !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('`format` argument not passed to `formatNumber(number, format)`')\r\n\t\t\t}\r\n\r\n\t\t\tformat = arg_2\r\n\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { extended: true }, metadata)\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed number object.\r\n\t// `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\r\n\telse if (is_object(arg_1))\r\n\t{\r\n\t\tinput  = arg_1\r\n\t\tformat = arg_2\r\n\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions  = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\t// Legacy lowercase formats.\r\n\tif (format === 'International') {\r\n\t\tformat = 'INTERNATIONAL'\r\n\t} else if (format === 'National') {\r\n\t\tformat = 'NATIONAL'\r\n\t}\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'", "import withMetadataArgument from '../min/exports/withMetadataArgument.js'\r\n\r\nimport _format from '../es6/legacy/format.js'\r\n\r\nexport function format() {\r\n\treturn withMetadataArgument(_format, arguments)\r\n}\r\n", "import isViablePhoneNumber from '../helpers/isViablePhoneNumber.js'\r\nimport _getNumberType from '../helpers/getNumberType.js'\r\nimport parse from '../parse.js'\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType() {\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\t// `parseNumber()` would return `{}` when no phone number could be parsed from the input.\r\n\tif (!input.phone) {\r\n\t\treturn\r\n\t}\r\n\treturn _getNumberType(input, options, metadata)\r\n}\r\n\r\n// Sort out arguments\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet input\r\n\tlet options = {}\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `getNumberType('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If \"default country\" argument is being passed\r\n\t\t// then convert it to an `options` object.\r\n\t\t// `getNumberType('88005553535', 'RU', metadata)`.\r\n\t\tif (typeof arg_2 !== 'object')\r\n\t\t{\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\r\n\t\t\tif (isViablePhoneNumber(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, { defaultCountry: arg_2 }, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// No \"resrict country\" argument is being passed.\r\n\t\t// International phone number is passed.\r\n\t\t// `getNumberType('+78005553535', metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (arg_3)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_2\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_2\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\r\n\t\t\tif (isViablePhoneNumber(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, undefined, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed phone number.\r\n\t// `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\r\n\telse if (is_object(arg_1))\r\n\t{\r\n\t\tinput = arg_1\r\n\r\n\t\tif (arg_3)\r\n\t\t{\r\n\t\t\toptions = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'", "import withMetadataArgument from '../min/exports/withMetadataArgument.js'\r\n\r\nimport _getNumberType from '../es6/legacy/getNumberType.js'\r\n\r\nexport function getNumberType() {\r\n\treturn withMetadataArgument(_getNumberType, arguments)\r\n}\r\n", "import { normalizeArguments } from './getNumberType.js'\r\nimport _isPossibleNumber from '../isPossible.js'\r\n\r\n/**\r\n * Checks if a given phone number is possible.\r\n * Which means it only checks phone number length\r\n * and doesn't test any regular expressions.\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isPossibleNumber('+78005553535', metadata)\r\n * isPossibleNumber('8005553535', 'RU', metadata)\r\n * isPossibleNumber('88005553535', 'RU', metadata)\r\n * isPossibleNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isPossibleNumber() {\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\t// `parseNumber()` would return `{}` when no phone number could be parsed from the input.\r\n\tif (!input.phone && !(options && options.v2)) {\r\n\t\treturn false\r\n\t}\r\n\treturn _isPossibleNumber(input, options, metadata)\r\n}", "// Deprecated.\r\n\r\nimport withMetadataArgument from '../min/exports/withMetadataArgument.js'\r\n\r\nimport _isPossibleNumber from '../es6/legacy/isPossibleNumber.js'\r\n\r\nexport function isPossibleNumber() {\r\n\treturn withMetadataArgument(_isPossibleNumber, arguments)\r\n}\r\n", "import _isValidNumber from '../isValid.js'\r\nimport { normalizeArguments } from './getNumberType.js'\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function isValidNumber() {\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\t// `parseNumber()` would return `{}` when no phone number could be parsed from the input.\r\n\tif (!input.phone) {\r\n\t\treturn false\r\n\t}\r\n\treturn _isValidNumber(input, options, metadata)\r\n}", "// Deprecated.\r\n\r\nimport withMetadataArgument from '../min/exports/withMetadataArgument.js'\r\n\r\nimport _isValidNumber from '../es6/legacy/isValidNumber.js'\r\n\r\nexport function isValidNumber() {\r\n\treturn withMetadataArgument(_isValidNumber, arguments)\r\n}\r\n", "import isValidNumber from '../isValid.js'\r\n\r\n/**\r\n * Checks if a given phone number is valid within a given region.\r\n * Is just an alias for `phoneNumber.isValid() && phoneNumber.country === country`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n */\r\nexport default function isValidNumberForRegion(input, country, options, metadata) {\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\treturn input.country === country && isValidNumber(input, options, metadata)\r\n}", "import isViablePhoneNumber from '../helpers/isViablePhoneNumber.js'\r\nimport parseNumber from '../parse.js'\r\nimport _isValidNumberForRegion from './isValidNumberForRegion_.js'\r\n\r\n// This function has been deprecated and is not exported as\r\n// `isValidPhoneNumberForCountry()` or `isValidPhoneNumberForRegion()`.\r\n//\r\n// The rationale is:\r\n//\r\n// * We don't use the \"region\" word, so \"country\" would be better.\r\n//\r\n// * It could be substituted with:\r\n//\r\n// ```js\r\n// export default function isValidPhoneNumberForCountry(phoneNumberString, country) {\r\n// \tconst phoneNumber = parsePhoneNumber(phoneNumberString, {\r\n// \t\tdefaultCountry: country,\r\n// \t\t// Demand that the entire input string must be a phone number.\r\n// \t\t// Otherwise, it would \"extract\" a phone number from an input string.\r\n// \t\textract: false\r\n// \t})\r\n// \tif (!phoneNumber) {\r\n// \t\treturn false\r\n// \t}\r\n// \tif (phoneNumber.country !== country) {\r\n// \t\treturn false\r\n// \t}\r\n// \treturn phoneNumber.isValid()\r\n// }\r\n// ```\r\n//\r\n// * Same function could be used for `isPossiblePhoneNumberForCountry()`\r\n//   by replacing `isValid()` with `isPossible()`.\r\n//\r\n// * The reason why this function is not exported is because its result is ambiguous.\r\n//   Suppose `false` is returned. It could mean any of:\r\n//   * Not a phone number.\r\n//   * The phone number is valid but belongs to another country or another calling code.\r\n//   * The phone number belongs to the correct country but is not valid digit-wise.\r\n//   All those three cases should be handled separately from a \"User Experience\" standpoint.\r\n//   Simply showing \"Invalid phone number\" error in all of those cases would be lazy UX.\r\n\r\nexport default function isValidNumberForRegion(number, country, metadata) {\r\n\tif (typeof number !== 'string') {\r\n\t\tthrow new TypeError('number must be a string')\r\n\t}\r\n\tif (typeof country !== 'string') {\r\n\t\tthrow new TypeError('country must be a string')\r\n\t}\r\n\t// `parse` extracts phone numbers from raw text,\r\n\t// therefore it will cut off all \"garbage\" characters,\r\n\t// while this `validate` function needs to verify\r\n\t// that the phone number contains no \"garbage\"\r\n\t// therefore the explicit `isViablePhoneNumber` check.\r\n\tlet input\r\n\tif (isViablePhoneNumber(number)) {\r\n\t\tinput = parseNumber(number, { defaultCountry: country }, metadata)\r\n\t} else {\r\n\t\tinput = {}\r\n\t}\r\n\treturn _isValidNumberForRegion(input, country, undefined, metadata)\r\n}", "import withMetadataArgument from '../min/exports/withMetadataArgument.js'\r\n\r\nimport _isValidNumberForRegion from '../es6/legacy/isValidNumberForRegion.js'\r\n\r\nexport function isValidNumberForRegion() {\r\n\treturn withMetadataArgument(_isValidNumberForRegion, arguments)\r\n}\r\n", "// This is a legacy function.\r\n// Use `findNumbers()` instead.\r\n\r\nimport {\r\n\tPLUS_CHARS,\r\n\tVALID_PUNCTUATION,\r\n\tVALID_DIGITS,\r\n\tWHITESPACE\r\n} from '../constants.js'\r\n\r\nimport parse from '../parse.js'\r\nimport { VALID_PHONE_NUMBER_WITH_EXTENSION } from '../helpers/isViablePhoneNumber.js'\r\nimport createExtensionPattern from '../helpers/extension/createExtensionPattern.js'\r\n\r\nimport parsePreCandidate from '../findNumbers/parsePreCandidate.js'\r\nimport isValidPreCandidate from '../findNumbers/isValidPreCandidate.js'\r\nimport isValidCandidate from '../findNumbers/isValidCandidate.js'\r\n\r\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\r\nexport const EXTN_PATTERNS_FOR_PARSING = createExtensionPattern('parsing')\r\n\r\nconst WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + WHITESPACE + ']+')\r\nconst PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + VALID_PUNCTUATION + ']+$')\r\n\r\n// // Regular expression for getting opening brackets for a valid number\r\n// // found using `PHONE_NUMBER_START_PATTERN` for prepending those brackets to the number.\r\n// const BEFORE_NUMBER_DIGITS_PUNCTUATION = new RegExp('[' + OPENING_BRACKETS + ']+' + '[' + WHITESPACE + ']*' + '$')\r\n\r\nconst VALID_PRECEDING_CHARACTER_PATTERN = /[^a-zA-Z0-9]/\r\n\r\nexport default function findPhoneNumbers(text, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\tconst search = new PhoneNumberSearch(text, options, metadata)\r\n\tconst phones = []\r\n\twhile (search.hasNext()) {\r\n\t\tphones.push(search.next())\r\n\t}\r\n\treturn phones\r\n}\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport function searchPhoneNumbers(text, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\tconst search = new PhoneNumberSearch(text, options, metadata)\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (search.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: search.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\r\nexport class PhoneNumberSearch {\r\n\tconstructor(text, options, metadata) {\r\n\t\tthis.text = text\r\n\t\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t\t// code coverage would decrease for some weird reason.\r\n\t\tthis.options = options || {}\r\n\t\tthis.metadata = metadata\r\n\r\n\t\t// Iteration tristate.\r\n\t\tthis.state = 'NOT_READY'\r\n\r\n\t\tthis.regexp = new RegExp(VALID_PHONE_NUMBER_WITH_EXTENSION, 'ig')\r\n\t}\r\n\r\n\tfind() {\r\n\t\tconst matches = this.regexp.exec(this.text)\r\n\t\tif (!matches) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet number = matches[0]\r\n\t\tlet startsAt = matches.index\r\n\r\n\t\tnumber = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '')\r\n\t\tstartsAt += matches[0].length - number.length\r\n\t\t// Fixes not parsing numbers with whitespace in the end.\r\n\t\t// Also fixes not parsing numbers with opening parentheses in the end.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/252\r\n\t\tnumber = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '')\r\n\r\n\t\tnumber = parsePreCandidate(number)\r\n\r\n\t\tconst result = this.parseCandidate(number, startsAt)\r\n\t\tif (result) {\r\n\t\t\treturn result\r\n\t\t}\r\n\r\n\t\t// Tail recursion.\r\n\t\t// Try the next one if this one is not a valid phone number.\r\n\t\treturn this.find()\r\n\t}\r\n\r\n\tparseCandidate(number, startsAt) {\r\n\t\tif (!isValidPreCandidate(number, startsAt, this.text)) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Don't parse phone numbers which are non-phone numbers\r\n\t\t// due to being part of something else (e.g. a UUID).\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/213\r\n\t\t// Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).\r\n\t\tif (!isValidCandidate(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID')) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// // Prepend any opening brackets left behind by the\r\n\t\t// // `PHONE_NUMBER_START_PATTERN` regexp.\r\n\t\t// const text_before_number = text.slice(this.searching_from, startsAt)\r\n\t\t// const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\r\n\t\t// if (full_number_starts_at >= 0)\r\n\t\t// {\r\n\t\t// \tnumber   = text_before_number.slice(full_number_starts_at) + number\r\n\t\t// \tstartsAt = full_number_starts_at\r\n\t\t// }\r\n\t\t//\r\n\t\t// this.searching_from = matches.lastIndex\r\n\r\n\t\tconst result = parse(number, this.options, this.metadata)\r\n\t\tif (!result.phone) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tresult.startsAt = startsAt\r\n\t\tresult.endsAt = startsAt + number.length\r\n\t\treturn result\r\n\t}\r\n\r\n\thasNext() {\r\n\t\tif (this.state === 'NOT_READY') {\r\n\t\t\tthis.last_match = this.find()\r\n\t\t\tif (this.last_match) {\r\n\t\t\t\tthis.state = 'READY'\r\n\t\t\t} else {\r\n\t\t\t\tthis.state = 'DONE'\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.state === 'READY'\r\n\t}\r\n\r\n\tnext() {\r\n\t\t// Check the state and find the next match as a side-effect if necessary.\r\n\t\tif (!this.hasNext()) {\r\n\t\t\tthrow new Error('No next element')\r\n\t\t}\r\n\t\t// Don't retain that memory any longer than necessary.\r\n\t\tconst result = this.last_match\r\n\t\tthis.last_match = null\r\n\t\tthis.state = 'NOT_READY'\r\n\t\treturn result\r\n\t}\r\n}", "// This is a legacy function.\r\n// Use `findNumbers()` instead.\r\n\r\nimport _findPhoneNumbers, { searchPhoneNumbers as _searchPhoneNumbers } from './findPhoneNumbersInitialImplementation.js'\r\nimport normalizeArguments from '../normalizeArguments.js'\r\n\r\nexport default function findPhoneNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn _findPhoneNumbers(text, options, metadata)\r\n}\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport function searchPhoneNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn _searchPhoneNumbers(text, options, metadata)\r\n}", "import withMetadataArgument from '../min/exports/withMetadataArgument.js'\r\n\r\nimport _findPhoneNumbers from '../es6/legacy/findPhoneNumbers.js'\r\n\r\nexport function findPhoneNumbers() {\r\n\treturn withMetadataArgument(_findPhoneNumbers, arguments)\r\n}\r\n", "import withMetadataArgument from '../min/exports/withMetadataArgument.js'\r\n\r\nimport { searchPhoneNumbers as _searchPhoneNumbers } from '../es6/legacy/findPhoneNumbers.js'\r\n\r\nexport function searchPhoneNumbers() {\r\n\treturn withMetadataArgument(_searchPhoneNumbers, arguments)\r\n}\r\n", "// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../metadata.min.json.js'\r\n\r\nimport { PhoneNumberSearch as _PhoneNumberSearch } from '../es6/legacy/findPhoneNumbersInitialImplementation.js'\r\n\r\nexport function PhoneNumberSearch(text, options) {\r\n\t_PhoneNumberSearch.call(this, text, options, metadata)\r\n}\r\n\r\n// Deprecated.\r\nPhoneNumberSearch.prototype = Object.create(_PhoneNumberSearch.prototype, {})\r\nPhoneNumberSearch.prototype.constructor = PhoneNumberSearch\r\n"],
  "mappings": ";AAGA,IAAO,4BAAQ,EAAC,WAAU,GAAE,yBAAwB,EAAC,KAAI,CAAC,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,IAAI,GAAE,KAAI,CAAC,MAAK,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,MAAK,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,MAAK,MAAK,MAAK,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,MAAK,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,MAAK,MAAK,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,O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",
  "names": ["ParseError", "code", "Object", "setPrototypeOf", "prototype", "name", "constructor", "Error", "MIN_LENGTH_FOR_NSN", "MAX_LENGTH_FOR_NSN", "MAX_LENGTH_COUNTRY_CODE", "VALID_DIGITS", "DASHES", "SLASHES", "DOTS", "WHITESPACE", "BRACKETS", "TILDES", "VALID_PUNCTUATION", "PLUS_CHARS", "a", "b", "split", "pa", "pb", "i", "na", "Number", "nb", "isNaN", "V3", "V4", "DEFAULT_EXT_PREFIX", "CALLING_CODE_REG_EXP", "Metadata", "metadata", "_classCallCheck", "validateMetadata", "setVersion", "call", "getCountries", "Object", "keys", "countries", "filter", "_", "countryCode", "v1", "v2", "v3", "nonGeographic", "nonGeographical", "country", "getCountryMetadata", "undefined", "callingCode", "getCountryCodesForCallingCode", "countryCodes", "countryCallingCodes", "length", "selectNumberingPlan", "test", "hasCountry", "Error", "numberingPlan", "NumberingPlan", "hasCallingCode", "getNumberingPlanMetadata", "getCountryCodeForCallingCode", "IDDPrefix", "defaultIDDPrefix", "nationalNumberPattern", "possibleLengths", "formats", "nationalPrefixForParsing", "nationalPrefixTransformRule", "leadingDigits", "hasTypes", "type", "ext", "country_phone_code_to_countries", "country_calling_codes", "NumberingPlan", "metadata", "globalMetadataObject", "_classCallCheck", "setVersion", "call", "getNumberingPlanMetadata", "callingCode", "v1", "v2", "formats", "_getFormats", "getDefaultCountryMetadataForRegion", "map", "_", "Format", "_getNationalPrefixFormattingRule", "_nationalPrefixForParsing", "nationalPrefix", "_getNationalPrefixIsOptionalWhenFormatting", "types", "length", "type", "hasTypes", "getType", "Type", "DEFAULT_EXT_PREFIX", "format", "_format", "nationalPrefixFormattingRule", "nationalPrefixIsOptionalWhenFormattingInNationalFormat", "usesNationalPrefix", "FIRST_GROUP_ONLY_PREFIX_PATTERN", "test", "possibleLengths", "validateMetadata", "Error", "is_object", "countries", "Object", "keys", "join", "type_of", "_typeof", "getExtPrefix", "country", "Metadata", "hasCountry", "ext", "getCountryCallingCode", "countryCallingCode", "isSupportedCountry", "undefined", "version", "v3", "v4", "compare", "V3", "V4", "RFC3966_EXTN_PREFIX", "getExtensionDigitsPattern", "maxLength", "VALID_DIGITS", "purpose", "extLimitAfterExplicitLabel", "extLimitAfterLikelyLabel", "extLimitAfterAmbiguousChar", "extLimitWhenNotSure", "possibleSeparatorsBetweenNumberAndExtLabel", "possibleCharsAfterExtLabel", "optionalExtnSuffix", "explicitExtLabels", "ambiguousExtLabels", "ambiguousSeparator", "possibleSeparatorsNumberExtLabelNoComma", "autoDiallingAndExtLabelsFound", "rfcExtn", "explicitExtn", "ambiguousExtn", "americanStyleExtnWithSuffix", "autoDiallingExtn", "onlyCommasExtn", "MIN_LENGTH_PHONE_NUMBER_PATTERN", "VALID_DIGITS", "MIN_LENGTH_FOR_NSN", "VALID_PHONE_NUMBER", "PLUS_CHARS", "VALID_PUNCTUATION", "VALID_PHONE_NUMBER_START_REG_EXP", "RegExp", "VALID_PHONE_NUMBER_WITH_EXTENSION", "createExtensionPattern", "VALID_PHONE_NUMBER_PATTERN", "number", "length", "test", "isViablePhoneNumberStart", "EXTN_PATTERN", "RegExp", "createExtensionPattern", "number", "start", "search", "numberWithoutExtension", "slice", "matches", "match", "i", "length", "ext", "DIGITS", "parseDigit", "character", "string", "result", "split", "digit", "string", "result", "_createForOfIteratorHelperLoose", "split", "character", "parsePhoneNumberCharacter", "prevParsedCharacters", "parseDigit", "a", "b", "merged", "slice", "_createForOfIteratorHelperLoose", "element", "indexOf", "push", "sort", "nationalNumber", "metadata", "checkNumberLengthForType", "undefined", "type", "type_info", "possible_lengths", "possibleLengths", "mobile_type", "mergeArrays", "actual_length", "length", "minimum_length", "indexOf", "input", "options", "metadata", "undefined", "Metadata", "v2", "countryCallingCode", "Error", "selectNumberingPlan", "phone", "country", "hasCountry", "possibleLengths", "isPossibleNumber", "nationalNumber", "isNonGeographicCallingCode", "checkNumberLength", "text", "regular_expression", "RegExp", "test", "NON_FIXED_LINE_PHONE_TYPES", "input", "options", "metadata", "country", "Metadata", "selectNumberingPlan", "countryCallingCode", "nationalNumber", "v2", "phone", "matchesEntirely", "nationalNumberPattern", "isNumberTypeEqualTo", "type", "pattern", "_createForOfIteratorHelperLoose", "possibleLengths", "indexOf", "length", "input", "options", "metadata", "Metadata", "selectNumberingPlan", "country", "countryCallingCode", "hasTypes", "getNumberType", "undefined", "nationalNumber", "v2", "phone", "matchesEntirely", "nationalNumberPattern", "callingCode", "nationalNumber", "metadata", "_metadata", "Metadata", "possibleCountries", "getCountryCodesForCallingCode", "filter", "country", "couldNationalNumberBelongToCountry", "selectNumberingPlan", "numberingPlan", "possibleLengths", "indexOf", "length", "formattedNumber", "replace", "RegExp", "VALID_PUNCTUATION", "trim", "FIRST_GROUP_PATTERN", "number", "format", "useInternationalFormat", "withNationalPrefix", "carrierCode", "metadata", "formattedNumber", "replace", "RegExp", "pattern", "internationalFormat", "nationalPrefixFormattingRule", "applyInternationalSeparatorStyle", "SINGLE_IDD_PREFIX_REG_EXP", "country", "callingCode", "metadata", "countryMetadata", "Metadata", "selectNumberingPlan", "defaultIDDPrefix", "test", "IDDPrefix", "parseRFC3966", "text", "number", "ext", "replace", "_createForOfIteratorHelperLoose", "split", "part", "name", "value", "isViablePhoneNumber", "result", "formatRFC3966", "Error", "DEFAULT_OPTIONS", "formatExtension", "formattedNumber", "extension", "metadata", "ext", "formatNumber", "input", "format", "options", "Metadata", "country", "hasCountry", "Error", "countryCallingCode", "selectNumberingPlan", "phone", "nationalNumber", "v2", "number", "formatNationalNumber", "carrierCode", "addExtension", "formatRFC3966", "fromCountry", "formatIDD", "formatAs", "chooseFormatForNumber", "formats", "formatNationalNumberUsingFormat", "useInternationalFormat", "withNationalPrefix", "nationalPrefixIsOptionalWhenFormattingInNationalFormat", "nationalPrefix", "availableFormats", "nationalNnumber", "_createForOfIteratorHelperLoose", "leadingDigitsPatterns", "length", "lastLeadingDigitsPattern", "search", "matchesEntirely", "pattern", "fromCountryCallingCode", "getCountryCallingCode", "iddPrefix", "getIddPrefix", "undefined", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "PhoneNumber", "countryOrCountryCallingCode", "nationalNumber", "metadata", "_classCallCheck", "TypeError", "getCountryAndCountryCallingCode", "country", "countryCallingCode", "number", "ext", "getPossibleCountriesForNumber", "isPossibleNumber", "v2", "isValidNumber", "Metadata", "isNonGeographicCallingCode", "phoneNumber", "getType", "getNumberType", "format", "options", "formatNumber", "_objectSpread", "isCountryCode", "value", "test", "getCountryAndCountryCallingCode", "countryOrCountryCallingCode", "metadataJson", "country", "countryCallingCode", "metadata", "Metadata", "selectNumberingPlan", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "isNonGeographicCallingCode", "CAPTURING_DIGIT_PATTERN", "RegExp", "VALID_DIGITS", "number", "country", "callingCode", "metadata", "countryMetadata", "Metadata", "selectNumberingPlan", "IDDPrefixPattern", "IDDPrefix", "search", "slice", "match", "length", "matchedGroups", "number", "metadata", "numberingPlan", "nationalPrefixForParsing", "prefixPattern", "RegExp", "prefixMatch", "exec", "nationalNumber", "carrierCode", "capturedGroupsCount", "length", "hasCapturedGroups", "nationalPrefixTransformRule", "replace", "prefixBeforeNationalNumber", "slice", "nationalPrefix", "possiblePositionOfTheFirstCapturedGroup", "indexOf", "possibleNationalPrefix", "number", "metadata", "extractNationalNumberFromPossiblyIncompleteNumber", "carrierCode", "nationalNumber", "shouldHaveExtractedNationalPrefix", "possibleLengths", "isPossibleIncompleteNationalNumber", "nationalNumberBefore", "nationalNumberAfter", "matchesEntirely", "nationalNumberPattern", "checkNumberLength", "number", "country", "callingCode", "metadata", "countryCallingCode", "getCountryCallingCode", "indexOf", "Metadata", "selectNumberingPlan", "possibleShorterNumber", "slice", "length", "extractNationalNumber", "possibleShorterNationalNumber", "nationalNumber", "matchesEntirely", "nationalNumberPattern", "checkNumberLength", "number", "country", "callingCode", "metadata", "isNumberWithIddPrefix", "numberWithoutIDD", "stripIddPrefix", "extractCountryCallingCodeFromInternationalNumberWithoutPlusSign", "countryCallingCode", "shorterNumber", "countryCallingCodeSource", "Metadata", "i", "MAX_LENGTH_COUNTRY_CODE", "length", "slice", "hasCallingCode", "selectNumberingPlan", "possibleCountries", "nationalPhoneNumber", "metadata", "Metadata", "_createForOfIteratorHelperLoose", "country", "leadingDigits", "search", "getNumberType", "phone", "undefined", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "callingCode", "nationalPhoneNumber", "metadata", "isNonGeographicCallingCode", "possibleCountries", "getCountryCodesForCallingCode", "length", "getCountryByNationalNumber", "PLUS_SIGN", "RFC3966_VISUAL_SEPARATOR_", "RFC3966_PHONE_DIGIT_", "VALID_DIGITS", "RFC3966_GLOBAL_NUMBER_DIGITS_", "RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_", "RegExp", "ALPHANUM_", "RFC3966_DOMAINLABEL_", "VALID_ALPHA_", "RFC3966_TOPLABEL_", "RFC3966_DOMAINNAME_", "RFC3966_DOMAINNAME_PATTERN_", "RFC3966_PREFIX_", "RFC3966_PHONE_CONTEXT_", "RFC3966_ISDN_SUBADDRESS_", "numberToExtractFrom", "indexOfPhoneContext", "indexOf", "phoneContextStart", "length", "phoneContextEnd", "substring", "isPhoneContextValid", "phoneContext", "test", "numberToParse", "extractFormattedPhoneNumber", "phoneContext", "extractPhoneContext", "isPhoneContextValid", "ParseError", "phoneNumberString", "charAt", "PLUS_SIGN", "indexOfRfc3966Prefix", "indexOf", "RFC3966_PREFIX_", "indexOfNationalNumber", "length", "indexOfPhoneContext", "RFC3966_PHONE_CONTEXT_", "substring", "indexOfIsdn", "RFC3966_ISDN_SUBADDRESS_", "MAX_INPUT_STRING_LENGTH", "PHONE_NUMBER_START_PATTERN", "RegExp", "PLUS_CHARS", "VALID_DIGITS", "AFTER_PHONE_NUMBER_END_PATTERN", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "text", "options", "metadata", "Metadata", "defaultCountry", "hasCountry", "v2", "ParseError", "Error", "parseInput", "extract", "formattedPhoneNumber", "number", "ext", "error", "parsePhoneNumber", "defaultCallingCode", "country", "nationalNumber", "countryCallingCode", "countryCallingCodeSource", "carrierCode", "hasSelectedNumberingPlan", "length", "MIN_LENGTH_FOR_NSN", "MAX_LENGTH_FOR_NSN", "phoneNumber", "PhoneNumber", "__countryCallingCodeSource", "valid", "extended", "matchesEntirely", "nationalNumberPattern", "result", "possible", "possibleLengths", "isPossibleNumber", "phone", "extractFormattedPhoneNumber", "throwOnError", "startsAt", "search", "slice", "replace", "extractFormattedPhoneNumberFromPossibleRfc3966NumberUri", "isViablePhoneNumber", "isViablePhoneNumberStart", "withExtensionStripped", "extractExtension", "extractCountryCallingCode", "parseIncompletePhoneNumber", "selectNumberingPlan", "isNonGeographicCallingCode", "getCountryCallingCode", "extractNationalNumber", "exactCountry", "getCountryByCallingCode", "text", "options", "metadata", "parse", "_objectSpread", "v2", "args", "Array", "prototype", "slice", "call", "_slicedToArray", "arg_1", "arg_2", "arg_3", "arg_4", "text", "options", "metadata", "TypeError", "undefined", "_objectSpread", "defaultCountry", "isObject", "Error", "_", "_typeof", "parsePhoneNumberWithError", "normalizeArguments", "arguments", "text", "options", "metadata", "parsePhoneNumberWithError_", "parsePhoneNumber", "text", "options", "metadata", "defaultCountry", "isSupportedCountry", "_objectSpread", "undefined", "parsePhoneNumberWithError", "error", "ParseError", "parsePhoneNumber", "normalizeArguments", "arguments", "text", "options", "metadata", "parsePhoneNumber_", "normalizeArguments", "arguments", "text", "options", "metadata", "_objectSpread", "extract", "phoneNumber", "parsePhoneNumber", "isValid", "isPossiblePhoneNumber", "normalizeArguments", "arguments", "text", "options", "metadata", "_objectSpread", "extract", "phoneNumber", "parsePhoneNumber", "isPossible", "normalizeArguments", "arguments", "text", "options", "metadata", "_objectSpread", "extract", "phoneNumber", "parsePhoneNumberWithError", "Metadata", "selectNumberingPlan", "countryCallingCode", "result", "checkNumberLength", "nationalNumber", "error", "ParseError", "message", "Node", "key", "value", "next", "prev", "_classCallCheck", "LRUCache", "limit", "size", "head", "tail", "cache", "ensureLimit", "node", "remove", "put", "console", "log", "RegExpCache", "size", "_classCallCheck", "cache", "LRUCache", "pattern", "regExp", "get", "RegExp", "put", "limit", "lower", "upper", "TypeError", "trimAfterFirstMatch", "regexp", "string", "index", "search", "slice", "startsWith", "substring", "indexOf", "endsWith", "length", "_pZ", "pZ", "PZ", "_pN", "_pNd", "pNd", "_pL", "pL", "pL_regexp", "RegExp", "_pSc", "pSc", "pSc_regexp", "_pMn", "pMn", "pMn_regexp", "_InBasic_Latin", "_InLatin_1_Supplement", "_InLatin_Extended_A", "_InLatin_Extended_Additional", "_InLatin_Extended_B", "_InCombining_Diacritical_Marks", "latinLetterRegexp", "isLatinLetter", "letter", "test", "isInvalidPunctuationSymbol", "character", "phoneNumberString", "phoneNumber", "metadata", "phoneNumberStringContainsCallingCode", "parsedPhoneNumber", "parsePhoneNumber", "defaultCallingCode", "countryCallingCode", "ext", "number", "nationalNumber", "indexOf", "POSSIBLE", "phoneNumber", "candidate", "metadata", "VALID", "isValid", "containsOnlyValidXChars", "STRICT_GROUPING", "regExpCache", "containsMoreThanOneSlashInNationalNumber", "isNationalPrefixPresentIfRequired", "checkNumberGroupingIsValid", "allNumberGroupsRemainGrouped", "EXACT_GROUPING", "allNumberGroupsAreExactlyPresent", "index", "length", "charAtIndex", "charAt", "charAtNextIndex", "matchPhoneNumberStringAgainstPhoneNumber", "substring", "ext", "parseDigits", "_metadata", "__countryCallingCodeSource", "Metadata", "selectNumberingPlan", "countryCallingCode", "phoneNumberRegion", "country", "getCountryByCallingCode", "nationalNumber", "format", "chooseFormatForNumber", "numberingPlan", "formats", "nationalPrefixFormattingRule", "nationalPrefixIsOptionalWhenFormattingInNationalFormat", "usesNationalPrefix", "Boolean", "nationalPrefix", "firstSlashInBodyIndex", "indexOf", "secondSlashInBodyIndex", "candidateHasCountryCode", "slice", "number", "checkGroups", "Error", "normalizedCandidate", "normalizeDigits", "formattedNumberGroups", "getNationalNumberGroups", "alternateFormats", "MetadataManager", "getAlternateFormatsForCountry", "getCountryCode", "nationalSignificantNumber", "util", "getNationalSignificantNumber", "_createForOfIteratorHelperLoose", "numberFormats", "alternateFormat", "leadingDigitsPatterns", "leadingDigitsRegExp", "getPatternForRegExp", "test", "formattingPattern", "formatNsnUsingPattern", "split", "rfc3966Format", "formatNumber", "endIndex", "startIndex", "candidateGroups", "NON_DIGITS_PATTERN", "candidateNumberGroupIndex", "hasExtension", "contains", "formattedNumberGroupIndex", "endsWith", "fromIndex", "getCountryCodeSource", "CountryCodeSource", "FROM_DEFAULT_COUNTRY", "countryCode", "String", "i", "region", "getRegionCodeForCountryCode", "getNddPrefixForRegion", "Character", "isDigit", "startsWith", "getExtension", "SECOND_NUMBER_START_PATTERN", "candidate", "trimAfterFirstMatch", "SLASH_SEPARATED_DATES", "TIME_STAMPS", "TIME_STAMPS_SUFFIX_LEADING", "candidate", "offset", "text", "test", "followingText", "slice", "length", "OPENING_PARENS", "CLOSING_PARENS", "NON_PARENS", "LEAD_CLASS", "PLUS_CHARS", "LEAD_CLASS_LEADING", "RegExp", "BRACKET_PAIR_LIMIT", "limit", "MATCHING_BRACKETS_ENTIRE", "PUB_PAGES", "candidate", "offset", "text", "leniency", "test", "previousChar", "isInvalidPunctuationSymbol", "isLatinLetter", "lastCharIndex", "length", "nextChar", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "EXTN_PATTERNS_FOR_MATCHING", "createExtensionPattern", "INNER_MATCHES", "pZ", "PZ", "leadLimit", "limit", "punctuationLimit", "digitBlockLimit", "MAX_LENGTH_FOR_NSN", "MAX_LENGTH_COUNTRY_CODE", "blockLimit", "punctuation", "VALID_PUNCTUATION", "digitSequence", "pNd", "PATTERN", "LEAD_CLASS", "UNWANTED_END_CHAR_PATTERN", "RegExp", "_pN", "_pL", "MAX_SAFE_INTEGER", "Number", "Math", "pow", "PhoneNumberMatcher", "text", "options", "metadata", "_classCallCheck", "v2", "defaultCallingCode", "defaultCountry", "isSupportedCountry", "undefined", "leniency", "extended", "maxTries", "TypeError", "Leniency", "PATTERN", "RegExp", "state", "searchIndex", "regExpCache", "RegExpCache", "matches", "exec", "candidate", "offset", "index", "parsePreCandidate", "isValidPreCandidate", "match", "parseAndVerify", "extractInnerMatch", "startsAt", "endsAt", "number", "phoneNumber", "result", "phone", "nationalNumber", "country", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "countryCallingCode", "ext", "substring", "_createForOfIteratorHelperLoose", "INNER_MATCHES", "innerMatchPattern", "isFirstMatch", "candidateMatch", "innerMatchRegExp", "trimAfterFirstMatch", "UNWANTED_END_CHAR_PATTERN", "slice", "candidateIndexGuess", "indexOf", "isValidCandidate", "parsePhoneNumber", "isPossible", "length", "lastMatch", "find", "hasNext", "Error", "normalizeArguments", "arguments", "text", "options", "metadata", "matcher", "PhoneNumberMatcher", "results", "hasNext", "push", "next", "normalizeArguments", "arguments", "text", "options", "metadata", "matcher", "PhoneNumberMatcher", "_defineProperty", "Symbol", "iterator", "next", "hasNext", "done", "value", "normalizeArguments", "arguments", "text", "options", "metadata", "matcher", "PhoneNumberMatcher", "_objectSpread", "v2", "results", "hasNext", "push", "next", "normalizeArguments", "arguments", "text", "options", "metadata", "matcher", "PhoneNumberMatcher", "_objectSpread", "v2", "_defineProperty", "Symbol", "iterator", "next", "hasNext", "done", "value", "AsYouTypeState", "onCountryChange", "onCallingCodeChange", "_classCallCheck", "country", "callingCode", "international", "IDDPrefix", "undefined", "missingPlus", "digits", "resetNationalSignificantNumber", "initCountryAndCallingCode", "nationalSignificantNumber", "getNationalDigits", "nationalSignificantNumberMatchesInput", "nationalPrefix", "carrierCode", "complexPrefixBeforeNationalSignificantNumber", "properties", "Object", "keys", "key", "setCountry", "setCallingCode", "nextDigits", "slice", "length", "DIGIT_PLACEHOLDER", "DIGIT_PLACEHOLDER_MATCHER", "RegExp", "repeat", "string", "times", "result", "cutAndStripNonPairedParens", "cutBeforeIndex", "stripNonPairedParens", "slice", "stripNonPairedParens", "string", "dangling_braces", "i", "length", "push", "pop", "start", "cleared_string", "index", "slice", "populateTemplateWithDigits", "template", "position", "digits", "_createForOfIteratorHelperLoose", "split", "digit", "search", "DIGIT_PLACEHOLDER_MATCHER", "replace", "state", "format", "metadata", "shouldTryNationalPrefixFormattingRule", "getSeparatorAfterNationalPrefix", "matcher", "RegExp", "pattern", "test", "nationalSignificantNumber", "formatNationalNumberWithAndWithoutNationalPrefixFormattingRule", "canFormatCompleteNumber", "checkNumberLength", "international", "nationalPrefix", "carrierCode", "formattedNumber", "formatNationalNumber", "useNationalPrefixFormattingRule", "formattedNationalNumber", "formatNationalNumberUsingFormat", "useInternationalFormat", "withNationalPrefix", "complexPrefixBeforeNationalSignificantNumber", "isValidFormattedNationalNumber", "parseDigits", "getNationalDigits", "PatternParser", "parse", "pattern", "context", "or", "instructions", "parsePattern", "length", "Error", "branches", "op", "args", "concat", "expandSingleElementArray", "push", "pop", "match", "OPERATOR", "ILLEGAL_CHARACTER_REGEXP", "test", "getContext", "split", "operator", "before", "slice", "index", "rightPart", "startContext", "endContext", "oneOfSet", "parseOneOfSet", "parseOneOfSet", "pattern", "values", "i", "length", "Error", "prevValue", "charCodeAt", "nextValue", "value", "push", "String", "fromCharCode", "ILLEGAL_CHARACTER_REGEXP", "OPERATOR", "RegExp", "expandSingleElementArray", "array", "PatternMatcher", "pattern", "_classCallCheck", "matchTree", "PatternParser", "parse", "string", "allowOverflow", "Error", "result", "match", "split", "matchedChars", "overflow", "match", "characters", "tree", "last", "characterString", "join", "indexOf", "length", "matchedChars", "partialMatch", "overflow", "slice", "Array", "isArray", "restCharacters", "i", "subtree", "result", "Error", "JSON", "stringify", "op", "_createForOfIteratorHelperLoose", "args", "branch", "char", "DUMMY_DIGIT", "LONGEST_NATIONAL_PHONE_NUMBER_LENGTH", "LONGEST_DUMMY_PHONE_NUMBER", "repeat", "NATIONAL_PREFIX_SEPARATORS_PATTERN", "SUPPORT_LEGACY_FORMATTING_PATTERNS", "CREATE_CHARACTER_CLASS_PATTERN", "CREATE_STANDALONE_DIGIT_PATTERN", "NON_ALTERING_FORMAT_REG_EXP", "RegExp", "VALID_PUNCTUATION", "MIN_LEADING_DIGITS_LENGTH", "AsYouTypeFormatter", "state", "metadata", "_classCallCheck", "resetFormat", "chosenFormat", "undefined", "template", "nationalNumberTemplate", "populatedNationalNumberTemplate", "populatedNationalNumberTemplatePosition", "numberingPlan", "isNANP", "callingCode", "matchingFormats", "formats", "nationalSignificantNumber", "narrowDownMatchingFormats", "format", "nextDigits", "canFormatCompleteNumber", "_createForOfIteratorHelperLoose", "formattedCompleteNumber", "formatCompleteNumber", "shouldTryNationalPrefixFormattingRule", "international", "nationalPrefix", "getSeparatorAfterNationalPrefix", "setNationalNumberTemplate", "replace", "DIGIT_PLACEHOLDER", "lastIndexOf", "formatNationalNumberWithNextDigits", "previouslyChosenFormat", "newlyChosenFormat", "chooseFormat", "formatNextNationalNumberDigits", "getNationalDigits", "leadingDigits", "leadingDigitsPatternIndex", "length", "filter", "formatSuits", "formatMatches", "indexOf", "usesNationalPrefix", "nationalPrefixIsOptionalWhenFormattingInNationalFormat", "nationalPrefixIsMandatoryWhenFormattingInNationalFormat", "leadingDigitsPatternsCount", "leadingDigitsPatterns", "Math", "min", "leadingDigitsPattern", "PatternMatcher", "match", "allowOverflow", "error", "console", "test", "internationalFormat", "_loop", "getFormatFormat", "createTemplateForFormat", "_", "slice", "pattern", "getTemplateForFormat", "nationalPrefixFormattingRule", "options", "IDDPrefix", "missingPlus", "spacing", "index", "i", "internationalPrefix", "getInternationalPrefixBeforeCountryCallingCode", "getDigitsWithoutInternationalPrefix", "cutAndStripNonPairedParens", "complexPrefixBeforeNationalSignificantNumber", "digits", "strictPattern", "nationalNumberDummyDigits", "numberFormat", "nationalPrefixIncludedInTemplate", "numberFormatWithNationalPrefix", "FIRST_GROUP_PATTERN", "parseDigits", "applyInternationalSeparatorStyle", "result", "populateTemplateWithDigits", "VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART", "VALID_PUNCTUATION", "VALID_DIGITS", "VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN", "RegExp", "VALID_FORMATTED_PHONE_NUMBER_PART", "PLUS_CHARS", "AFTER_PHONE_NUMBER_DIGITS_END_PATTERN", "COMPLEX_NATIONAL_PREFIX", "AsYouTypeParser", "defaultCountry", "defaultCallingCode", "metadata", "onNationalSignificantNumberChange", "_classCallCheck", "text", "state", "extractFormattedDigitsAndPlus", "_slicedToArray", "formattedDigits", "hasPlus", "digits", "parseDigits", "justLeadingPlus", "startInternationalNumber", "inputDigits", "nextDigits", "hasReceivedThreeLeadingDigits", "length", "appendDigits", "extractIddPrefix", "isWaitingForCountryCallingCode", "extractCountryCallingCode", "appendNationalSignificantNumberDigits", "international", "hasExtractedNationalSignificantNumber", "extractNationalSignificantNumber", "getNationalDigits", "stateUpdate", "update", "callingCode", "getDigitsWithoutInternationalPrefix", "countryCallingCode", "number", "setCallingCode", "nationalSignificantNumber", "numberingPlan", "hasSelectedNumberingPlan", "nationalPrefixForParsing", "_nationalPrefixForParsing", "couldPossiblyExtractAnotherNationalSignificantNumber", "test", "undefined", "nationalDigits", "setState", "extractNationalNumberFromPossiblyIncompleteNumber", "nationalPrefix", "nationalNumber", "carrierCode", "onExtractedNationalNumber", "prevNationalSignificantNumber", "complexPrefixBeforeNationalSignificantNumber", "nationalSignificantNumberMatchesInput", "nationalSignificantNumberIndex", "lastIndexOf", "prefixBeforeNationalNumber", "slice", "extractAnotherNationalSignificantNumber", "extractCallingCodeAndNationalSignificantNumber", "fixMissingPlus", "IDDPrefix", "numberWithoutIDD", "stripIddPrefix", "country", "extractCountryCallingCodeFromInternationalNumberWithoutPlusSign", "newCallingCode", "missingPlus", "resetNationalSignificantNumber", "extractFormattedPhoneNumber", "text", "startsAt", "search", "VALID_FORMATTED_PHONE_NUMBER_PART", "slice", "hasPlus", "length", "replace", "AFTER_PHONE_NUMBER_DIGITS_END_PATTERN", "_extractFormattedDigitsAndPlus", "extractedNumber", "extractFormattedDigitsAndPlus", "_slicedToArray", "formattedDigits", "VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN", "test", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "AsYouType", "optionsOrDefaultCountry", "metadata", "_classCallCheck", "Metadata", "getCountryAndCallingCode", "_slicedToArray", "defaultCountry", "defaultCallingCode", "reset", "_typeof", "hasCountry", "undefined", "isNonGeographicCallingCode", "text", "parser", "input", "state", "digits", "justLeadingPlus", "formattedOutput", "determineTheCountryIfNeeded", "nationalSignificantNumber", "formatter", "narrowDownMatchingFormats", "formattedNationalNumber", "hasSelectedNumberingPlan", "format", "reExtractNationalSignificantNumber", "nationalDigits", "getNationalDigits", "getFullNumber", "getNonFormattedNumber", "AsYouTypeState", "onCountryChange", "country", "onCallingCodeChange", "callingCode", "selectNumberingPlan", "numberingPlan", "AsYouTypeFormatter", "AsYouTypeParser", "onNationalSignificantNumberChange", "international", "isInternational", "getCountryCallingCode", "getCallingCode", "_getCountry", "isCountryCallingCodeAmbiguous", "determineTheCountry", "prefix", "getInternationalPrefixBeforeCountryCallingCode", "spacing", "getDigitsWithoutInternationalPrefix", "complexPrefixBeforeNationalSignificantNumber", "nationalPrefix", "number", "nationalSignificantNumberMatchesInput", "getNonFormattedNationalNumberWithPrefix", "replace", "DIGIT_PLACEHOLDER", "countryCodes", "getCountryCodesForCallingCode", "length", "setCountry", "getCountryByCallingCode", "callingCode_", "countryCallingCode", "carrierCode", "phoneNumber", "PhoneNumber", "getNumber", "isPossible", "isValid", "getTemplate", "getNonFormattedTemplate", "metadata", "Metadata", "getCountries", "country", "examples", "metadata", "PhoneNumber", "value", "country", "metadata", "undefined", "AsYouType", "input", "parsePhoneNumberWithError", "parsePhoneNumber", "isValidPhoneNumber", "isPossiblePhoneNumber", "validatePhoneNumberLength", "findNumbers", "searchNumbers", "findPhoneNumbersInText", "searchPhoneNumbersInText", "PhoneNumberMatcher", "AsYouType", "country", "isSupportedCountry", "getCountries", "getCountryCallingCode", "getExtPrefix", "Metadata", "getExampleNumber", "formatIncompletePhoneNumber", "normalizeArguments", "arguments", "text", "options", "metadata", "_parseNumber", "parse", "formatNumber", "normalizeArguments", "arguments", "input", "format", "options", "metadata", "_formatNumber", "args", "Array", "prototype", "slice", "call", "_slicedToArray", "arg_1", "arg_2", "arg_3", "arg_4", "arg_5", "parse", "defaultCountry", "extended", "Error", "is_object", "TypeError", "_", "_typeof", "formatNumber", "getNumberType", "normalizeArguments", "arguments", "input", "options", "metadata", "phone", "_getNumberType", "args", "Array", "prototype", "slice", "call", "_slicedToArray", "arg_1", "arg_2", "arg_3", "arg_4", "_typeof", "isViablePhoneNumber", "parse", "defaultCountry", "undefined", "is_object", "TypeError", "_", "getNumberType", "isPossibleNumber", "normalizeArguments", "arguments", "input", "options", "metadata", "phone", "v2", "_isPossibleNumber", "isPossibleNumber", "isValidNumber", "normalizeArguments", "arguments", "input", "options", "metadata", "phone", "_isValidNumber", "isValidNumber", "input", "country", "options", "metadata", "isValidNumber", "isValidNumberForRegion", "number", "country", "metadata", "TypeError", "input", "isViablePhoneNumber", "parseNumber", "defaultCountry", "_isValidNumberForRegion", "undefined", "isValidNumberForRegion", "EXTN_PATTERNS_FOR_PARSING", "createExtensionPattern", "WHITESPACE_IN_THE_BEGINNING_PATTERN", "RegExp", "WHITESPACE", "PUNCTUATION_IN_THE_END_PATTERN", "VALID_PUNCTUATION", "text", "options", "metadata", "undefined", "search", "PhoneNumberSearch", "phones", "hasNext", "push", "next", "searchPhoneNumbers", "_defineProperty", "Symbol", "iterator", "done", "value", "_classCallCheck", "state", "regexp", "RegExp", "VALID_PHONE_NUMBER_WITH_EXTENSION", "_createClass", "matches", "exec", "number", "startsAt", "index", "replace", "WHITESPACE_IN_THE_BEGINNING_PATTERN", "length", "PUNCTUATION_IN_THE_END_PATTERN", "parsePreCandidate", "result", "parseCandidate", "find", "isValidPreCandidate", "isValidCandidate", "extended", "parse", "phone", "endsAt", "last_match", "Error", "findPhoneNumbers", "normalizeArguments", "arguments", "text", "options", "metadata", "_findPhoneNumbers", "searchPhoneNumbers", "_searchPhoneNumbers", "findPhoneNumbers", "searchPhoneNumbers", "PhoneNumberSearch"]
}
